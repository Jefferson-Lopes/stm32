
004-uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003490  08003490  00013490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f4  080034f4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  0800356c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800356c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094a4  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014e1  00000000  00000000  00029542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0002aa28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f3f  00000000  00000000  0002b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fc0  00000000  00000000  0005166f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eed6a  00000000  00000000  0005a62f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e7c  00000000  00000000  001493ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003478 	.word	0x08003478

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003478 	.word	0x08003478

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 f9ea 	bl	80009c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f821 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f8ab 	bl	800074c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005f6:	f000 f879 	bl	80006ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str[] = {"Hello world!"};
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <main+0x48>)
 80005fc:	463c      	mov	r4, r7
 80005fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000600:	c407      	stmia	r4!, {r0, r1, r2}
 8000602:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */
	str_len = sprintf (str, "Hello world!");
 8000604:	463b      	mov	r3, r7
 8000606:	4909      	ldr	r1, [pc, #36]	; (800062c <main+0x48>)
 8000608:	4618      	mov	r0, r3
 800060a:	f002 fac7 	bl	8002b9c <siprintf>
 800060e:	4603      	mov	r3, r0
 8000610:	81fb      	strh	r3, [r7, #14]

	HAL_UART_Transmit(&huart1, (uint8_t*)&str, str_len, HAL_MAX_DELAY);
 8000612:	89fa      	ldrh	r2, [r7, #14]
 8000614:	4639      	mov	r1, r7
 8000616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x4c>)
 800061c:	f001 fdee 	bl	80021fc <HAL_UART_Transmit>

	HAL_Delay(1000);
 8000620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000624:	f000 fa2a 	bl	8000a7c <HAL_Delay>
  while (1){
 8000628:	e7ec      	b.n	8000604 <main+0x20>
 800062a:	bf00      	nop
 800062c:	08003490 	.word	0x08003490
 8000630:	2000008c 	.word	0x2000008c

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 faa2 	bl	8002b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xb0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xb0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xb0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemClock_Config+0xb4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <SystemClock_Config+0xb4>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <SystemClock_Config+0xb4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fca1 	bl	8000fe8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006ac:	f000 f866 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ff3a 	bl	8001544 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006d6:	f000 f851 	bl	800077c <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	; 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART1_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART1_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x58>)
 8000730:	f001 fd16 	bl	8002160 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f81f 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000008c 	.word	0x2000008c
 8000748:	40011000 	.word	0x40011000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_GPIO_Init+0x2c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a08      	ldr	r2, [pc, #32]	; (8000778 <MX_GPIO_Init+0x2c>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_GPIO_Init+0x2c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b0ae      	sub	sp, #184	; 0xb8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2290      	movs	r2, #144	; 0x90
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 f9cb 	bl	8002b8c <memset>
  if(huart->Instance==USART1)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a21      	ldr	r2, [pc, #132]	; (8000880 <HAL_UART_MspInit+0xb0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d13b      	bne.n	8000878 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000804:	2300      	movs	r3, #0
 8000806:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4618      	mov	r0, r3
 800080e:	f001 f87f 	bl	8001910 <HAL_RCCEx_PeriphCLKConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000818:	f7ff ffb0 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800081e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000820:	4a18      	ldr	r2, [pc, #96]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6453      	str	r3, [r2, #68]	; 0x44
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800082a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082c:	f003 0310 	and.w	r3, r3, #16
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4a12      	ldr	r2, [pc, #72]	; (8000884 <HAL_UART_MspInit+0xb4>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	6313      	str	r3, [r2, #48]	; 0x30
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_UART_MspInit+0xb4>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800084c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000866:	2304      	movs	r3, #4
 8000868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000870:	4619      	mov	r1, r3
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <HAL_UART_MspInit+0xb8>)
 8000874:	f000 fa0c 	bl	8000c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000878:	bf00      	nop
 800087a:	37b8      	adds	r7, #184	; 0xb8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40011000 	.word	0x40011000
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400

0800088c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <NMI_Handler+0x4>

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d8:	f000 f8b0 	bl	8000a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f002 f912 	bl	8002b38 <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20080000 	.word	0x20080000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000114 	.word	0x20000114
 8000948:	20000130 	.word	0x20000130

0800094c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <SystemInit+0x20>)
 8000952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000956:	4a05      	ldr	r2, [pc, #20]	; (800096c <SystemInit+0x20>)
 8000958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800095c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000ed00 	.word	0xe000ed00

08000970 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000970:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000976:	490e      	ldr	r1, [pc, #56]	; (80009b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000978:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800097c:	e002      	b.n	8000984 <LoopCopyDataInit>

0800097e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000982:	3304      	adds	r3, #4

08000984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000988:	d3f9      	bcc.n	800097e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800098a:	4a0b      	ldr	r2, [pc, #44]	; (80009b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800098c:	4c0b      	ldr	r4, [pc, #44]	; (80009bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000990:	e001      	b.n	8000996 <LoopFillZerobss>

08000992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000994:	3204      	adds	r2, #4

08000996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000998:	d3fb      	bcc.n	8000992 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800099a:	f7ff ffd7 	bl	800094c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800099e:	f002 f8d1 	bl	8002b44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a2:	f7ff fe1f 	bl	80005e4 <main>
  bx  lr    
 80009a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009b4:	080034fc 	.word	0x080034fc
  ldr r2, =_sbss
 80009b8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009bc:	2000012c 	.word	0x2000012c

080009c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC_IRQHandler>

080009c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f92e 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009cc:	200f      	movs	r0, #15
 80009ce:	f000 f805 	bl	80009dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d2:	f7ff fed9 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	bd80      	pop	{r7, pc}

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x54>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x58>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	4619      	mov	r1, r3
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f93b 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e00e      	b.n	8000a28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d80a      	bhi.n	8000a26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 f911 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a1c:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <HAL_InitTick+0x5c>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a22:	2300      	movs	r3, #0
 8000a24:	e000      	b.n	8000a28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000000 	.word	0x20000000
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000004 	.word	0x20000004

08000a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_IncTick+0x20>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x24>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <HAL_IncTick+0x24>)
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000118 	.word	0x20000118

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <HAL_GetTick+0x14>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000118 	.word	0x20000118

08000a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a84:	f7ff ffee 	bl	8000a64 <HAL_GetTick>
 8000a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a94:	d005      	beq.n	8000aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <HAL_Delay+0x44>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aa2:	bf00      	nop
 8000aa4:	f7ff ffde 	bl	8000a64 <HAL_GetTick>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d8f7      	bhi.n	8000aa4 <HAL_Delay+0x28>
  {
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	05fa0000 	.word	0x05fa0000

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff47 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5c 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff8e 	bl	8000b7c <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5d 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb0 	bl	8000be4 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b089      	sub	sp, #36	; 0x24
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
 8000cae:	e175      	b.n	8000f9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	f040 8164 	bne.w	8000f96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 0303 	and.w	r3, r3, #3
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d005      	beq.n	8000ce6 <HAL_GPIO_Init+0x56>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d130      	bne.n	8000d48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	68da      	ldr	r2, [r3, #12]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	091b      	lsrs	r3, r3, #4
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	69b9      	ldr	r1, [r7, #24]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80be 	beq.w	8000f96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b66      	ldr	r3, [pc, #408]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a65      	ldr	r2, [pc, #404]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b63      	ldr	r3, [pc, #396]	; (8000fb4 <HAL_GPIO_Init+0x324>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e32:	4a61      	ldr	r2, [pc, #388]	; (8000fb8 <HAL_GPIO_Init+0x328>)
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4013      	ands	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <HAL_GPIO_Init+0x32c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d037      	beq.n	8000ece <HAL_GPIO_Init+0x23e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a57      	ldr	r2, [pc, #348]	; (8000fc0 <HAL_GPIO_Init+0x330>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d031      	beq.n	8000eca <HAL_GPIO_Init+0x23a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a56      	ldr	r2, [pc, #344]	; (8000fc4 <HAL_GPIO_Init+0x334>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d02b      	beq.n	8000ec6 <HAL_GPIO_Init+0x236>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a55      	ldr	r2, [pc, #340]	; (8000fc8 <HAL_GPIO_Init+0x338>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d025      	beq.n	8000ec2 <HAL_GPIO_Init+0x232>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a54      	ldr	r2, [pc, #336]	; (8000fcc <HAL_GPIO_Init+0x33c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d01f      	beq.n	8000ebe <HAL_GPIO_Init+0x22e>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a53      	ldr	r2, [pc, #332]	; (8000fd0 <HAL_GPIO_Init+0x340>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d019      	beq.n	8000eba <HAL_GPIO_Init+0x22a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a52      	ldr	r2, [pc, #328]	; (8000fd4 <HAL_GPIO_Init+0x344>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d013      	beq.n	8000eb6 <HAL_GPIO_Init+0x226>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_GPIO_Init+0x348>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d00d      	beq.n	8000eb2 <HAL_GPIO_Init+0x222>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a50      	ldr	r2, [pc, #320]	; (8000fdc <HAL_GPIO_Init+0x34c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d007      	beq.n	8000eae <HAL_GPIO_Init+0x21e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4f      	ldr	r2, [pc, #316]	; (8000fe0 <HAL_GPIO_Init+0x350>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d101      	bne.n	8000eaa <HAL_GPIO_Init+0x21a>
 8000ea6:	2309      	movs	r3, #9
 8000ea8:	e012      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eaa:	230a      	movs	r3, #10
 8000eac:	e010      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eae:	2308      	movs	r3, #8
 8000eb0:	e00e      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	e00c      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e00a      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eba:	2305      	movs	r3, #5
 8000ebc:	e008      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	e006      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e004      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e002      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_GPIO_Init+0x240>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	69fa      	ldr	r2, [r7, #28]
 8000ed2:	f002 0203 	and.w	r2, r2, #3
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	4093      	lsls	r3, r2
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ee0:	4935      	ldr	r1, [pc, #212]	; (8000fb8 <HAL_GPIO_Init+0x328>)
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	089b      	lsrs	r3, r3, #2
 8000ee6:	3302      	adds	r3, #2
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eee:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f12:	4a34      	ldr	r2, [pc, #208]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f18:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f3c:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f66:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <HAL_GPIO_Init+0x354>)
 8000f92:	69bb      	ldr	r3, [r7, #24]
 8000f94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	f67f ae86 	bls.w	8000cb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3724      	adds	r7, #36	; 0x24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40013800 	.word	0x40013800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020c00 	.word	0x40020c00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40021400 	.word	0x40021400
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40021c00 	.word	0x40021c00
 8000fdc:	40022000 	.word	0x40022000
 8000fe0:	40022400 	.word	0x40022400
 8000fe4:	40013c00 	.word	0x40013c00

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e29b      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 8087 	beq.w	800111a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800100c:	4b96      	ldr	r3, [pc, #600]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	2b04      	cmp	r3, #4
 8001016:	d00c      	beq.n	8001032 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001018:	4b93      	ldr	r3, [pc, #588]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 030c 	and.w	r3, r3, #12
 8001020:	2b08      	cmp	r3, #8
 8001022:	d112      	bne.n	800104a <HAL_RCC_OscConfig+0x62>
 8001024:	4b90      	ldr	r3, [pc, #576]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001030:	d10b      	bne.n	800104a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001032:	4b8d      	ldr	r3, [pc, #564]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d06c      	beq.n	8001118 <HAL_RCC_OscConfig+0x130>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d168      	bne.n	8001118 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e275      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x7a>
 8001054:	4b84      	ldr	r3, [pc, #528]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a83      	ldr	r2, [pc, #524]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	e02e      	b.n	80010c0 <HAL_RCC_OscConfig+0xd8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x9c>
 800106a:	4b7f      	ldr	r3, [pc, #508]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a7e      	ldr	r2, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	4b7c      	ldr	r3, [pc, #496]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a7b      	ldr	r2, [pc, #492]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800107c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001080:	6013      	str	r3, [r2, #0]
 8001082:	e01d      	b.n	80010c0 <HAL_RCC_OscConfig+0xd8>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0xc0>
 800108e:	4b76      	ldr	r3, [pc, #472]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a75      	ldr	r2, [pc, #468]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e00b      	b.n	80010c0 <HAL_RCC_OscConfig+0xd8>
 80010a8:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a6e      	ldr	r2, [pc, #440]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b6c      	ldr	r3, [pc, #432]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a6b      	ldr	r2, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d013      	beq.n	80010f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c8:	f7ff fccc 	bl	8000a64 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fcc8 	bl	8000a64 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e229      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e2:	4b61      	ldr	r3, [pc, #388]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d0f0      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe8>
 80010ee:	e014      	b.n	800111a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fcb8 	bl	8000a64 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcb4 	bl	8000a64 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e215      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110a:	4b57      	ldr	r3, [pc, #348]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d1f0      	bne.n	80010f8 <HAL_RCC_OscConfig+0x110>
 8001116:	e000      	b.n	800111a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d069      	beq.n	80011fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001126:	4b50      	ldr	r3, [pc, #320]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 030c 	and.w	r3, r3, #12
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001132:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	2b08      	cmp	r3, #8
 800113c:	d11c      	bne.n	8001178 <HAL_RCC_OscConfig+0x190>
 800113e:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d116      	bne.n	8001178 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_RCC_OscConfig+0x17a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e1e9      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	493d      	ldr	r1, [pc, #244]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e040      	b.n	80011fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d023      	beq.n	80011c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a38      	ldr	r2, [pc, #224]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fc6a 	bl	8000a64 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001194:	f7ff fc66 	bl	8000a64 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1c7      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4929      	ldr	r1, [pc, #164]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
 80011c6:	e018      	b.n	80011fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc46 	bl	8000a64 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fc42 	bl	8000a64 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1a3      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	4b1e      	ldr	r3, [pc, #120]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0308 	and.w	r3, r3, #8
 8001202:	2b00      	cmp	r3, #0
 8001204:	d038      	beq.n	8001278 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d019      	beq.n	8001242 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120e:	4b16      	ldr	r3, [pc, #88]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff fc23 	bl	8000a64 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001222:	f7ff fc1f 	bl	8000a64 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e180      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x23a>
 8001240:	e01a      	b.n	8001278 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_RCC_OscConfig+0x280>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800124e:	f7ff fc09 	bl	8000a64 <HAL_GetTick>
 8001252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001254:	e00a      	b.n	800126c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001256:	f7ff fc05 	bl	8000a64 <HAL_GetTick>
 800125a:	4602      	mov	r2, r0
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d903      	bls.n	800126c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e166      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
 8001268:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126c:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800126e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ee      	bne.n	8001256 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80a4 	beq.w	80013ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001286:	4b8c      	ldr	r3, [pc, #560]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10d      	bne.n	80012ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b89      	ldr	r3, [pc, #548]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a88      	ldr	r2, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b86      	ldr	r3, [pc, #536]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012aa:	2301      	movs	r3, #1
 80012ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ae:	4b83      	ldr	r3, [pc, #524]	; (80014bc <HAL_RCC_OscConfig+0x4d4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d118      	bne.n	80012ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80012ba:	4b80      	ldr	r3, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x4d4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7f      	ldr	r2, [pc, #508]	; (80014bc <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012c6:	f7ff fbcd 	bl	8000a64 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ce:	f7ff fbc9 	bl	8000a64 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b64      	cmp	r3, #100	; 0x64
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e12a      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012e0:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_RCC_OscConfig+0x4d4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0x31a>
 80012f4:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e02d      	b.n	800135e <HAL_RCC_OscConfig+0x376>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x33c>
 800130a:	4b6b      	ldr	r3, [pc, #428]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a6a      	ldr	r2, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001310:	f023 0301 	bic.w	r3, r3, #1
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800131a:	4a67      	ldr	r2, [pc, #412]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800131c:	f023 0304 	bic.w	r3, r3, #4
 8001320:	6713      	str	r3, [r2, #112]	; 0x70
 8001322:	e01c      	b.n	800135e <HAL_RCC_OscConfig+0x376>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d10c      	bne.n	8001346 <HAL_RCC_OscConfig+0x35e>
 800132c:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001332:	f043 0304 	orr.w	r3, r3, #4
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800133a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133c:	4a5e      	ldr	r2, [pc, #376]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6713      	str	r3, [r2, #112]	; 0x70
 8001344:	e00b      	b.n	800135e <HAL_RCC_OscConfig+0x376>
 8001346:	4b5c      	ldr	r3, [pc, #368]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a5b      	ldr	r2, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800134c:	f023 0301 	bic.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a58      	ldr	r2, [pc, #352]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001358:	f023 0304 	bic.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d015      	beq.n	8001392 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001366:	f7ff fb7d 	bl	8000a64 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800136c:	e00a      	b.n	8001384 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800136e:	f7ff fb79 	bl	8000a64 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f241 3288 	movw	r2, #5000	; 0x1388
 800137c:	4293      	cmp	r3, r2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0d8      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001384:	4b4c      	ldr	r3, [pc, #304]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ee      	beq.n	800136e <HAL_RCC_OscConfig+0x386>
 8001390:	e014      	b.n	80013bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001392:	f7ff fb67 	bl	8000a64 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001398:	e00a      	b.n	80013b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139a:	f7ff fb63 	bl	8000a64 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e0c2      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b0:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d1ee      	bne.n	800139a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80ae 	beq.w	8001534 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d8:	4b37      	ldr	r3, [pc, #220]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d06d      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d14b      	bne.n	8001484 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a31      	ldr	r2, [pc, #196]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80013f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb34 	bl	8000a64 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fb30 	bl	8000a64 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e091      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69da      	ldr	r2, [r3, #28]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	431a      	orrs	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	085b      	lsrs	r3, r3, #1
 8001436:	3b01      	subs	r3, #1
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	431a      	orrs	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	061b      	lsls	r3, r3, #24
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	071b      	lsls	r3, r3, #28
 800144a:	491b      	ldr	r1, [pc, #108]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800145a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fb02 	bl	8000a64 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001464:	f7ff fafe 	bl	8000a64 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e05f      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x47c>
 8001482:	e057      	b.n	8001534 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 800148a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800148e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001490:	f7ff fae8 	bl	8000a64 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001498:	f7ff fae4 	bl	8000a64 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e045      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014aa:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x4b0>
 80014b6:	e03d      	b.n	8001534 <HAL_RCC_OscConfig+0x54c>
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <HAL_RCC_OscConfig+0x558>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d030      	beq.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014d8:	429a      	cmp	r2, r3
 80014da:	d129      	bne.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d122      	bne.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80014f0:	4013      	ands	r3, r2
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d119      	bne.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	085b      	lsrs	r3, r3, #1
 8001508:	3b01      	subs	r3, #1
 800150a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d10f      	bne.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d107      	bne.n	8001530 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0d0      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800155c:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 030f 	and.w	r3, r3, #15
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	429a      	cmp	r2, r3
 8001568:	d910      	bls.n	800158c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156a:	4b67      	ldr	r3, [pc, #412]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 020f 	bic.w	r2, r3, #15
 8001572:	4965      	ldr	r1, [pc, #404]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	4313      	orrs	r3, r2
 8001578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d040      	beq.n	8001668 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d107      	bne.n	8001616 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001606:	4b41      	ldr	r3, [pc, #260]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e073      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e06b      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f023 0203 	bic.w	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	4936      	ldr	r1, [pc, #216]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	4313      	orrs	r3, r2
 8001636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001638:	f7ff fa14 	bl	8000a64 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163e:	e00a      	b.n	8001656 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001640:	f7ff fa10 	bl	8000a64 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	f241 3288 	movw	r2, #5000	; 0x1388
 800164e:	4293      	cmp	r3, r2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e053      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 020c 	and.w	r2, r3, #12
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	429a      	cmp	r2, r3
 8001666:	d1eb      	bne.n	8001640 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001668:	4b27      	ldr	r3, [pc, #156]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 030f 	and.w	r3, r3, #15
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d210      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 020f 	bic.w	r2, r3, #15
 800167e:	4922      	ldr	r1, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x1c8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x1cc>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1d0>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1d4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f970 	bl	80009dc <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	080034a0 	.word	0x080034a0
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b090      	sub	sp, #64	; 0x40
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	637b      	str	r3, [r7, #52]	; 0x34
 8001728:	2300      	movs	r3, #0
 800172a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80a1 	bhi.w	8001888 <HAL_RCC_GetSysClockFreq+0x16c>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e09b      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001754:	e09b      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800175a:	e098      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b4f      	ldr	r3, [pc, #316]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001766:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	627a      	str	r2, [r7, #36]	; 0x24
 800177e:	6a3b      	ldr	r3, [r7, #32]
 8001780:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001784:	2100      	movs	r1, #0
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001788:	fb03 f201 	mul.w	r2, r3, r1
 800178c:	2300      	movs	r3, #0
 800178e:	fb00 f303 	mul.w	r3, r0, r3
 8001792:	4413      	add	r3, r2
 8001794:	4a43      	ldr	r2, [pc, #268]	; (80018a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001796:	fba0 1202 	umull	r1, r2, r0, r2
 800179a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800179c:	460a      	mov	r2, r1
 800179e:	62ba      	str	r2, [r7, #40]	; 0x28
 80017a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a2:	4413      	add	r3, r2
 80017a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017a8:	2200      	movs	r2, #0
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	61fa      	str	r2, [r7, #28]
 80017ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017b6:	f7fe fd93 	bl	80002e0 <__aeabi_uldivmod>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4613      	mov	r3, r2
 80017c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017c2:	e053      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c4:	4b35      	ldr	r3, [pc, #212]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	099b      	lsrs	r3, r3, #6
 80017ca:	2200      	movs	r2, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	617a      	str	r2, [r7, #20]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017d6:	f04f 0b00 	mov.w	fp, #0
 80017da:	4652      	mov	r2, sl
 80017dc:	465b      	mov	r3, fp
 80017de:	f04f 0000 	mov.w	r0, #0
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	0159      	lsls	r1, r3, #5
 80017e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ec:	0150      	lsls	r0, r2, #5
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	ebb2 080a 	subs.w	r8, r2, sl
 80017f6:	eb63 090b 	sbc.w	r9, r3, fp
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	f04f 0300 	mov.w	r3, #0
 8001802:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001806:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800180a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800180e:	ebb2 0408 	subs.w	r4, r2, r8
 8001812:	eb63 0509 	sbc.w	r5, r3, r9
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f04f 0300 	mov.w	r3, #0
 800181e:	00eb      	lsls	r3, r5, #3
 8001820:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001824:	00e2      	lsls	r2, r4, #3
 8001826:	4614      	mov	r4, r2
 8001828:	461d      	mov	r5, r3
 800182a:	eb14 030a 	adds.w	r3, r4, sl
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	eb45 030b 	adc.w	r3, r5, fp
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f04f 0300 	mov.w	r3, #0
 800183e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001842:	4629      	mov	r1, r5
 8001844:	028b      	lsls	r3, r1, #10
 8001846:	4621      	mov	r1, r4
 8001848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800184c:	4621      	mov	r1, r4
 800184e:	028a      	lsls	r2, r1, #10
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001856:	2200      	movs	r2, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	60fa      	str	r2, [r7, #12]
 800185c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001860:	f7fe fd3e 	bl	80002e0 <__aeabi_uldivmod>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4613      	mov	r3, r2
 800186a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_GetSysClockFreq+0x180>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	3301      	adds	r3, #1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800187c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800187e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001880:	fbb2 f3f3 	udiv	r3, r2, r3
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001886:	e002      	b.n	800188e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800188a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800188c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001890:	4618      	mov	r0, r3
 8001892:	3740      	adds	r7, #64	; 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400
 80018a4:	017d7840 	.word	0x017d7840

080018a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <HAL_RCC_GetHCLKFreq+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000

080018c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018c8:	4602      	mov	r2, r0
 80018ca:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	0a9b      	lsrs	r3, r3, #10
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	4903      	ldr	r1, [pc, #12]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d6:	5ccb      	ldrb	r3, [r1, r3]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080034b0 	.word	0x080034b0

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ec:	f7ff ffdc 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018f0:	4602      	mov	r2, r0
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	0b5b      	lsrs	r3, r3, #13
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	4903      	ldr	r1, [pc, #12]	; (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018fe:	5ccb      	ldrb	r3, [r1, r3]
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	080034b0 	.word	0x080034b0

08001910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	2b00      	cmp	r3, #0
 8001936:	d012      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001938:	4b69      	ldr	r3, [pc, #420]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a68      	ldr	r2, [pc, #416]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001942:	6093      	str	r3, [r2, #8]
 8001944:	4b66      	ldr	r3, [pc, #408]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	4964      	ldr	r1, [pc, #400]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d017      	beq.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800196a:	4b5d      	ldr	r3, [pc, #372]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800196c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001978:	4959      	ldr	r1, [pc, #356]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800197a:	4313      	orrs	r3, r2
 800197c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001984:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001988:	d101      	bne.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d017      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	494a      	ldr	r1, [pc, #296]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c4:	d101      	bne.n	80019ca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80019d2:	2301      	movs	r3, #1
 80019d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 808b 	beq.w	8001b0a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b3a      	ldr	r3, [pc, #232]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	4a39      	ldr	r2, [pc, #228]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001a00:	4b37      	ldr	r3, [pc, #220]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a34      	ldr	r2, [pc, #208]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a18:	f7ff f824 	bl	8000a64 <HAL_GetTick>
 8001a1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a20:	f7ff f820 	bl	8000a64 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e38f      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d035      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d02e      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a5c:	4b20      	ldr	r3, [pc, #128]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a76:	4a1a      	ldr	r2, [pc, #104]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001a7e:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d114      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7fe ffe8 	bl	8000a64 <HAL_GetTick>
 8001a94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7fe ffe4 	bl	8000a64 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e351      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0ee      	beq.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ac6:	d111      	bne.n	8001aec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	4901      	ldr	r1, [pc, #4]	; (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
 8001ade:	e00b      	b.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	0ffffcff 	.word	0x0ffffcff
 8001aec:	4bac      	ldr	r3, [pc, #688]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4aab      	ldr	r2, [pc, #684]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001af2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001af6:	6093      	str	r3, [r2, #8]
 8001af8:	4ba9      	ldr	r3, [pc, #676]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b04:	49a6      	ldr	r1, [pc, #664]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d010      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b16:	4ba2      	ldr	r3, [pc, #648]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b1c:	4aa0      	ldr	r2, [pc, #640]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b26:	4b9e      	ldr	r3, [pc, #632]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	499b      	ldr	r1, [pc, #620]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00a      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b44:	4b96      	ldr	r3, [pc, #600]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b52:	4993      	ldr	r1, [pc, #588]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00a      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001b66:	4b8e      	ldr	r3, [pc, #568]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b74:	498a      	ldr	r1, [pc, #552]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00a      	beq.n	8001b9e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001b88:	4b85      	ldr	r3, [pc, #532]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b96:	4982      	ldr	r1, [pc, #520]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00a      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001baa:	4b7d      	ldr	r3, [pc, #500]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4979      	ldr	r1, [pc, #484]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bcc:	4b74      	ldr	r3, [pc, #464]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	f023 0203 	bic.w	r2, r3, #3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4971      	ldr	r1, [pc, #452]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bee:	4b6c      	ldr	r3, [pc, #432]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	f023 020c 	bic.w	r2, r3, #12
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfc:	4968      	ldr	r1, [pc, #416]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00a      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c10:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4960      	ldr	r1, [pc, #384]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c32:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c38:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c40:	4957      	ldr	r1, [pc, #348]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00a      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c54:	4b52      	ldr	r3, [pc, #328]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c62:	494f      	ldr	r1, [pc, #316]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001c76:	4b4a      	ldr	r3, [pc, #296]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	4946      	ldr	r1, [pc, #280]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	493e      	ldr	r1, [pc, #248]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001cba:	4b39      	ldr	r3, [pc, #228]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc8:	4935      	ldr	r1, [pc, #212]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cdc:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cea:	492d      	ldr	r1, [pc, #180]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d011      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001cfe:	4b28      	ldr	r3, [pc, #160]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d0c:	4924      	ldr	r1, [pc, #144]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d4c:	4914      	ldr	r1, [pc, #80]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00b      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d70:	490b      	ldr	r1, [pc, #44]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00f      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d8a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d94:	4902      	ldr	r1, [pc, #8]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d9c:	e002      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00b      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001db0:	4b8a      	ldr	r3, [pc, #552]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc0:	4986      	ldr	r1, [pc, #536]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00b      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001dd4:	4b81      	ldr	r3, [pc, #516]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de4:	497d      	ldr	r1, [pc, #500]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d006      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80d6 	beq.w	8001fac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e00:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0c:	f7fe fe2a 	bl	8000a64 <HAL_GetTick>
 8001e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e14:	f7fe fe26 	bl	8000a64 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e195      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d021      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d11d      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001e46:	4b65      	ldr	r3, [pc, #404]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e4c:	0c1b      	lsrs	r3, r3, #16
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e54:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5a:	0e1b      	lsrs	r3, r3, #24
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	019a      	lsls	r2, r3, #6
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	041b      	lsls	r3, r3, #16
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	071b      	lsls	r3, r3, #28
 8001e7a:	4958      	ldr	r1, [pc, #352]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d02e      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eac:	d129      	bne.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001eae:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ec2:	0f1b      	lsrs	r3, r3, #28
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	019a      	lsls	r2, r3, #6
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	071b      	lsls	r3, r3, #28
 8001ee2:	493e      	ldr	r1, [pc, #248]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef0:	f023 021f 	bic.w	r2, r3, #31
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	4938      	ldr	r1, [pc, #224]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01d      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f14:	0e1b      	lsrs	r3, r3, #24
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f22:	0f1b      	lsrs	r3, r3, #28
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	019a      	lsls	r2, r3, #6
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	071b      	lsls	r3, r3, #28
 8001f42:	4926      	ldr	r1, [pc, #152]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d011      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	019a      	lsls	r2, r3, #6
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	061b      	lsls	r3, r3, #24
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	071b      	lsls	r3, r3, #28
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001f7a:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f86:	f7fe fd6d 	bl	8000a64 <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f8e:	f7fe fd69 	bl	8000a64 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b64      	cmp	r3, #100	; 0x64
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0d8      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	f040 80ce 	bne.w	8002150 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fd50 	bl	8000a64 <HAL_GetTick>
 8001fc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001fc8:	f7fe fd4c 	bl	8000a64 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d904      	bls.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0bb      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe0:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fec:	d0ec      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800200a:	2b00      	cmp	r3, #0
 800200c:	d02e      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12a      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002016:	4b51      	ldr	r3, [pc, #324]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201c:	0c1b      	lsrs	r3, r3, #16
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	0f1b      	lsrs	r3, r3, #28
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	019a      	lsls	r2, r3, #6
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	041b      	lsls	r3, r3, #16
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	061b      	lsls	r3, r3, #24
 8002044:	431a      	orrs	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	071b      	lsls	r3, r3, #28
 800204a:	4944      	ldr	r1, [pc, #272]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002058:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	3b01      	subs	r3, #1
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	493d      	ldr	r1, [pc, #244]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d022      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800207c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002080:	d11d      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002082:	4b36      	ldr	r3, [pc, #216]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002088:	0e1b      	lsrs	r3, r3, #24
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002096:	0f1b      	lsrs	r3, r3, #28
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	019a      	lsls	r2, r3, #6
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	061b      	lsls	r3, r3, #24
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	071b      	lsls	r3, r3, #28
 80020b6:	4929      	ldr	r1, [pc, #164]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d028      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020ca:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d0:	0e1b      	lsrs	r3, r3, #24
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020d8:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	0c1b      	lsrs	r3, r3, #16
 80020e0:	f003 0303 	and.w	r3, r3, #3
 80020e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	019a      	lsls	r2, r3, #6
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	041b      	lsls	r3, r3, #16
 80020f0:	431a      	orrs	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	071b      	lsls	r3, r3, #28
 80020fe:	4917      	ldr	r1, [pc, #92]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800210c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	4911      	ldr	r1, [pc, #68]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002128:	f7fe fc9c 	bl	8000a64 <HAL_GetTick>
 800212c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002130:	f7fe fc98 	bl	8000a64 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b64      	cmp	r3, #100	; 0x64
 800213c:	d901      	bls.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e007      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800214e:	d1ef      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e040      	b.n	80021f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fb24 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f8b0 	bl	8002304 <UART_SetConfig>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d101      	bne.n	80021ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e022      	b.n	80021f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fb08 	bl	80027cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fb8f 	bl	8002910 <UART_CheckIdleState>
 80021f2:	4603      	mov	r3, r0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4613      	mov	r3, r2
 800220a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002210:	2b20      	cmp	r3, #32
 8002212:	d171      	bne.n	80022f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_UART_Transmit+0x24>
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e06a      	b.n	80022fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2221      	movs	r2, #33	; 0x21
 8002230:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002232:	f7fe fc17 	bl	8000a64 <HAL_GetTick>
 8002236:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	88fa      	ldrh	r2, [r7, #6]
 800223c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	88fa      	ldrh	r2, [r7, #6]
 8002244:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d108      	bne.n	8002264 <HAL_UART_Transmit+0x68>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d104      	bne.n	8002264 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	e003      	b.n	800226c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226c:	e02c      	b.n	80022c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2200      	movs	r2, #0
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f000 fb96 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e038      	b.n	80022fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10b      	bne.n	80022a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	881b      	ldrh	r3, [r3, #0]
 8002292:	461a      	mov	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	3302      	adds	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
 80022a4:	e007      	b.n	80022b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	3301      	adds	r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1cc      	bne.n	800226e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	2200      	movs	r2, #0
 80022dc:	2140      	movs	r1, #64	; 0x40
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fb63 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e005      	b.n	80022fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80022f4:	2300      	movs	r3, #0
 80022f6:	e000      	b.n	80022fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80022f8:	2302      	movs	r3, #2
  }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	4313      	orrs	r3, r2
 8002326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4ba6      	ldr	r3, [pc, #664]	; (80025c8 <UART_SetConfig+0x2c4>)
 8002330:	4013      	ands	r3, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6812      	ldr	r2, [r2, #0]
 8002336:	6979      	ldr	r1, [r7, #20]
 8002338:	430b      	orrs	r3, r1
 800233a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a94      	ldr	r2, [pc, #592]	; (80025cc <UART_SetConfig+0x2c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d120      	bne.n	80023c2 <UART_SetConfig+0xbe>
 8002380:	4b93      	ldr	r3, [pc, #588]	; (80025d0 <UART_SetConfig+0x2cc>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b03      	cmp	r3, #3
 800238c:	d816      	bhi.n	80023bc <UART_SetConfig+0xb8>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <UART_SetConfig+0x90>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b1 	.word	0x080023b1
 800239c:	080023ab 	.word	0x080023ab
 80023a0:	080023b7 	.word	0x080023b7
 80023a4:	2301      	movs	r3, #1
 80023a6:	77fb      	strb	r3, [r7, #31]
 80023a8:	e150      	b.n	800264c <UART_SetConfig+0x348>
 80023aa:	2302      	movs	r3, #2
 80023ac:	77fb      	strb	r3, [r7, #31]
 80023ae:	e14d      	b.n	800264c <UART_SetConfig+0x348>
 80023b0:	2304      	movs	r3, #4
 80023b2:	77fb      	strb	r3, [r7, #31]
 80023b4:	e14a      	b.n	800264c <UART_SetConfig+0x348>
 80023b6:	2308      	movs	r3, #8
 80023b8:	77fb      	strb	r3, [r7, #31]
 80023ba:	e147      	b.n	800264c <UART_SetConfig+0x348>
 80023bc:	2310      	movs	r3, #16
 80023be:	77fb      	strb	r3, [r7, #31]
 80023c0:	e144      	b.n	800264c <UART_SetConfig+0x348>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a83      	ldr	r2, [pc, #524]	; (80025d4 <UART_SetConfig+0x2d0>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d132      	bne.n	8002432 <UART_SetConfig+0x12e>
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <UART_SetConfig+0x2cc>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d828      	bhi.n	800242c <UART_SetConfig+0x128>
 80023da:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <UART_SetConfig+0xdc>)
 80023dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e0:	08002415 	.word	0x08002415
 80023e4:	0800242d 	.word	0x0800242d
 80023e8:	0800242d 	.word	0x0800242d
 80023ec:	0800242d 	.word	0x0800242d
 80023f0:	08002421 	.word	0x08002421
 80023f4:	0800242d 	.word	0x0800242d
 80023f8:	0800242d 	.word	0x0800242d
 80023fc:	0800242d 	.word	0x0800242d
 8002400:	0800241b 	.word	0x0800241b
 8002404:	0800242d 	.word	0x0800242d
 8002408:	0800242d 	.word	0x0800242d
 800240c:	0800242d 	.word	0x0800242d
 8002410:	08002427 	.word	0x08002427
 8002414:	2300      	movs	r3, #0
 8002416:	77fb      	strb	r3, [r7, #31]
 8002418:	e118      	b.n	800264c <UART_SetConfig+0x348>
 800241a:	2302      	movs	r3, #2
 800241c:	77fb      	strb	r3, [r7, #31]
 800241e:	e115      	b.n	800264c <UART_SetConfig+0x348>
 8002420:	2304      	movs	r3, #4
 8002422:	77fb      	strb	r3, [r7, #31]
 8002424:	e112      	b.n	800264c <UART_SetConfig+0x348>
 8002426:	2308      	movs	r3, #8
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	e10f      	b.n	800264c <UART_SetConfig+0x348>
 800242c:	2310      	movs	r3, #16
 800242e:	77fb      	strb	r3, [r7, #31]
 8002430:	e10c      	b.n	800264c <UART_SetConfig+0x348>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a68      	ldr	r2, [pc, #416]	; (80025d8 <UART_SetConfig+0x2d4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d120      	bne.n	800247e <UART_SetConfig+0x17a>
 800243c:	4b64      	ldr	r3, [pc, #400]	; (80025d0 <UART_SetConfig+0x2cc>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002446:	2b30      	cmp	r3, #48	; 0x30
 8002448:	d013      	beq.n	8002472 <UART_SetConfig+0x16e>
 800244a:	2b30      	cmp	r3, #48	; 0x30
 800244c:	d814      	bhi.n	8002478 <UART_SetConfig+0x174>
 800244e:	2b20      	cmp	r3, #32
 8002450:	d009      	beq.n	8002466 <UART_SetConfig+0x162>
 8002452:	2b20      	cmp	r3, #32
 8002454:	d810      	bhi.n	8002478 <UART_SetConfig+0x174>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <UART_SetConfig+0x15c>
 800245a:	2b10      	cmp	r3, #16
 800245c:	d006      	beq.n	800246c <UART_SetConfig+0x168>
 800245e:	e00b      	b.n	8002478 <UART_SetConfig+0x174>
 8002460:	2300      	movs	r3, #0
 8002462:	77fb      	strb	r3, [r7, #31]
 8002464:	e0f2      	b.n	800264c <UART_SetConfig+0x348>
 8002466:	2302      	movs	r3, #2
 8002468:	77fb      	strb	r3, [r7, #31]
 800246a:	e0ef      	b.n	800264c <UART_SetConfig+0x348>
 800246c:	2304      	movs	r3, #4
 800246e:	77fb      	strb	r3, [r7, #31]
 8002470:	e0ec      	b.n	800264c <UART_SetConfig+0x348>
 8002472:	2308      	movs	r3, #8
 8002474:	77fb      	strb	r3, [r7, #31]
 8002476:	e0e9      	b.n	800264c <UART_SetConfig+0x348>
 8002478:	2310      	movs	r3, #16
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e0e6      	b.n	800264c <UART_SetConfig+0x348>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a56      	ldr	r2, [pc, #344]	; (80025dc <UART_SetConfig+0x2d8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d120      	bne.n	80024ca <UART_SetConfig+0x1c6>
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <UART_SetConfig+0x2cc>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002492:	2bc0      	cmp	r3, #192	; 0xc0
 8002494:	d013      	beq.n	80024be <UART_SetConfig+0x1ba>
 8002496:	2bc0      	cmp	r3, #192	; 0xc0
 8002498:	d814      	bhi.n	80024c4 <UART_SetConfig+0x1c0>
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d009      	beq.n	80024b2 <UART_SetConfig+0x1ae>
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d810      	bhi.n	80024c4 <UART_SetConfig+0x1c0>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <UART_SetConfig+0x1a8>
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d006      	beq.n	80024b8 <UART_SetConfig+0x1b4>
 80024aa:	e00b      	b.n	80024c4 <UART_SetConfig+0x1c0>
 80024ac:	2300      	movs	r3, #0
 80024ae:	77fb      	strb	r3, [r7, #31]
 80024b0:	e0cc      	b.n	800264c <UART_SetConfig+0x348>
 80024b2:	2302      	movs	r3, #2
 80024b4:	77fb      	strb	r3, [r7, #31]
 80024b6:	e0c9      	b.n	800264c <UART_SetConfig+0x348>
 80024b8:	2304      	movs	r3, #4
 80024ba:	77fb      	strb	r3, [r7, #31]
 80024bc:	e0c6      	b.n	800264c <UART_SetConfig+0x348>
 80024be:	2308      	movs	r3, #8
 80024c0:	77fb      	strb	r3, [r7, #31]
 80024c2:	e0c3      	b.n	800264c <UART_SetConfig+0x348>
 80024c4:	2310      	movs	r3, #16
 80024c6:	77fb      	strb	r3, [r7, #31]
 80024c8:	e0c0      	b.n	800264c <UART_SetConfig+0x348>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a44      	ldr	r2, [pc, #272]	; (80025e0 <UART_SetConfig+0x2dc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d125      	bne.n	8002520 <UART_SetConfig+0x21c>
 80024d4:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <UART_SetConfig+0x2cc>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e2:	d017      	beq.n	8002514 <UART_SetConfig+0x210>
 80024e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024e8:	d817      	bhi.n	800251a <UART_SetConfig+0x216>
 80024ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ee:	d00b      	beq.n	8002508 <UART_SetConfig+0x204>
 80024f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f4:	d811      	bhi.n	800251a <UART_SetConfig+0x216>
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <UART_SetConfig+0x1fe>
 80024fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fe:	d006      	beq.n	800250e <UART_SetConfig+0x20a>
 8002500:	e00b      	b.n	800251a <UART_SetConfig+0x216>
 8002502:	2300      	movs	r3, #0
 8002504:	77fb      	strb	r3, [r7, #31]
 8002506:	e0a1      	b.n	800264c <UART_SetConfig+0x348>
 8002508:	2302      	movs	r3, #2
 800250a:	77fb      	strb	r3, [r7, #31]
 800250c:	e09e      	b.n	800264c <UART_SetConfig+0x348>
 800250e:	2304      	movs	r3, #4
 8002510:	77fb      	strb	r3, [r7, #31]
 8002512:	e09b      	b.n	800264c <UART_SetConfig+0x348>
 8002514:	2308      	movs	r3, #8
 8002516:	77fb      	strb	r3, [r7, #31]
 8002518:	e098      	b.n	800264c <UART_SetConfig+0x348>
 800251a:	2310      	movs	r3, #16
 800251c:	77fb      	strb	r3, [r7, #31]
 800251e:	e095      	b.n	800264c <UART_SetConfig+0x348>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a2f      	ldr	r2, [pc, #188]	; (80025e4 <UART_SetConfig+0x2e0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d125      	bne.n	8002576 <UART_SetConfig+0x272>
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <UART_SetConfig+0x2cc>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002534:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002538:	d017      	beq.n	800256a <UART_SetConfig+0x266>
 800253a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800253e:	d817      	bhi.n	8002570 <UART_SetConfig+0x26c>
 8002540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002544:	d00b      	beq.n	800255e <UART_SetConfig+0x25a>
 8002546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800254a:	d811      	bhi.n	8002570 <UART_SetConfig+0x26c>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <UART_SetConfig+0x254>
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002554:	d006      	beq.n	8002564 <UART_SetConfig+0x260>
 8002556:	e00b      	b.n	8002570 <UART_SetConfig+0x26c>
 8002558:	2301      	movs	r3, #1
 800255a:	77fb      	strb	r3, [r7, #31]
 800255c:	e076      	b.n	800264c <UART_SetConfig+0x348>
 800255e:	2302      	movs	r3, #2
 8002560:	77fb      	strb	r3, [r7, #31]
 8002562:	e073      	b.n	800264c <UART_SetConfig+0x348>
 8002564:	2304      	movs	r3, #4
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	e070      	b.n	800264c <UART_SetConfig+0x348>
 800256a:	2308      	movs	r3, #8
 800256c:	77fb      	strb	r3, [r7, #31]
 800256e:	e06d      	b.n	800264c <UART_SetConfig+0x348>
 8002570:	2310      	movs	r3, #16
 8002572:	77fb      	strb	r3, [r7, #31]
 8002574:	e06a      	b.n	800264c <UART_SetConfig+0x348>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <UART_SetConfig+0x2e4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d138      	bne.n	80025f2 <UART_SetConfig+0x2ee>
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <UART_SetConfig+0x2cc>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800258a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800258e:	d017      	beq.n	80025c0 <UART_SetConfig+0x2bc>
 8002590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002594:	d82a      	bhi.n	80025ec <UART_SetConfig+0x2e8>
 8002596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259a:	d00b      	beq.n	80025b4 <UART_SetConfig+0x2b0>
 800259c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a0:	d824      	bhi.n	80025ec <UART_SetConfig+0x2e8>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <UART_SetConfig+0x2aa>
 80025a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025aa:	d006      	beq.n	80025ba <UART_SetConfig+0x2b6>
 80025ac:	e01e      	b.n	80025ec <UART_SetConfig+0x2e8>
 80025ae:	2300      	movs	r3, #0
 80025b0:	77fb      	strb	r3, [r7, #31]
 80025b2:	e04b      	b.n	800264c <UART_SetConfig+0x348>
 80025b4:	2302      	movs	r3, #2
 80025b6:	77fb      	strb	r3, [r7, #31]
 80025b8:	e048      	b.n	800264c <UART_SetConfig+0x348>
 80025ba:	2304      	movs	r3, #4
 80025bc:	77fb      	strb	r3, [r7, #31]
 80025be:	e045      	b.n	800264c <UART_SetConfig+0x348>
 80025c0:	2308      	movs	r3, #8
 80025c2:	77fb      	strb	r3, [r7, #31]
 80025c4:	e042      	b.n	800264c <UART_SetConfig+0x348>
 80025c6:	bf00      	nop
 80025c8:	efff69f3 	.word	0xefff69f3
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40004400 	.word	0x40004400
 80025d8:	40004800 	.word	0x40004800
 80025dc:	40004c00 	.word	0x40004c00
 80025e0:	40005000 	.word	0x40005000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	40007800 	.word	0x40007800
 80025ec:	2310      	movs	r3, #16
 80025ee:	77fb      	strb	r3, [r7, #31]
 80025f0:	e02c      	b.n	800264c <UART_SetConfig+0x348>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a72      	ldr	r2, [pc, #456]	; (80027c0 <UART_SetConfig+0x4bc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d125      	bne.n	8002648 <UART_SetConfig+0x344>
 80025fc:	4b71      	ldr	r3, [pc, #452]	; (80027c4 <UART_SetConfig+0x4c0>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002606:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800260a:	d017      	beq.n	800263c <UART_SetConfig+0x338>
 800260c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002610:	d817      	bhi.n	8002642 <UART_SetConfig+0x33e>
 8002612:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002616:	d00b      	beq.n	8002630 <UART_SetConfig+0x32c>
 8002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261c:	d811      	bhi.n	8002642 <UART_SetConfig+0x33e>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <UART_SetConfig+0x326>
 8002622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002626:	d006      	beq.n	8002636 <UART_SetConfig+0x332>
 8002628:	e00b      	b.n	8002642 <UART_SetConfig+0x33e>
 800262a:	2300      	movs	r3, #0
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e00d      	b.n	800264c <UART_SetConfig+0x348>
 8002630:	2302      	movs	r3, #2
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e00a      	b.n	800264c <UART_SetConfig+0x348>
 8002636:	2304      	movs	r3, #4
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e007      	b.n	800264c <UART_SetConfig+0x348>
 800263c:	2308      	movs	r3, #8
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e004      	b.n	800264c <UART_SetConfig+0x348>
 8002642:	2310      	movs	r3, #16
 8002644:	77fb      	strb	r3, [r7, #31]
 8002646:	e001      	b.n	800264c <UART_SetConfig+0x348>
 8002648:	2310      	movs	r3, #16
 800264a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002654:	d15b      	bne.n	800270e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002656:	7ffb      	ldrb	r3, [r7, #31]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d828      	bhi.n	80026ae <UART_SetConfig+0x3aa>
 800265c:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <UART_SetConfig+0x360>)
 800265e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002662:	bf00      	nop
 8002664:	08002689 	.word	0x08002689
 8002668:	08002691 	.word	0x08002691
 800266c:	08002699 	.word	0x08002699
 8002670:	080026af 	.word	0x080026af
 8002674:	0800269f 	.word	0x0800269f
 8002678:	080026af 	.word	0x080026af
 800267c:	080026af 	.word	0x080026af
 8002680:	080026af 	.word	0x080026af
 8002684:	080026a7 	.word	0x080026a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002688:	f7ff f91a 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 800268c:	61b8      	str	r0, [r7, #24]
        break;
 800268e:	e013      	b.n	80026b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002690:	f7ff f92a 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8002694:	61b8      	str	r0, [r7, #24]
        break;
 8002696:	e00f      	b.n	80026b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <UART_SetConfig+0x4c4>)
 800269a:	61bb      	str	r3, [r7, #24]
        break;
 800269c:	e00c      	b.n	80026b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800269e:	f7ff f83d 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80026a2:	61b8      	str	r0, [r7, #24]
        break;
 80026a4:	e008      	b.n	80026b8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026aa:	61bb      	str	r3, [r7, #24]
        break;
 80026ac:	e004      	b.n	80026b8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	77bb      	strb	r3, [r7, #30]
        break;
 80026b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d074      	beq.n	80027a8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	005a      	lsls	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	441a      	add	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d916      	bls.n	8002708 <UART_SetConfig+0x404>
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d212      	bcs.n	8002708 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	f023 030f 	bic.w	r3, r3, #15
 80026ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	89fb      	ldrh	r3, [r7, #14]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	89fa      	ldrh	r2, [r7, #14]
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e04f      	b.n	80027a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	77bb      	strb	r3, [r7, #30]
 800270c:	e04c      	b.n	80027a8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800270e:	7ffb      	ldrb	r3, [r7, #31]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d828      	bhi.n	8002766 <UART_SetConfig+0x462>
 8002714:	a201      	add	r2, pc, #4	; (adr r2, 800271c <UART_SetConfig+0x418>)
 8002716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271a:	bf00      	nop
 800271c:	08002741 	.word	0x08002741
 8002720:	08002749 	.word	0x08002749
 8002724:	08002751 	.word	0x08002751
 8002728:	08002767 	.word	0x08002767
 800272c:	08002757 	.word	0x08002757
 8002730:	08002767 	.word	0x08002767
 8002734:	08002767 	.word	0x08002767
 8002738:	08002767 	.word	0x08002767
 800273c:	0800275f 	.word	0x0800275f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002740:	f7ff f8be 	bl	80018c0 <HAL_RCC_GetPCLK1Freq>
 8002744:	61b8      	str	r0, [r7, #24]
        break;
 8002746:	e013      	b.n	8002770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002748:	f7ff f8ce 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 800274c:	61b8      	str	r0, [r7, #24]
        break;
 800274e:	e00f      	b.n	8002770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <UART_SetConfig+0x4c4>)
 8002752:	61bb      	str	r3, [r7, #24]
        break;
 8002754:	e00c      	b.n	8002770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002756:	f7fe ffe1 	bl	800171c <HAL_RCC_GetSysClockFreq>
 800275a:	61b8      	str	r0, [r7, #24]
        break;
 800275c:	e008      	b.n	8002770 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002762:	61bb      	str	r3, [r7, #24]
        break;
 8002764:	e004      	b.n	8002770 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	77bb      	strb	r3, [r7, #30]
        break;
 800276e:	bf00      	nop
    }

    if (pclk != 0U)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	085a      	lsrs	r2, r3, #1
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	441a      	add	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	2b0f      	cmp	r3, #15
 800278e:	d909      	bls.n	80027a4 <UART_SetConfig+0x4a0>
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002796:	d205      	bcs.n	80027a4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	60da      	str	r2, [r3, #12]
 80027a2:	e001      	b.n	80027a8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80027b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40007c00 	.word	0x40007c00
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400

080027cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	f003 0310 	and.w	r3, r3, #16
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0320 	and.w	r3, r3, #32
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01a      	beq.n	80028e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ca:	d10a      	bne.n	80028e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	605a      	str	r2, [r3, #4]
  }
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af02      	add	r7, sp, #8
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002920:	f7fe f8a0 	bl	8000a64 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b08      	cmp	r3, #8
 8002932:	d10e      	bne.n	8002952 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002934:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f831 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e027      	b.n	80029a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b04      	cmp	r3, #4
 800295e:	d10e      	bne.n	800297e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f81b 	bl	80029aa <UART_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e011      	b.n	80029a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b09c      	sub	sp, #112	; 0x70
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	60f8      	str	r0, [r7, #12]
 80029b2:	60b9      	str	r1, [r7, #8]
 80029b4:	603b      	str	r3, [r7, #0]
 80029b6:	4613      	mov	r3, r2
 80029b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029ba:	e0a7      	b.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c2:	f000 80a3 	beq.w	8002b0c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7fe f84d 	bl	8000a64 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <UART_WaitOnFlagUntilTimeout+0x32>
 80029d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d13f      	bne.n	8002a5c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e4:	e853 3f00 	ldrex	r3, [r3]
 80029e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80029ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029f0:	667b      	str	r3, [r7, #100]	; 0x64
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	461a      	mov	r2, r3
 80029f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a02:	e841 2300 	strex	r3, r2, [r1]
 8002a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1e6      	bne.n	80029dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3308      	adds	r3, #8
 8002a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a36:	e841 2300 	strex	r3, r2, [r1]
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e5      	bne.n	8002a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2220      	movs	r2, #32
 8002a46:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e068      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d050      	beq.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a78:	d148      	bne.n	8002b0c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a82:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	e853 3f00 	ldrex	r3, [r3]
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aaa:	e841 2300 	strex	r3, r2, [r1]
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1e6      	bne.n	8002a84 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	3308      	adds	r3, #8
 8002abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
 8002ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f023 0301 	bic.w	r3, r3, #1
 8002acc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ad6:	623a      	str	r2, [r7, #32]
 8002ad8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ada:	69f9      	ldr	r1, [r7, #28]
 8002adc:	6a3a      	ldr	r2, [r7, #32]
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1e5      	bne.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2220      	movs	r2, #32
 8002aee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2220      	movs	r2, #32
 8002af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e010      	b.n	8002b2e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	68ba      	ldr	r2, [r7, #8]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	bf0c      	ite	eq
 8002b1c:	2301      	moveq	r3, #1
 8002b1e:	2300      	movne	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	f43f af48 	beq.w	80029bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3770      	adds	r7, #112	; 0x70
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <__errno>:
 8002b38:	4b01      	ldr	r3, [pc, #4]	; (8002b40 <__errno+0x8>)
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	2000000c 	.word	0x2000000c

08002b44 <__libc_init_array>:
 8002b44:	b570      	push	{r4, r5, r6, lr}
 8002b46:	4d0d      	ldr	r5, [pc, #52]	; (8002b7c <__libc_init_array+0x38>)
 8002b48:	4c0d      	ldr	r4, [pc, #52]	; (8002b80 <__libc_init_array+0x3c>)
 8002b4a:	1b64      	subs	r4, r4, r5
 8002b4c:	10a4      	asrs	r4, r4, #2
 8002b4e:	2600      	movs	r6, #0
 8002b50:	42a6      	cmp	r6, r4
 8002b52:	d109      	bne.n	8002b68 <__libc_init_array+0x24>
 8002b54:	4d0b      	ldr	r5, [pc, #44]	; (8002b84 <__libc_init_array+0x40>)
 8002b56:	4c0c      	ldr	r4, [pc, #48]	; (8002b88 <__libc_init_array+0x44>)
 8002b58:	f000 fc8e 	bl	8003478 <_init>
 8002b5c:	1b64      	subs	r4, r4, r5
 8002b5e:	10a4      	asrs	r4, r4, #2
 8002b60:	2600      	movs	r6, #0
 8002b62:	42a6      	cmp	r6, r4
 8002b64:	d105      	bne.n	8002b72 <__libc_init_array+0x2e>
 8002b66:	bd70      	pop	{r4, r5, r6, pc}
 8002b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6c:	4798      	blx	r3
 8002b6e:	3601      	adds	r6, #1
 8002b70:	e7ee      	b.n	8002b50 <__libc_init_array+0xc>
 8002b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b76:	4798      	blx	r3
 8002b78:	3601      	adds	r6, #1
 8002b7a:	e7f2      	b.n	8002b62 <__libc_init_array+0x1e>
 8002b7c:	080034f4 	.word	0x080034f4
 8002b80:	080034f4 	.word	0x080034f4
 8002b84:	080034f4 	.word	0x080034f4
 8002b88:	080034f8 	.word	0x080034f8

08002b8c <memset>:
 8002b8c:	4402      	add	r2, r0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d100      	bne.n	8002b96 <memset+0xa>
 8002b94:	4770      	bx	lr
 8002b96:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9a:	e7f9      	b.n	8002b90 <memset+0x4>

08002b9c <siprintf>:
 8002b9c:	b40e      	push	{r1, r2, r3}
 8002b9e:	b500      	push	{lr}
 8002ba0:	b09c      	sub	sp, #112	; 0x70
 8002ba2:	ab1d      	add	r3, sp, #116	; 0x74
 8002ba4:	9002      	str	r0, [sp, #8]
 8002ba6:	9006      	str	r0, [sp, #24]
 8002ba8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002bac:	4809      	ldr	r0, [pc, #36]	; (8002bd4 <siprintf+0x38>)
 8002bae:	9107      	str	r1, [sp, #28]
 8002bb0:	9104      	str	r1, [sp, #16]
 8002bb2:	4909      	ldr	r1, [pc, #36]	; (8002bd8 <siprintf+0x3c>)
 8002bb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002bb8:	9105      	str	r1, [sp, #20]
 8002bba:	6800      	ldr	r0, [r0, #0]
 8002bbc:	9301      	str	r3, [sp, #4]
 8002bbe:	a902      	add	r1, sp, #8
 8002bc0:	f000 f868 	bl	8002c94 <_svfiprintf_r>
 8002bc4:	9b02      	ldr	r3, [sp, #8]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	b01c      	add	sp, #112	; 0x70
 8002bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002bd0:	b003      	add	sp, #12
 8002bd2:	4770      	bx	lr
 8002bd4:	2000000c 	.word	0x2000000c
 8002bd8:	ffff0208 	.word	0xffff0208

08002bdc <__ssputs_r>:
 8002bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be0:	688e      	ldr	r6, [r1, #8]
 8002be2:	429e      	cmp	r6, r3
 8002be4:	4682      	mov	sl, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	4690      	mov	r8, r2
 8002bea:	461f      	mov	r7, r3
 8002bec:	d838      	bhi.n	8002c60 <__ssputs_r+0x84>
 8002bee:	898a      	ldrh	r2, [r1, #12]
 8002bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bf4:	d032      	beq.n	8002c5c <__ssputs_r+0x80>
 8002bf6:	6825      	ldr	r5, [r4, #0]
 8002bf8:	6909      	ldr	r1, [r1, #16]
 8002bfa:	eba5 0901 	sub.w	r9, r5, r1
 8002bfe:	6965      	ldr	r5, [r4, #20]
 8002c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c08:	3301      	adds	r3, #1
 8002c0a:	444b      	add	r3, r9
 8002c0c:	106d      	asrs	r5, r5, #1
 8002c0e:	429d      	cmp	r5, r3
 8002c10:	bf38      	it	cc
 8002c12:	461d      	movcc	r5, r3
 8002c14:	0553      	lsls	r3, r2, #21
 8002c16:	d531      	bpl.n	8002c7c <__ssputs_r+0xa0>
 8002c18:	4629      	mov	r1, r5
 8002c1a:	f000 fb63 	bl	80032e4 <_malloc_r>
 8002c1e:	4606      	mov	r6, r0
 8002c20:	b950      	cbnz	r0, 8002c38 <__ssputs_r+0x5c>
 8002c22:	230c      	movs	r3, #12
 8002c24:	f8ca 3000 	str.w	r3, [sl]
 8002c28:	89a3      	ldrh	r3, [r4, #12]
 8002c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c2e:	81a3      	strh	r3, [r4, #12]
 8002c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c38:	6921      	ldr	r1, [r4, #16]
 8002c3a:	464a      	mov	r2, r9
 8002c3c:	f000 fabe 	bl	80031bc <memcpy>
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c4a:	81a3      	strh	r3, [r4, #12]
 8002c4c:	6126      	str	r6, [r4, #16]
 8002c4e:	6165      	str	r5, [r4, #20]
 8002c50:	444e      	add	r6, r9
 8002c52:	eba5 0509 	sub.w	r5, r5, r9
 8002c56:	6026      	str	r6, [r4, #0]
 8002c58:	60a5      	str	r5, [r4, #8]
 8002c5a:	463e      	mov	r6, r7
 8002c5c:	42be      	cmp	r6, r7
 8002c5e:	d900      	bls.n	8002c62 <__ssputs_r+0x86>
 8002c60:	463e      	mov	r6, r7
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	4632      	mov	r2, r6
 8002c66:	4641      	mov	r1, r8
 8002c68:	f000 fab6 	bl	80031d8 <memmove>
 8002c6c:	68a3      	ldr	r3, [r4, #8]
 8002c6e:	1b9b      	subs	r3, r3, r6
 8002c70:	60a3      	str	r3, [r4, #8]
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	4433      	add	r3, r6
 8002c76:	6023      	str	r3, [r4, #0]
 8002c78:	2000      	movs	r0, #0
 8002c7a:	e7db      	b.n	8002c34 <__ssputs_r+0x58>
 8002c7c:	462a      	mov	r2, r5
 8002c7e:	f000 fba5 	bl	80033cc <_realloc_r>
 8002c82:	4606      	mov	r6, r0
 8002c84:	2800      	cmp	r0, #0
 8002c86:	d1e1      	bne.n	8002c4c <__ssputs_r+0x70>
 8002c88:	6921      	ldr	r1, [r4, #16]
 8002c8a:	4650      	mov	r0, sl
 8002c8c:	f000 fabe 	bl	800320c <_free_r>
 8002c90:	e7c7      	b.n	8002c22 <__ssputs_r+0x46>
	...

08002c94 <_svfiprintf_r>:
 8002c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c98:	4698      	mov	r8, r3
 8002c9a:	898b      	ldrh	r3, [r1, #12]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	b09d      	sub	sp, #116	; 0x74
 8002ca0:	4607      	mov	r7, r0
 8002ca2:	460d      	mov	r5, r1
 8002ca4:	4614      	mov	r4, r2
 8002ca6:	d50e      	bpl.n	8002cc6 <_svfiprintf_r+0x32>
 8002ca8:	690b      	ldr	r3, [r1, #16]
 8002caa:	b963      	cbnz	r3, 8002cc6 <_svfiprintf_r+0x32>
 8002cac:	2140      	movs	r1, #64	; 0x40
 8002cae:	f000 fb19 	bl	80032e4 <_malloc_r>
 8002cb2:	6028      	str	r0, [r5, #0]
 8002cb4:	6128      	str	r0, [r5, #16]
 8002cb6:	b920      	cbnz	r0, 8002cc2 <_svfiprintf_r+0x2e>
 8002cb8:	230c      	movs	r3, #12
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc0:	e0d1      	b.n	8002e66 <_svfiprintf_r+0x1d2>
 8002cc2:	2340      	movs	r3, #64	; 0x40
 8002cc4:	616b      	str	r3, [r5, #20]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8002cca:	2320      	movs	r3, #32
 8002ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002cd4:	2330      	movs	r3, #48	; 0x30
 8002cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002e80 <_svfiprintf_r+0x1ec>
 8002cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cde:	f04f 0901 	mov.w	r9, #1
 8002ce2:	4623      	mov	r3, r4
 8002ce4:	469a      	mov	sl, r3
 8002ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cea:	b10a      	cbz	r2, 8002cf0 <_svfiprintf_r+0x5c>
 8002cec:	2a25      	cmp	r2, #37	; 0x25
 8002cee:	d1f9      	bne.n	8002ce4 <_svfiprintf_r+0x50>
 8002cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8002cf4:	d00b      	beq.n	8002d0e <_svfiprintf_r+0x7a>
 8002cf6:	465b      	mov	r3, fp
 8002cf8:	4622      	mov	r2, r4
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f7ff ff6d 	bl	8002bdc <__ssputs_r>
 8002d02:	3001      	adds	r0, #1
 8002d04:	f000 80aa 	beq.w	8002e5c <_svfiprintf_r+0x1c8>
 8002d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d0a:	445a      	add	r2, fp
 8002d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8002d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80a2 	beq.w	8002e5c <_svfiprintf_r+0x1c8>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d22:	f10a 0a01 	add.w	sl, sl, #1
 8002d26:	9304      	str	r3, [sp, #16]
 8002d28:	9307      	str	r3, [sp, #28]
 8002d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8002d30:	4654      	mov	r4, sl
 8002d32:	2205      	movs	r2, #5
 8002d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d38:	4851      	ldr	r0, [pc, #324]	; (8002e80 <_svfiprintf_r+0x1ec>)
 8002d3a:	f7fd fa81 	bl	8000240 <memchr>
 8002d3e:	9a04      	ldr	r2, [sp, #16]
 8002d40:	b9d8      	cbnz	r0, 8002d7a <_svfiprintf_r+0xe6>
 8002d42:	06d0      	lsls	r0, r2, #27
 8002d44:	bf44      	itt	mi
 8002d46:	2320      	movmi	r3, #32
 8002d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d4c:	0711      	lsls	r1, r2, #28
 8002d4e:	bf44      	itt	mi
 8002d50:	232b      	movmi	r3, #43	; 0x2b
 8002d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d56:	f89a 3000 	ldrb.w	r3, [sl]
 8002d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d5c:	d015      	beq.n	8002d8a <_svfiprintf_r+0xf6>
 8002d5e:	9a07      	ldr	r2, [sp, #28]
 8002d60:	4654      	mov	r4, sl
 8002d62:	2000      	movs	r0, #0
 8002d64:	f04f 0c0a 	mov.w	ip, #10
 8002d68:	4621      	mov	r1, r4
 8002d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d6e:	3b30      	subs	r3, #48	; 0x30
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d94e      	bls.n	8002e12 <_svfiprintf_r+0x17e>
 8002d74:	b1b0      	cbz	r0, 8002da4 <_svfiprintf_r+0x110>
 8002d76:	9207      	str	r2, [sp, #28]
 8002d78:	e014      	b.n	8002da4 <_svfiprintf_r+0x110>
 8002d7a:	eba0 0308 	sub.w	r3, r0, r8
 8002d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d82:	4313      	orrs	r3, r2
 8002d84:	9304      	str	r3, [sp, #16]
 8002d86:	46a2      	mov	sl, r4
 8002d88:	e7d2      	b.n	8002d30 <_svfiprintf_r+0x9c>
 8002d8a:	9b03      	ldr	r3, [sp, #12]
 8002d8c:	1d19      	adds	r1, r3, #4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	9103      	str	r1, [sp, #12]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	bfbb      	ittet	lt
 8002d96:	425b      	neglt	r3, r3
 8002d98:	f042 0202 	orrlt.w	r2, r2, #2
 8002d9c:	9307      	strge	r3, [sp, #28]
 8002d9e:	9307      	strlt	r3, [sp, #28]
 8002da0:	bfb8      	it	lt
 8002da2:	9204      	strlt	r2, [sp, #16]
 8002da4:	7823      	ldrb	r3, [r4, #0]
 8002da6:	2b2e      	cmp	r3, #46	; 0x2e
 8002da8:	d10c      	bne.n	8002dc4 <_svfiprintf_r+0x130>
 8002daa:	7863      	ldrb	r3, [r4, #1]
 8002dac:	2b2a      	cmp	r3, #42	; 0x2a
 8002dae:	d135      	bne.n	8002e1c <_svfiprintf_r+0x188>
 8002db0:	9b03      	ldr	r3, [sp, #12]
 8002db2:	1d1a      	adds	r2, r3, #4
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	9203      	str	r2, [sp, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	bfb8      	it	lt
 8002dbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002dc0:	3402      	adds	r4, #2
 8002dc2:	9305      	str	r3, [sp, #20]
 8002dc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e90 <_svfiprintf_r+0x1fc>
 8002dc8:	7821      	ldrb	r1, [r4, #0]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	4650      	mov	r0, sl
 8002dce:	f7fd fa37 	bl	8000240 <memchr>
 8002dd2:	b140      	cbz	r0, 8002de6 <_svfiprintf_r+0x152>
 8002dd4:	2340      	movs	r3, #64	; 0x40
 8002dd6:	eba0 000a 	sub.w	r0, r0, sl
 8002dda:	fa03 f000 	lsl.w	r0, r3, r0
 8002dde:	9b04      	ldr	r3, [sp, #16]
 8002de0:	4303      	orrs	r3, r0
 8002de2:	3401      	adds	r4, #1
 8002de4:	9304      	str	r3, [sp, #16]
 8002de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dea:	4826      	ldr	r0, [pc, #152]	; (8002e84 <_svfiprintf_r+0x1f0>)
 8002dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002df0:	2206      	movs	r2, #6
 8002df2:	f7fd fa25 	bl	8000240 <memchr>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d038      	beq.n	8002e6c <_svfiprintf_r+0x1d8>
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <_svfiprintf_r+0x1f4>)
 8002dfc:	bb1b      	cbnz	r3, 8002e46 <_svfiprintf_r+0x1b2>
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	3307      	adds	r3, #7
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	3308      	adds	r3, #8
 8002e08:	9303      	str	r3, [sp, #12]
 8002e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0c:	4433      	add	r3, r6
 8002e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e10:	e767      	b.n	8002ce2 <_svfiprintf_r+0x4e>
 8002e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e16:	460c      	mov	r4, r1
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7a5      	b.n	8002d68 <_svfiprintf_r+0xd4>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	3401      	adds	r4, #1
 8002e20:	9305      	str	r3, [sp, #20]
 8002e22:	4619      	mov	r1, r3
 8002e24:	f04f 0c0a 	mov.w	ip, #10
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e2e:	3a30      	subs	r2, #48	; 0x30
 8002e30:	2a09      	cmp	r2, #9
 8002e32:	d903      	bls.n	8002e3c <_svfiprintf_r+0x1a8>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0c5      	beq.n	8002dc4 <_svfiprintf_r+0x130>
 8002e38:	9105      	str	r1, [sp, #20]
 8002e3a:	e7c3      	b.n	8002dc4 <_svfiprintf_r+0x130>
 8002e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e40:	4604      	mov	r4, r0
 8002e42:	2301      	movs	r3, #1
 8002e44:	e7f0      	b.n	8002e28 <_svfiprintf_r+0x194>
 8002e46:	ab03      	add	r3, sp, #12
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	462a      	mov	r2, r5
 8002e4c:	4b0f      	ldr	r3, [pc, #60]	; (8002e8c <_svfiprintf_r+0x1f8>)
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	4638      	mov	r0, r7
 8002e52:	f3af 8000 	nop.w
 8002e56:	1c42      	adds	r2, r0, #1
 8002e58:	4606      	mov	r6, r0
 8002e5a:	d1d6      	bne.n	8002e0a <_svfiprintf_r+0x176>
 8002e5c:	89ab      	ldrh	r3, [r5, #12]
 8002e5e:	065b      	lsls	r3, r3, #25
 8002e60:	f53f af2c 	bmi.w	8002cbc <_svfiprintf_r+0x28>
 8002e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e66:	b01d      	add	sp, #116	; 0x74
 8002e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e6c:	ab03      	add	r3, sp, #12
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	462a      	mov	r2, r5
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <_svfiprintf_r+0x1f8>)
 8002e74:	a904      	add	r1, sp, #16
 8002e76:	4638      	mov	r0, r7
 8002e78:	f000 f87a 	bl	8002f70 <_printf_i>
 8002e7c:	e7eb      	b.n	8002e56 <_svfiprintf_r+0x1c2>
 8002e7e:	bf00      	nop
 8002e80:	080034b8 	.word	0x080034b8
 8002e84:	080034c2 	.word	0x080034c2
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	08002bdd 	.word	0x08002bdd
 8002e90:	080034be 	.word	0x080034be

08002e94 <_printf_common>:
 8002e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e98:	4616      	mov	r6, r2
 8002e9a:	4699      	mov	r9, r3
 8002e9c:	688a      	ldr	r2, [r1, #8]
 8002e9e:	690b      	ldr	r3, [r1, #16]
 8002ea0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	bfb8      	it	lt
 8002ea8:	4613      	movlt	r3, r2
 8002eaa:	6033      	str	r3, [r6, #0]
 8002eac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002eb0:	4607      	mov	r7, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	b10a      	cbz	r2, 8002eba <_printf_common+0x26>
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	6033      	str	r3, [r6, #0]
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	0699      	lsls	r1, r3, #26
 8002ebe:	bf42      	ittt	mi
 8002ec0:	6833      	ldrmi	r3, [r6, #0]
 8002ec2:	3302      	addmi	r3, #2
 8002ec4:	6033      	strmi	r3, [r6, #0]
 8002ec6:	6825      	ldr	r5, [r4, #0]
 8002ec8:	f015 0506 	ands.w	r5, r5, #6
 8002ecc:	d106      	bne.n	8002edc <_printf_common+0x48>
 8002ece:	f104 0a19 	add.w	sl, r4, #25
 8002ed2:	68e3      	ldr	r3, [r4, #12]
 8002ed4:	6832      	ldr	r2, [r6, #0]
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	42ab      	cmp	r3, r5
 8002eda:	dc26      	bgt.n	8002f2a <_printf_common+0x96>
 8002edc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ee0:	1e13      	subs	r3, r2, #0
 8002ee2:	6822      	ldr	r2, [r4, #0]
 8002ee4:	bf18      	it	ne
 8002ee6:	2301      	movne	r3, #1
 8002ee8:	0692      	lsls	r2, r2, #26
 8002eea:	d42b      	bmi.n	8002f44 <_printf_common+0xb0>
 8002eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ef0:	4649      	mov	r1, r9
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	47c0      	blx	r8
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d01e      	beq.n	8002f38 <_printf_common+0xa4>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	68e5      	ldr	r5, [r4, #12]
 8002efe:	6832      	ldr	r2, [r6, #0]
 8002f00:	f003 0306 	and.w	r3, r3, #6
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	bf08      	it	eq
 8002f08:	1aad      	subeq	r5, r5, r2
 8002f0a:	68a3      	ldr	r3, [r4, #8]
 8002f0c:	6922      	ldr	r2, [r4, #16]
 8002f0e:	bf0c      	ite	eq
 8002f10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f14:	2500      	movne	r5, #0
 8002f16:	4293      	cmp	r3, r2
 8002f18:	bfc4      	itt	gt
 8002f1a:	1a9b      	subgt	r3, r3, r2
 8002f1c:	18ed      	addgt	r5, r5, r3
 8002f1e:	2600      	movs	r6, #0
 8002f20:	341a      	adds	r4, #26
 8002f22:	42b5      	cmp	r5, r6
 8002f24:	d11a      	bne.n	8002f5c <_printf_common+0xc8>
 8002f26:	2000      	movs	r0, #0
 8002f28:	e008      	b.n	8002f3c <_printf_common+0xa8>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4652      	mov	r2, sl
 8002f2e:	4649      	mov	r1, r9
 8002f30:	4638      	mov	r0, r7
 8002f32:	47c0      	blx	r8
 8002f34:	3001      	adds	r0, #1
 8002f36:	d103      	bne.n	8002f40 <_printf_common+0xac>
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f40:	3501      	adds	r5, #1
 8002f42:	e7c6      	b.n	8002ed2 <_printf_common+0x3e>
 8002f44:	18e1      	adds	r1, r4, r3
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	2030      	movs	r0, #48	; 0x30
 8002f4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f4e:	4422      	add	r2, r4
 8002f50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f58:	3302      	adds	r3, #2
 8002f5a:	e7c7      	b.n	8002eec <_printf_common+0x58>
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	4622      	mov	r2, r4
 8002f60:	4649      	mov	r1, r9
 8002f62:	4638      	mov	r0, r7
 8002f64:	47c0      	blx	r8
 8002f66:	3001      	adds	r0, #1
 8002f68:	d0e6      	beq.n	8002f38 <_printf_common+0xa4>
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7d9      	b.n	8002f22 <_printf_common+0x8e>
	...

08002f70 <_printf_i>:
 8002f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f74:	7e0f      	ldrb	r7, [r1, #24]
 8002f76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f78:	2f78      	cmp	r7, #120	; 0x78
 8002f7a:	4691      	mov	r9, r2
 8002f7c:	4680      	mov	r8, r0
 8002f7e:	460c      	mov	r4, r1
 8002f80:	469a      	mov	sl, r3
 8002f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f86:	d807      	bhi.n	8002f98 <_printf_i+0x28>
 8002f88:	2f62      	cmp	r7, #98	; 0x62
 8002f8a:	d80a      	bhi.n	8002fa2 <_printf_i+0x32>
 8002f8c:	2f00      	cmp	r7, #0
 8002f8e:	f000 80d8 	beq.w	8003142 <_printf_i+0x1d2>
 8002f92:	2f58      	cmp	r7, #88	; 0x58
 8002f94:	f000 80a3 	beq.w	80030de <_printf_i+0x16e>
 8002f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fa0:	e03a      	b.n	8003018 <_printf_i+0xa8>
 8002fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fa6:	2b15      	cmp	r3, #21
 8002fa8:	d8f6      	bhi.n	8002f98 <_printf_i+0x28>
 8002faa:	a101      	add	r1, pc, #4	; (adr r1, 8002fb0 <_printf_i+0x40>)
 8002fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fb0:	08003009 	.word	0x08003009
 8002fb4:	0800301d 	.word	0x0800301d
 8002fb8:	08002f99 	.word	0x08002f99
 8002fbc:	08002f99 	.word	0x08002f99
 8002fc0:	08002f99 	.word	0x08002f99
 8002fc4:	08002f99 	.word	0x08002f99
 8002fc8:	0800301d 	.word	0x0800301d
 8002fcc:	08002f99 	.word	0x08002f99
 8002fd0:	08002f99 	.word	0x08002f99
 8002fd4:	08002f99 	.word	0x08002f99
 8002fd8:	08002f99 	.word	0x08002f99
 8002fdc:	08003129 	.word	0x08003129
 8002fe0:	0800304d 	.word	0x0800304d
 8002fe4:	0800310b 	.word	0x0800310b
 8002fe8:	08002f99 	.word	0x08002f99
 8002fec:	08002f99 	.word	0x08002f99
 8002ff0:	0800314b 	.word	0x0800314b
 8002ff4:	08002f99 	.word	0x08002f99
 8002ff8:	0800304d 	.word	0x0800304d
 8002ffc:	08002f99 	.word	0x08002f99
 8003000:	08002f99 	.word	0x08002f99
 8003004:	08003113 	.word	0x08003113
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	602a      	str	r2, [r5, #0]
 8003010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003018:	2301      	movs	r3, #1
 800301a:	e0a3      	b.n	8003164 <_printf_i+0x1f4>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	6829      	ldr	r1, [r5, #0]
 8003020:	0606      	lsls	r6, r0, #24
 8003022:	f101 0304 	add.w	r3, r1, #4
 8003026:	d50a      	bpl.n	800303e <_printf_i+0xce>
 8003028:	680e      	ldr	r6, [r1, #0]
 800302a:	602b      	str	r3, [r5, #0]
 800302c:	2e00      	cmp	r6, #0
 800302e:	da03      	bge.n	8003038 <_printf_i+0xc8>
 8003030:	232d      	movs	r3, #45	; 0x2d
 8003032:	4276      	negs	r6, r6
 8003034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003038:	485e      	ldr	r0, [pc, #376]	; (80031b4 <_printf_i+0x244>)
 800303a:	230a      	movs	r3, #10
 800303c:	e019      	b.n	8003072 <_printf_i+0x102>
 800303e:	680e      	ldr	r6, [r1, #0]
 8003040:	602b      	str	r3, [r5, #0]
 8003042:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003046:	bf18      	it	ne
 8003048:	b236      	sxthne	r6, r6
 800304a:	e7ef      	b.n	800302c <_printf_i+0xbc>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	6820      	ldr	r0, [r4, #0]
 8003050:	1d19      	adds	r1, r3, #4
 8003052:	6029      	str	r1, [r5, #0]
 8003054:	0601      	lsls	r1, r0, #24
 8003056:	d501      	bpl.n	800305c <_printf_i+0xec>
 8003058:	681e      	ldr	r6, [r3, #0]
 800305a:	e002      	b.n	8003062 <_printf_i+0xf2>
 800305c:	0646      	lsls	r6, r0, #25
 800305e:	d5fb      	bpl.n	8003058 <_printf_i+0xe8>
 8003060:	881e      	ldrh	r6, [r3, #0]
 8003062:	4854      	ldr	r0, [pc, #336]	; (80031b4 <_printf_i+0x244>)
 8003064:	2f6f      	cmp	r7, #111	; 0x6f
 8003066:	bf0c      	ite	eq
 8003068:	2308      	moveq	r3, #8
 800306a:	230a      	movne	r3, #10
 800306c:	2100      	movs	r1, #0
 800306e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003072:	6865      	ldr	r5, [r4, #4]
 8003074:	60a5      	str	r5, [r4, #8]
 8003076:	2d00      	cmp	r5, #0
 8003078:	bfa2      	ittt	ge
 800307a:	6821      	ldrge	r1, [r4, #0]
 800307c:	f021 0104 	bicge.w	r1, r1, #4
 8003080:	6021      	strge	r1, [r4, #0]
 8003082:	b90e      	cbnz	r6, 8003088 <_printf_i+0x118>
 8003084:	2d00      	cmp	r5, #0
 8003086:	d04d      	beq.n	8003124 <_printf_i+0x1b4>
 8003088:	4615      	mov	r5, r2
 800308a:	fbb6 f1f3 	udiv	r1, r6, r3
 800308e:	fb03 6711 	mls	r7, r3, r1, r6
 8003092:	5dc7      	ldrb	r7, [r0, r7]
 8003094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003098:	4637      	mov	r7, r6
 800309a:	42bb      	cmp	r3, r7
 800309c:	460e      	mov	r6, r1
 800309e:	d9f4      	bls.n	800308a <_printf_i+0x11a>
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d10b      	bne.n	80030bc <_printf_i+0x14c>
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	07de      	lsls	r6, r3, #31
 80030a8:	d508      	bpl.n	80030bc <_printf_i+0x14c>
 80030aa:	6923      	ldr	r3, [r4, #16]
 80030ac:	6861      	ldr	r1, [r4, #4]
 80030ae:	4299      	cmp	r1, r3
 80030b0:	bfde      	ittt	le
 80030b2:	2330      	movle	r3, #48	; 0x30
 80030b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030b8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80030bc:	1b52      	subs	r2, r2, r5
 80030be:	6122      	str	r2, [r4, #16]
 80030c0:	f8cd a000 	str.w	sl, [sp]
 80030c4:	464b      	mov	r3, r9
 80030c6:	aa03      	add	r2, sp, #12
 80030c8:	4621      	mov	r1, r4
 80030ca:	4640      	mov	r0, r8
 80030cc:	f7ff fee2 	bl	8002e94 <_printf_common>
 80030d0:	3001      	adds	r0, #1
 80030d2:	d14c      	bne.n	800316e <_printf_i+0x1fe>
 80030d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030d8:	b004      	add	sp, #16
 80030da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030de:	4835      	ldr	r0, [pc, #212]	; (80031b4 <_printf_i+0x244>)
 80030e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030e4:	6829      	ldr	r1, [r5, #0]
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80030ec:	6029      	str	r1, [r5, #0]
 80030ee:	061d      	lsls	r5, r3, #24
 80030f0:	d514      	bpl.n	800311c <_printf_i+0x1ac>
 80030f2:	07df      	lsls	r7, r3, #31
 80030f4:	bf44      	itt	mi
 80030f6:	f043 0320 	orrmi.w	r3, r3, #32
 80030fa:	6023      	strmi	r3, [r4, #0]
 80030fc:	b91e      	cbnz	r6, 8003106 <_printf_i+0x196>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	f023 0320 	bic.w	r3, r3, #32
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	2310      	movs	r3, #16
 8003108:	e7b0      	b.n	800306c <_printf_i+0xfc>
 800310a:	6823      	ldr	r3, [r4, #0]
 800310c:	f043 0320 	orr.w	r3, r3, #32
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	2378      	movs	r3, #120	; 0x78
 8003114:	4828      	ldr	r0, [pc, #160]	; (80031b8 <_printf_i+0x248>)
 8003116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800311a:	e7e3      	b.n	80030e4 <_printf_i+0x174>
 800311c:	0659      	lsls	r1, r3, #25
 800311e:	bf48      	it	mi
 8003120:	b2b6      	uxthmi	r6, r6
 8003122:	e7e6      	b.n	80030f2 <_printf_i+0x182>
 8003124:	4615      	mov	r5, r2
 8003126:	e7bb      	b.n	80030a0 <_printf_i+0x130>
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	6826      	ldr	r6, [r4, #0]
 800312c:	6961      	ldr	r1, [r4, #20]
 800312e:	1d18      	adds	r0, r3, #4
 8003130:	6028      	str	r0, [r5, #0]
 8003132:	0635      	lsls	r5, r6, #24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	d501      	bpl.n	800313c <_printf_i+0x1cc>
 8003138:	6019      	str	r1, [r3, #0]
 800313a:	e002      	b.n	8003142 <_printf_i+0x1d2>
 800313c:	0670      	lsls	r0, r6, #25
 800313e:	d5fb      	bpl.n	8003138 <_printf_i+0x1c8>
 8003140:	8019      	strh	r1, [r3, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	6123      	str	r3, [r4, #16]
 8003146:	4615      	mov	r5, r2
 8003148:	e7ba      	b.n	80030c0 <_printf_i+0x150>
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	1d1a      	adds	r2, r3, #4
 800314e:	602a      	str	r2, [r5, #0]
 8003150:	681d      	ldr	r5, [r3, #0]
 8003152:	6862      	ldr	r2, [r4, #4]
 8003154:	2100      	movs	r1, #0
 8003156:	4628      	mov	r0, r5
 8003158:	f7fd f872 	bl	8000240 <memchr>
 800315c:	b108      	cbz	r0, 8003162 <_printf_i+0x1f2>
 800315e:	1b40      	subs	r0, r0, r5
 8003160:	6060      	str	r0, [r4, #4]
 8003162:	6863      	ldr	r3, [r4, #4]
 8003164:	6123      	str	r3, [r4, #16]
 8003166:	2300      	movs	r3, #0
 8003168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800316c:	e7a8      	b.n	80030c0 <_printf_i+0x150>
 800316e:	6923      	ldr	r3, [r4, #16]
 8003170:	462a      	mov	r2, r5
 8003172:	4649      	mov	r1, r9
 8003174:	4640      	mov	r0, r8
 8003176:	47d0      	blx	sl
 8003178:	3001      	adds	r0, #1
 800317a:	d0ab      	beq.n	80030d4 <_printf_i+0x164>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	079b      	lsls	r3, r3, #30
 8003180:	d413      	bmi.n	80031aa <_printf_i+0x23a>
 8003182:	68e0      	ldr	r0, [r4, #12]
 8003184:	9b03      	ldr	r3, [sp, #12]
 8003186:	4298      	cmp	r0, r3
 8003188:	bfb8      	it	lt
 800318a:	4618      	movlt	r0, r3
 800318c:	e7a4      	b.n	80030d8 <_printf_i+0x168>
 800318e:	2301      	movs	r3, #1
 8003190:	4632      	mov	r2, r6
 8003192:	4649      	mov	r1, r9
 8003194:	4640      	mov	r0, r8
 8003196:	47d0      	blx	sl
 8003198:	3001      	adds	r0, #1
 800319a:	d09b      	beq.n	80030d4 <_printf_i+0x164>
 800319c:	3501      	adds	r5, #1
 800319e:	68e3      	ldr	r3, [r4, #12]
 80031a0:	9903      	ldr	r1, [sp, #12]
 80031a2:	1a5b      	subs	r3, r3, r1
 80031a4:	42ab      	cmp	r3, r5
 80031a6:	dcf2      	bgt.n	800318e <_printf_i+0x21e>
 80031a8:	e7eb      	b.n	8003182 <_printf_i+0x212>
 80031aa:	2500      	movs	r5, #0
 80031ac:	f104 0619 	add.w	r6, r4, #25
 80031b0:	e7f5      	b.n	800319e <_printf_i+0x22e>
 80031b2:	bf00      	nop
 80031b4:	080034c9 	.word	0x080034c9
 80031b8:	080034da 	.word	0x080034da

080031bc <memcpy>:
 80031bc:	440a      	add	r2, r1
 80031be:	4291      	cmp	r1, r2
 80031c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80031c4:	d100      	bne.n	80031c8 <memcpy+0xc>
 80031c6:	4770      	bx	lr
 80031c8:	b510      	push	{r4, lr}
 80031ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031d2:	4291      	cmp	r1, r2
 80031d4:	d1f9      	bne.n	80031ca <memcpy+0xe>
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <memmove>:
 80031d8:	4288      	cmp	r0, r1
 80031da:	b510      	push	{r4, lr}
 80031dc:	eb01 0402 	add.w	r4, r1, r2
 80031e0:	d902      	bls.n	80031e8 <memmove+0x10>
 80031e2:	4284      	cmp	r4, r0
 80031e4:	4623      	mov	r3, r4
 80031e6:	d807      	bhi.n	80031f8 <memmove+0x20>
 80031e8:	1e43      	subs	r3, r0, #1
 80031ea:	42a1      	cmp	r1, r4
 80031ec:	d008      	beq.n	8003200 <memmove+0x28>
 80031ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031f6:	e7f8      	b.n	80031ea <memmove+0x12>
 80031f8:	4402      	add	r2, r0
 80031fa:	4601      	mov	r1, r0
 80031fc:	428a      	cmp	r2, r1
 80031fe:	d100      	bne.n	8003202 <memmove+0x2a>
 8003200:	bd10      	pop	{r4, pc}
 8003202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800320a:	e7f7      	b.n	80031fc <memmove+0x24>

0800320c <_free_r>:
 800320c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800320e:	2900      	cmp	r1, #0
 8003210:	d044      	beq.n	800329c <_free_r+0x90>
 8003212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003216:	9001      	str	r0, [sp, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f1a1 0404 	sub.w	r4, r1, #4
 800321e:	bfb8      	it	lt
 8003220:	18e4      	addlt	r4, r4, r3
 8003222:	f000 f913 	bl	800344c <__malloc_lock>
 8003226:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <_free_r+0x94>)
 8003228:	9801      	ldr	r0, [sp, #4]
 800322a:	6813      	ldr	r3, [r2, #0]
 800322c:	b933      	cbnz	r3, 800323c <_free_r+0x30>
 800322e:	6063      	str	r3, [r4, #4]
 8003230:	6014      	str	r4, [r2, #0]
 8003232:	b003      	add	sp, #12
 8003234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003238:	f000 b90e 	b.w	8003458 <__malloc_unlock>
 800323c:	42a3      	cmp	r3, r4
 800323e:	d908      	bls.n	8003252 <_free_r+0x46>
 8003240:	6825      	ldr	r5, [r4, #0]
 8003242:	1961      	adds	r1, r4, r5
 8003244:	428b      	cmp	r3, r1
 8003246:	bf01      	itttt	eq
 8003248:	6819      	ldreq	r1, [r3, #0]
 800324a:	685b      	ldreq	r3, [r3, #4]
 800324c:	1949      	addeq	r1, r1, r5
 800324e:	6021      	streq	r1, [r4, #0]
 8003250:	e7ed      	b.n	800322e <_free_r+0x22>
 8003252:	461a      	mov	r2, r3
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b10b      	cbz	r3, 800325c <_free_r+0x50>
 8003258:	42a3      	cmp	r3, r4
 800325a:	d9fa      	bls.n	8003252 <_free_r+0x46>
 800325c:	6811      	ldr	r1, [r2, #0]
 800325e:	1855      	adds	r5, r2, r1
 8003260:	42a5      	cmp	r5, r4
 8003262:	d10b      	bne.n	800327c <_free_r+0x70>
 8003264:	6824      	ldr	r4, [r4, #0]
 8003266:	4421      	add	r1, r4
 8003268:	1854      	adds	r4, r2, r1
 800326a:	42a3      	cmp	r3, r4
 800326c:	6011      	str	r1, [r2, #0]
 800326e:	d1e0      	bne.n	8003232 <_free_r+0x26>
 8003270:	681c      	ldr	r4, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	6053      	str	r3, [r2, #4]
 8003276:	4421      	add	r1, r4
 8003278:	6011      	str	r1, [r2, #0]
 800327a:	e7da      	b.n	8003232 <_free_r+0x26>
 800327c:	d902      	bls.n	8003284 <_free_r+0x78>
 800327e:	230c      	movs	r3, #12
 8003280:	6003      	str	r3, [r0, #0]
 8003282:	e7d6      	b.n	8003232 <_free_r+0x26>
 8003284:	6825      	ldr	r5, [r4, #0]
 8003286:	1961      	adds	r1, r4, r5
 8003288:	428b      	cmp	r3, r1
 800328a:	bf04      	itt	eq
 800328c:	6819      	ldreq	r1, [r3, #0]
 800328e:	685b      	ldreq	r3, [r3, #4]
 8003290:	6063      	str	r3, [r4, #4]
 8003292:	bf04      	itt	eq
 8003294:	1949      	addeq	r1, r1, r5
 8003296:	6021      	streq	r1, [r4, #0]
 8003298:	6054      	str	r4, [r2, #4]
 800329a:	e7ca      	b.n	8003232 <_free_r+0x26>
 800329c:	b003      	add	sp, #12
 800329e:	bd30      	pop	{r4, r5, pc}
 80032a0:	2000011c 	.word	0x2000011c

080032a4 <sbrk_aligned>:
 80032a4:	b570      	push	{r4, r5, r6, lr}
 80032a6:	4e0e      	ldr	r6, [pc, #56]	; (80032e0 <sbrk_aligned+0x3c>)
 80032a8:	460c      	mov	r4, r1
 80032aa:	6831      	ldr	r1, [r6, #0]
 80032ac:	4605      	mov	r5, r0
 80032ae:	b911      	cbnz	r1, 80032b6 <sbrk_aligned+0x12>
 80032b0:	f000 f8bc 	bl	800342c <_sbrk_r>
 80032b4:	6030      	str	r0, [r6, #0]
 80032b6:	4621      	mov	r1, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	f000 f8b7 	bl	800342c <_sbrk_r>
 80032be:	1c43      	adds	r3, r0, #1
 80032c0:	d00a      	beq.n	80032d8 <sbrk_aligned+0x34>
 80032c2:	1cc4      	adds	r4, r0, #3
 80032c4:	f024 0403 	bic.w	r4, r4, #3
 80032c8:	42a0      	cmp	r0, r4
 80032ca:	d007      	beq.n	80032dc <sbrk_aligned+0x38>
 80032cc:	1a21      	subs	r1, r4, r0
 80032ce:	4628      	mov	r0, r5
 80032d0:	f000 f8ac 	bl	800342c <_sbrk_r>
 80032d4:	3001      	adds	r0, #1
 80032d6:	d101      	bne.n	80032dc <sbrk_aligned+0x38>
 80032d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80032dc:	4620      	mov	r0, r4
 80032de:	bd70      	pop	{r4, r5, r6, pc}
 80032e0:	20000120 	.word	0x20000120

080032e4 <_malloc_r>:
 80032e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e8:	1ccd      	adds	r5, r1, #3
 80032ea:	f025 0503 	bic.w	r5, r5, #3
 80032ee:	3508      	adds	r5, #8
 80032f0:	2d0c      	cmp	r5, #12
 80032f2:	bf38      	it	cc
 80032f4:	250c      	movcc	r5, #12
 80032f6:	2d00      	cmp	r5, #0
 80032f8:	4607      	mov	r7, r0
 80032fa:	db01      	blt.n	8003300 <_malloc_r+0x1c>
 80032fc:	42a9      	cmp	r1, r5
 80032fe:	d905      	bls.n	800330c <_malloc_r+0x28>
 8003300:	230c      	movs	r3, #12
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	2600      	movs	r6, #0
 8003306:	4630      	mov	r0, r6
 8003308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800330c:	4e2e      	ldr	r6, [pc, #184]	; (80033c8 <_malloc_r+0xe4>)
 800330e:	f000 f89d 	bl	800344c <__malloc_lock>
 8003312:	6833      	ldr	r3, [r6, #0]
 8003314:	461c      	mov	r4, r3
 8003316:	bb34      	cbnz	r4, 8003366 <_malloc_r+0x82>
 8003318:	4629      	mov	r1, r5
 800331a:	4638      	mov	r0, r7
 800331c:	f7ff ffc2 	bl	80032a4 <sbrk_aligned>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	4604      	mov	r4, r0
 8003324:	d14d      	bne.n	80033c2 <_malloc_r+0xde>
 8003326:	6834      	ldr	r4, [r6, #0]
 8003328:	4626      	mov	r6, r4
 800332a:	2e00      	cmp	r6, #0
 800332c:	d140      	bne.n	80033b0 <_malloc_r+0xcc>
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	4631      	mov	r1, r6
 8003332:	4638      	mov	r0, r7
 8003334:	eb04 0803 	add.w	r8, r4, r3
 8003338:	f000 f878 	bl	800342c <_sbrk_r>
 800333c:	4580      	cmp	r8, r0
 800333e:	d13a      	bne.n	80033b6 <_malloc_r+0xd2>
 8003340:	6821      	ldr	r1, [r4, #0]
 8003342:	3503      	adds	r5, #3
 8003344:	1a6d      	subs	r5, r5, r1
 8003346:	f025 0503 	bic.w	r5, r5, #3
 800334a:	3508      	adds	r5, #8
 800334c:	2d0c      	cmp	r5, #12
 800334e:	bf38      	it	cc
 8003350:	250c      	movcc	r5, #12
 8003352:	4629      	mov	r1, r5
 8003354:	4638      	mov	r0, r7
 8003356:	f7ff ffa5 	bl	80032a4 <sbrk_aligned>
 800335a:	3001      	adds	r0, #1
 800335c:	d02b      	beq.n	80033b6 <_malloc_r+0xd2>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	442b      	add	r3, r5
 8003362:	6023      	str	r3, [r4, #0]
 8003364:	e00e      	b.n	8003384 <_malloc_r+0xa0>
 8003366:	6822      	ldr	r2, [r4, #0]
 8003368:	1b52      	subs	r2, r2, r5
 800336a:	d41e      	bmi.n	80033aa <_malloc_r+0xc6>
 800336c:	2a0b      	cmp	r2, #11
 800336e:	d916      	bls.n	800339e <_malloc_r+0xba>
 8003370:	1961      	adds	r1, r4, r5
 8003372:	42a3      	cmp	r3, r4
 8003374:	6025      	str	r5, [r4, #0]
 8003376:	bf18      	it	ne
 8003378:	6059      	strne	r1, [r3, #4]
 800337a:	6863      	ldr	r3, [r4, #4]
 800337c:	bf08      	it	eq
 800337e:	6031      	streq	r1, [r6, #0]
 8003380:	5162      	str	r2, [r4, r5]
 8003382:	604b      	str	r3, [r1, #4]
 8003384:	4638      	mov	r0, r7
 8003386:	f104 060b 	add.w	r6, r4, #11
 800338a:	f000 f865 	bl	8003458 <__malloc_unlock>
 800338e:	f026 0607 	bic.w	r6, r6, #7
 8003392:	1d23      	adds	r3, r4, #4
 8003394:	1af2      	subs	r2, r6, r3
 8003396:	d0b6      	beq.n	8003306 <_malloc_r+0x22>
 8003398:	1b9b      	subs	r3, r3, r6
 800339a:	50a3      	str	r3, [r4, r2]
 800339c:	e7b3      	b.n	8003306 <_malloc_r+0x22>
 800339e:	6862      	ldr	r2, [r4, #4]
 80033a0:	42a3      	cmp	r3, r4
 80033a2:	bf0c      	ite	eq
 80033a4:	6032      	streq	r2, [r6, #0]
 80033a6:	605a      	strne	r2, [r3, #4]
 80033a8:	e7ec      	b.n	8003384 <_malloc_r+0xa0>
 80033aa:	4623      	mov	r3, r4
 80033ac:	6864      	ldr	r4, [r4, #4]
 80033ae:	e7b2      	b.n	8003316 <_malloc_r+0x32>
 80033b0:	4634      	mov	r4, r6
 80033b2:	6876      	ldr	r6, [r6, #4]
 80033b4:	e7b9      	b.n	800332a <_malloc_r+0x46>
 80033b6:	230c      	movs	r3, #12
 80033b8:	603b      	str	r3, [r7, #0]
 80033ba:	4638      	mov	r0, r7
 80033bc:	f000 f84c 	bl	8003458 <__malloc_unlock>
 80033c0:	e7a1      	b.n	8003306 <_malloc_r+0x22>
 80033c2:	6025      	str	r5, [r4, #0]
 80033c4:	e7de      	b.n	8003384 <_malloc_r+0xa0>
 80033c6:	bf00      	nop
 80033c8:	2000011c 	.word	0x2000011c

080033cc <_realloc_r>:
 80033cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033d0:	4680      	mov	r8, r0
 80033d2:	4614      	mov	r4, r2
 80033d4:	460e      	mov	r6, r1
 80033d6:	b921      	cbnz	r1, 80033e2 <_realloc_r+0x16>
 80033d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033dc:	4611      	mov	r1, r2
 80033de:	f7ff bf81 	b.w	80032e4 <_malloc_r>
 80033e2:	b92a      	cbnz	r2, 80033f0 <_realloc_r+0x24>
 80033e4:	f7ff ff12 	bl	800320c <_free_r>
 80033e8:	4625      	mov	r5, r4
 80033ea:	4628      	mov	r0, r5
 80033ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033f0:	f000 f838 	bl	8003464 <_malloc_usable_size_r>
 80033f4:	4284      	cmp	r4, r0
 80033f6:	4607      	mov	r7, r0
 80033f8:	d802      	bhi.n	8003400 <_realloc_r+0x34>
 80033fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033fe:	d812      	bhi.n	8003426 <_realloc_r+0x5a>
 8003400:	4621      	mov	r1, r4
 8003402:	4640      	mov	r0, r8
 8003404:	f7ff ff6e 	bl	80032e4 <_malloc_r>
 8003408:	4605      	mov	r5, r0
 800340a:	2800      	cmp	r0, #0
 800340c:	d0ed      	beq.n	80033ea <_realloc_r+0x1e>
 800340e:	42bc      	cmp	r4, r7
 8003410:	4622      	mov	r2, r4
 8003412:	4631      	mov	r1, r6
 8003414:	bf28      	it	cs
 8003416:	463a      	movcs	r2, r7
 8003418:	f7ff fed0 	bl	80031bc <memcpy>
 800341c:	4631      	mov	r1, r6
 800341e:	4640      	mov	r0, r8
 8003420:	f7ff fef4 	bl	800320c <_free_r>
 8003424:	e7e1      	b.n	80033ea <_realloc_r+0x1e>
 8003426:	4635      	mov	r5, r6
 8003428:	e7df      	b.n	80033ea <_realloc_r+0x1e>
	...

0800342c <_sbrk_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d06      	ldr	r5, [pc, #24]	; (8003448 <_sbrk_r+0x1c>)
 8003430:	2300      	movs	r3, #0
 8003432:	4604      	mov	r4, r0
 8003434:	4608      	mov	r0, r1
 8003436:	602b      	str	r3, [r5, #0]
 8003438:	f7fd fa52 	bl	80008e0 <_sbrk>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_sbrk_r+0x1a>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_sbrk_r+0x1a>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20000124 	.word	0x20000124

0800344c <__malloc_lock>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__malloc_lock+0x8>)
 800344e:	f000 b811 	b.w	8003474 <__retarget_lock_acquire_recursive>
 8003452:	bf00      	nop
 8003454:	20000128 	.word	0x20000128

08003458 <__malloc_unlock>:
 8003458:	4801      	ldr	r0, [pc, #4]	; (8003460 <__malloc_unlock+0x8>)
 800345a:	f000 b80c 	b.w	8003476 <__retarget_lock_release_recursive>
 800345e:	bf00      	nop
 8003460:	20000128 	.word	0x20000128

08003464 <_malloc_usable_size_r>:
 8003464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003468:	1f18      	subs	r0, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	bfbc      	itt	lt
 800346e:	580b      	ldrlt	r3, [r1, r0]
 8003470:	18c0      	addlt	r0, r0, r3
 8003472:	4770      	bx	lr

08003474 <__retarget_lock_acquire_recursive>:
 8003474:	4770      	bx	lr

08003476 <__retarget_lock_release_recursive>:
 8003476:	4770      	bx	lr

08003478 <_init>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

08003484 <_fini>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	bf00      	nop
 8003488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348a:	bc08      	pop	{r3}
 800348c:	469e      	mov	lr, r3
 800348e:	4770      	bx	lr
