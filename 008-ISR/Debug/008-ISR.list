
008-ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003fd4  08003fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fec  08003fec  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fec  08003fec  00013fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ff4  08003ff4  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ff4  08003ff4  00013ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08004008  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  080040a8  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006a0  2000014c  08004148  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007ec  08004148  000207ec  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012420  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000282d  00000000  00000000  0003259a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d80  00000000  00000000  00034dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c68  00000000  00000000  00035b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028d0f  00000000  00000000  000367b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001102d  00000000  00000000  0005f4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f937b  00000000  00000000  000704ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00169867  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000036d0  00000000  00000000  001698b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003fbc 	.word	0x08003fbc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08003fbc 	.word	0x08003fbc

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <MX_ETH_Init+0x84>)
 8000542:	4a20      	ldr	r2, [pc, #128]	; (80005c4 <MX_ETH_Init+0x88>)
 8000544:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <MX_ETH_Init+0x8c>)
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000554:	22e1      	movs	r2, #225	; 0xe1
 8000556:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <MX_ETH_Init+0x8c>)
 800055a:	2200      	movs	r2, #0
 800055c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800055e:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000560:	2200      	movs	r2, #0
 8000562:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <MX_ETH_Init+0x8c>)
 8000566:	2200      	movs	r2, #0
 8000568:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_ETH_Init+0x84>)
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <MX_ETH_Init+0x8c>)
 800056e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000570:	4b13      	ldr	r3, [pc, #76]	; (80005c0 <MX_ETH_Init+0x84>)
 8000572:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000576:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <MX_ETH_Init+0x84>)
 800057a:	4a14      	ldr	r2, [pc, #80]	; (80005cc <MX_ETH_Init+0x90>)
 800057c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <MX_ETH_Init+0x84>)
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <MX_ETH_Init+0x94>)
 8000582:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_ETH_Init+0x84>)
 8000586:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800058a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800058c:	480c      	ldr	r0, [pc, #48]	; (80005c0 <MX_ETH_Init+0x84>)
 800058e:	f000 fdcb 	bl	8001128 <HAL_ETH_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 fa32 	bl	8000a00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a2:	f003 fd03 	bl	8003fac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80005a6:	4b0b      	ldr	r3, [pc, #44]	; (80005d4 <MX_ETH_Init+0x98>)
 80005a8:	2221      	movs	r2, #33	; 0x21
 80005aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_ETH_Init+0x98>)
 80005ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80005b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <MX_ETH_Init+0x98>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200001a0 	.word	0x200001a0
 80005c4:	40028000 	.word	0x40028000
 80005c8:	20000250 	.word	0x20000250
 80005cc:	200000ac 	.word	0x200000ac
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	20000168 	.word	0x20000168

080005d8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08e      	sub	sp, #56	; 0x38
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a4e      	ldr	r2, [pc, #312]	; (8000730 <HAL_ETH_MspInit+0x158>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	f040 8096 	bne.w	8000728 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a4c      	ldr	r2, [pc, #304]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000602:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
 8000608:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000610:	623b      	str	r3, [r7, #32]
 8000612:	6a3b      	ldr	r3, [r7, #32]
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	4a46      	ldr	r2, [pc, #280]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800061a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800061e:	6313      	str	r3, [r2, #48]	; 0x30
 8000620:	4b44      	ldr	r3, [pc, #272]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	4b41      	ldr	r3, [pc, #260]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	4a40      	ldr	r2, [pc, #256]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000636:	6313      	str	r3, [r2, #48]	; 0x30
 8000638:	4b3e      	ldr	r3, [pc, #248]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000640:	61bb      	str	r3, [r7, #24]
 8000642:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b3b      	ldr	r3, [pc, #236]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800064a:	f043 0304 	orr.w	r3, r3, #4
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b38      	ldr	r3, [pc, #224]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0304 	and.w	r3, r3, #4
 8000658:	617b      	str	r3, [r7, #20]
 800065a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	4b35      	ldr	r3, [pc, #212]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a34      	ldr	r2, [pc, #208]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b32      	ldr	r3, [pc, #200]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0301 	and.w	r3, r3, #1
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000674:	4b2f      	ldr	r3, [pc, #188]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000678:	4a2e      	ldr	r2, [pc, #184]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6313      	str	r3, [r2, #48]	; 0x30
 8000680:	4b2c      	ldr	r3, [pc, #176]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000684:	f003 0302 	and.w	r3, r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 8000692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000696:	6313      	str	r3, [r2, #48]	; 0x30
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <HAL_ETH_MspInit+0x15c>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006a4:	2332      	movs	r3, #50	; 0x32
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b0:	2303      	movs	r3, #3
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b4:	230b      	movs	r3, #11
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481e      	ldr	r0, [pc, #120]	; (8000738 <HAL_ETH_MspInit+0x160>)
 80006c0:	f001 f858 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006c4:	2386      	movs	r3, #134	; 0x86
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d4:	230b      	movs	r3, #11
 80006d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	4817      	ldr	r0, [pc, #92]	; (800073c <HAL_ETH_MspInit+0x164>)
 80006e0:	f001 f848 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f2:	2303      	movs	r3, #3
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f6:	230b      	movs	r3, #11
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <HAL_ETH_MspInit+0x168>)
 8000702:	f001 f837 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000706:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000714:	2303      	movs	r3, #3
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000718:	230b      	movs	r3, #11
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4808      	ldr	r0, [pc, #32]	; (8000744 <HAL_ETH_MspInit+0x16c>)
 8000724:	f001 f826 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000728:	bf00      	nop
 800072a:	3738      	adds	r7, #56	; 0x38
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40028000 	.word	0x40028000
 8000734:	40023800 	.word	0x40023800
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40021800 	.word	0x40021800

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	; 0x30
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 031c 	add.w	r3, r7, #28
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_GPIO_Init+0x144>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4a      	ldr	r2, [pc, #296]	; (800088c <MX_GPIO_Init+0x144>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x144>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <MX_GPIO_Init+0x144>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a44      	ldr	r2, [pc, #272]	; (800088c <MX_GPIO_Init+0x144>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b42      	ldr	r3, [pc, #264]	; (800088c <MX_GPIO_Init+0x144>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b3f      	ldr	r3, [pc, #252]	; (800088c <MX_GPIO_Init+0x144>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3e      	ldr	r2, [pc, #248]	; (800088c <MX_GPIO_Init+0x144>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b3c      	ldr	r3, [pc, #240]	; (800088c <MX_GPIO_Init+0x144>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b39      	ldr	r3, [pc, #228]	; (800088c <MX_GPIO_Init+0x144>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a38      	ldr	r2, [pc, #224]	; (800088c <MX_GPIO_Init+0x144>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_GPIO_Init+0x144>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0x144>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a32      	ldr	r2, [pc, #200]	; (800088c <MX_GPIO_Init+0x144>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b30      	ldr	r3, [pc, #192]	; (800088c <MX_GPIO_Init+0x144>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_GPIO_Init+0x144>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	; (800088c <MX_GPIO_Init+0x144>)
 80007dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_GPIO_Init+0x144>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f4:	4826      	ldr	r0, [pc, #152]	; (8000890 <MX_GPIO_Init+0x148>)
 80007f6:	f001 f969 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	4825      	ldr	r0, [pc, #148]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000800:	f001 f964 	bl	8001acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <MX_GPIO_Init+0x150>)
 800081c:	f000 ffaa 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000820:	f244 0381 	movw	r3, #16513	; 0x4081
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	4815      	ldr	r0, [pc, #84]	; (8000890 <MX_GPIO_Init+0x148>)
 800083a:	f000 ff9b 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	480f      	ldr	r0, [pc, #60]	; (8000894 <MX_GPIO_Init+0x14c>)
 8000856:	f000 ff8d 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085a:	2380      	movs	r3, #128	; 0x80
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_GPIO_Init+0x14c>)
 800086e:	f000 ff81 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2028      	movs	r0, #40	; 0x28
 8000878:	f000 fc11 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800087c:	2028      	movs	r0, #40	; 0x28
 800087e:	f000 fc2a 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 8000882:	bf00      	nop
 8000884:	3730      	adds	r7, #48	; 0x30
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	40020800 	.word	0x40020800

0800089c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin){
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ac:	d113      	bne.n	80008d6 <HAL_GPIO_EXTI_Callback+0x3a>
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80008ae:	2028      	movs	r0, #40	; 0x28
 80008b0:	f000 fc1f 	bl	80010f2 <HAL_NVIC_DisableIRQ>

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <HAL_GPIO_EXTI_Callback+0x44>)
 80008b8:	f001 f921 	bl	8001afe <HAL_GPIO_TogglePin>

//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
		for (uint32_t i=0; i < 2000000; i++) {} // add delay
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	e002      	b.n	80008c8 <HAL_GPIO_EXTI_Callback+0x2c>
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3301      	adds	r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x48>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d9f8      	bls.n	80008c2 <HAL_GPIO_EXTI_Callback+0x26>
//		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);

		HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fc00 	bl	80010d6 <HAL_NVIC_EnableIRQ>
	}
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020400 	.word	0x40020400
 80008e4:	001e847f 	.word	0x001e847f

080008e8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008ec:	f000 fa57 	bl	8000d9e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008f0:	f000 f814 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008f4:	f7ff ff28 	bl	8000748 <MX_GPIO_Init>
	MX_ETH_Init();
 80008f8:	f7ff fe20 	bl	800053c <MX_ETH_Init>
	MX_USART3_UART_Init();
 80008fc:	f000 f8ee 	bl	8000adc <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000900:	f000 f97c 	bl	8000bfc <MX_USB_OTG_FS_PCD_Init>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000904:	2101      	movs	r1, #1
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <main+0x30>)
 8000908:	f001 f8f9 	bl	8001afe <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800090c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000910:	f000 faa2 	bl	8000e58 <HAL_Delay>
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000914:	e7f6      	b.n	8000904 <main+0x1c>
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400

0800091c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b094      	sub	sp, #80	; 0x50
 8000920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	2234      	movs	r2, #52	; 0x34
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fb3e 	bl	8003fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	f107 0308 	add.w	r3, r7, #8
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000940:	f001 fa58 	bl	8001df4 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b2c      	ldr	r3, [pc, #176]	; (80009f8 <SystemClock_Config+0xdc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a2b      	ldr	r2, [pc, #172]	; (80009f8 <SystemClock_Config+0xdc>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SystemClock_Config+0xdc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	4b27      	ldr	r3, [pc, #156]	; (80009fc <SystemClock_Config+0xe0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a25      	ldr	r2, [pc, #148]	; (80009fc <SystemClock_Config+0xe0>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <SystemClock_Config+0xe0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000978:	2301      	movs	r3, #1
 800097a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800097c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000980:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000982:	2302      	movs	r3, #2
 8000984:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000986:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800098a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800098c:	2304      	movs	r3, #4
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000990:	2360      	movs	r3, #96	; 0x60
 8000992:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800099c:	2302      	movs	r3, #2
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fa85 	bl	8001eb4 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80009b0:	f000 f826 	bl	8000a00 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009b4:	f001 fa2e 	bl	8001e14 <HAL_PWREx_EnableOverDrive>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 80009be:	f000 f81f 	bl	8000a00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2302      	movs	r3, #2
 80009c8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2103      	movs	r1, #3
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fd16 	bl	8002410 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80009ea:	f000 f809 	bl	8000a00 <Error_Handler>
	}
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 f9ba 	bl	8000e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000aac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ab0:	f001 f840 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <SystemInit+0x20>)
 8000abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac2:	4a05      	ldr	r2, [pc, #20]	; (8000ad8 <SystemInit+0x20>)
 8000ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae2:	4a15      	ldr	r2, [pc, #84]	; (8000b38 <MX_USART3_UART_Init+0x5c>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_USART3_UART_Init+0x58>)
 8000b20:	f002 fac4 	bl	80030ac <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000b2a:	f7ff ff69 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000258 	.word	0x20000258
 8000b38:	40004800 	.word	0x40004800

08000b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0ae      	sub	sp, #184	; 0xb8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2290      	movs	r2, #144	; 0x90
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f003 fa25 	bl	8003fac <memset>
  if(uartHandle->Instance==USART3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a22      	ldr	r2, [pc, #136]	; (8000bf0 <HAL_UART_MspInit+0xb4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d13c      	bne.n	8000be6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fe6e 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b86:	f7ff ff3b 	bl	8000a00 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a13      	ldr	r2, [pc, #76]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000ba8:	f043 0308 	orr.w	r3, r3, #8
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0xb8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0308 	and.w	r3, r3, #8
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <HAL_UART_MspInit+0xbc>)
 8000be2:	f000 fdc7 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	37b8      	adds	r7, #184	; 0xb8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40004800 	.word	0x40004800
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020c00 	.word	0x40020c00

08000bfc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c08:	4b12      	ldr	r3, [pc, #72]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c0a:	2206      	movs	r2, #6
 8000c0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c10:	2202      	movs	r2, #2
 8000c12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c32:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c40:	f000 ff90 	bl	8001b64 <HAL_PCD_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c4a:	f7ff fed9 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200002e0 	.word	0x200002e0

08000c58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b0ae      	sub	sp, #184	; 0xb8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2290      	movs	r2, #144	; 0x90
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 f997 	bl	8003fac <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c86:	d159      	bne.n	8000d3c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000c88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c8c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f001 fddf 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000ca4:	f7ff feac 	bl	8000a00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cac:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000cc0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cda:	230a      	movs	r3, #10
 8000cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000ce8:	f000 fd44 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4810      	ldr	r0, [pc, #64]	; (8000d48 <HAL_PCD_MspInit+0xf0>)
 8000d08:	f000 fd34 	bl	8001774 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d10:	4a0c      	ldr	r2, [pc, #48]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d16:	6353      	str	r3, [r2, #52]	; 0x34
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	4a06      	ldr	r2, [pc, #24]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <HAL_PCD_MspInit+0xec>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	37b8      	adds	r7, #184	; 0xb8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d52:	490e      	ldr	r1, [pc, #56]	; (8000d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d58:	e002      	b.n	8000d60 <LoopCopyDataInit>

08000d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d5e:	3304      	adds	r3, #4

08000d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d64:	d3f9      	bcc.n	8000d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d66:	4a0b      	ldr	r2, [pc, #44]	; (8000d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d68:	4c0b      	ldr	r4, [pc, #44]	; (8000d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d6c:	e001      	b.n	8000d72 <LoopFillZerobss>

08000d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d70:	3204      	adds	r2, #4

08000d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d74:	d3fb      	bcc.n	8000d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d76:	f7ff fe9f 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 f8f3 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fdb3 	bl	80008e8 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d90:	08003ffc 	.word	0x08003ffc
  ldr r2, =_sbss
 8000d94:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d98:	200007ec 	.word	0x200007ec

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>

08000d9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 f970 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 f805 	bl	8000db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dae:	f7ff fe2d 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_InitTick+0x54>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x58>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f999 	bl	800110e <HAL_SYSTICK_Config>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	e00e      	b.n	8000e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d80a      	bhi.n	8000e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df4:	f000 f953 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df8:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <HAL_InitTick+0x5c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000004 	.word	0x20000004

08000e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x20>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_IncTick+0x24>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <HAL_IncTick+0x24>)
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200007e8 	.word	0x200007e8

08000e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <HAL_GetTick+0x14>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	200007e8 	.word	0x200007e8

08000e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e60:	f7ff ffee 	bl	8000e40 <HAL_GetTick>
 8000e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e70:	d005      	beq.n	8000e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_Delay+0x44>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7e:	bf00      	nop
 8000e80:	f7ff ffde 	bl	8000e40 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f7      	bhi.n	8000e80 <HAL_Delay+0x28>
  {
  }
}
 8000e90:	bf00      	nop
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	05fa0000 	.word	0x05fa0000

08000ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <__NVIC_GetPriorityGrouping+0x18>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0a1b      	lsrs	r3, r3, #8
 8000ef2:	f003 0307 	and.w	r3, r3, #7
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db0b      	blt.n	8000f2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	f003 021f 	and.w	r2, r3, #31
 8000f1c:	4907      	ldr	r1, [pc, #28]	; (8000f3c <__NVIC_EnableIRQ+0x38>)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	095b      	lsrs	r3, r3, #5
 8000f24:	2001      	movs	r0, #1
 8000f26:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f2e:	bf00      	nop
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db12      	blt.n	8000f78 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	490a      	ldr	r1, [pc, #40]	; (8000f84 <__NVIC_DisableIRQ+0x44>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	3320      	adds	r3, #32
 8000f68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6c:	f3bf 8f4f 	dsb	sy
}
 8000f70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f72:	f3bf 8f6f 	isb	sy
}
 8000f76:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff05 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff1a 	bl	8000ee8 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff0d 	bl	8000f04 <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ff1d 	bl	8000f40 <__NVIC_DisableIRQ>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff94 	bl	8001044 <SysTick_Config>
 800111c:	4603      	mov	r3, r0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e06a      	b.n	8001210 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001140:	2b00      	cmp	r3, #0
 8001142:	d106      	bne.n	8001152 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2223      	movs	r2, #35	; 0x23
 8001148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff fa43 	bl	80005d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_ETH_Init+0xf0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	4a30      	ldr	r2, [pc, #192]	; (8001218 <HAL_ETH_Init+0xf0>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6453      	str	r3, [r2, #68]	; 0x44
 800115e:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <HAL_ETH_Init+0xf0>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_ETH_Init+0xf4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a2b      	ldr	r2, [pc, #172]	; (800121c <HAL_ETH_Init+0xf4>)
 8001170:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001174:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001176:	4b29      	ldr	r3, [pc, #164]	; (800121c <HAL_ETH_Init+0xf4>)
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	4927      	ldr	r1, [pc, #156]	; (800121c <HAL_ETH_Init+0xf4>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_ETH_Init+0xf4>)
 8001186:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	6812      	ldr	r2, [r2, #0]
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800119e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011a0:	f7ff fe4e 	bl	8000e40 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011a6:	e011      	b.n	80011cc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80011a8:	f7ff fe4a 	bl	8000e40 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80011b6:	d909      	bls.n	80011cc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2204      	movs	r2, #4
 80011bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	22e0      	movs	r2, #224	; 0xe0
 80011c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e021      	b.n	8001210 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e4      	bne.n	80011a8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f000 f958 	bl	8001494 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f9ff 	bl	80015e8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fa55 	bl	800169a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	461a      	mov	r2, r3
 80011f6:	2100      	movs	r1, #0
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f9bd 	bl	8001578 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2210      	movs	r2, #16
 800120a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800

08001220 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	4b51      	ldr	r3, [pc, #324]	; (800137c <ETH_SetMACConfig+0x15c>)
 8001236:	4013      	ands	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	7c1b      	ldrb	r3, [r3, #16]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <ETH_SetMACConfig+0x28>
 8001242:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001246:	e000      	b.n	800124a <ETH_SetMACConfig+0x2a>
 8001248:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	7c5b      	ldrb	r3, [r3, #17]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <ETH_SetMACConfig+0x38>
 8001252:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001256:	e000      	b.n	800125a <ETH_SetMACConfig+0x3a>
 8001258:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800125a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001260:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	7fdb      	ldrb	r3, [r3, #31]
 8001266:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001268:	431a      	orrs	r2, r3
                        macconf->Speed |
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800126e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	7f92      	ldrb	r2, [r2, #30]
 8001274:	2a00      	cmp	r2, #0
 8001276:	d102      	bne.n	800127e <ETH_SetMACConfig+0x5e>
 8001278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127c:	e000      	b.n	8001280 <ETH_SetMACConfig+0x60>
 800127e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001280:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	7f1b      	ldrb	r3, [r3, #28]
 8001286:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001288:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800128e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001296:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d102      	bne.n	80012a8 <ETH_SetMACConfig+0x88>
 80012a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012a6:	e000      	b.n	80012aa <ETH_SetMACConfig+0x8a>
 80012a8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	7bdb      	ldrb	r3, [r3, #15]
 80012b0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80012b2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012c0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff fdbc 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80012f6:	4013      	ands	r3, r2
 80012f8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fe:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001306:	2a00      	cmp	r2, #0
 8001308:	d101      	bne.n	800130e <ETH_SetMACConfig+0xee>
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	e000      	b.n	8001310 <ETH_SetMACConfig+0xf0>
 800130e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001310:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001316:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800131e:	2a01      	cmp	r2, #1
 8001320:	d101      	bne.n	8001326 <ETH_SetMACConfig+0x106>
 8001322:	2208      	movs	r2, #8
 8001324:	e000      	b.n	8001328 <ETH_SetMACConfig+0x108>
 8001326:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001328:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001330:	2a01      	cmp	r2, #1
 8001332:	d101      	bne.n	8001338 <ETH_SetMACConfig+0x118>
 8001334:	2204      	movs	r2, #4
 8001336:	e000      	b.n	800133a <ETH_SetMACConfig+0x11a>
 8001338:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800133a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001342:	2a01      	cmp	r2, #1
 8001344:	d101      	bne.n	800134a <ETH_SetMACConfig+0x12a>
 8001346:	2202      	movs	r2, #2
 8001348:	e000      	b.n	800134c <ETH_SetMACConfig+0x12c>
 800134a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800134c:	4313      	orrs	r3, r2
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff fd77 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	ff20810f 	.word	0xff20810f

08001380 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <ETH_SetDMAConfig+0x110>)
 800139a:	4013      	ands	r3, r2
 800139c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	7b1b      	ldrb	r3, [r3, #12]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <ETH_SetDMAConfig+0x2c>
 80013a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013aa:	e000      	b.n	80013ae <ETH_SetDMAConfig+0x2e>
 80013ac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7b5b      	ldrb	r3, [r3, #13]
 80013b2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013b4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	7f52      	ldrb	r2, [r2, #29]
 80013ba:	2a00      	cmp	r2, #0
 80013bc:	d102      	bne.n	80013c4 <ETH_SetDMAConfig+0x44>
 80013be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013c2:	e000      	b.n	80013c6 <ETH_SetDMAConfig+0x46>
 80013c4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	7b9b      	ldrb	r3, [r3, #14]
 80013cc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013ce:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013d4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7f1b      	ldrb	r3, [r3, #28]
 80013da:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013dc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	7f9b      	ldrb	r3, [r3, #30]
 80013e2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013e4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013ea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013f4:	4313      	orrs	r3, r2
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001416:	2001      	movs	r0, #1
 8001418:	f7ff fd1e 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001424:	461a      	mov	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001434:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800143a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001440:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001448:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800144a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001452:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001458:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001462:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001466:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff fcef 	bl	8000e58 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	f8de3f23 	.word	0xf8de3f23

08001494 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0a6      	sub	sp, #152	; 0x98
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800149c:	2301      	movs	r3, #1
 800149e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80014be:	2301      	movs	r3, #1
 80014c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014d0:	2300      	movs	r3, #0
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014da:	2300      	movs	r3, #0
 80014dc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001508:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff fe86 	bl	8001220 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001514:	2301      	movs	r3, #1
 8001516:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001518:	2301      	movs	r3, #1
 800151a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800151c:	2301      	movs	r3, #1
 800151e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001522:	2301      	movs	r3, #1
 8001524:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800153a:	2301      	movs	r3, #1
 800153c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001540:	2301      	movs	r3, #1
 8001542:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001548:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800154a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001554:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001556:	2301      	movs	r3, #1
 8001558:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001564:	f107 0308 	add.w	r3, r7, #8
 8001568:	4619      	mov	r1, r3
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff08 	bl	8001380 <ETH_SetDMAConfig>
}
 8001570:	bf00      	nop
 8001572:	3798      	adds	r7, #152	; 0x98
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3305      	adds	r3, #5
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	3204      	adds	r2, #4
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <ETH_MACAddressConfig+0x68>)
 800159a:	4413      	add	r3, r2
 800159c:	461a      	mov	r2, r3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3303      	adds	r3, #3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	061a      	lsls	r2, r3, #24
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3302      	adds	r3, #2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	041b      	lsls	r3, r3, #16
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3301      	adds	r3, #1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	4313      	orrs	r3, r2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <ETH_MACAddressConfig+0x6c>)
 80015ca:	4413      	add	r3, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	6013      	str	r3, [r2, #0]
}
 80015d2:	bf00      	nop
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40028040 	.word	0x40028040
 80015e4:	40028044 	.word	0x40028044

080015e8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e03e      	b.n	8001674 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68d9      	ldr	r1, [r3, #12]
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	3206      	adds	r2, #6
 8001628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d80c      	bhi.n	8001658 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68d9      	ldr	r1, [r3, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	e004      	b.n	8001662 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	461a      	mov	r2, r3
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d9bd      	bls.n	80015f6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168c:	611a      	str	r2, [r3, #16]
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e046      	b.n	8001736 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6919      	ldr	r1, [r3, #16]
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4613      	mov	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	440b      	add	r3, r1
 80016b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	2200      	movs	r2, #0
 80016c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80016e4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80016ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	3212      	adds	r2, #18
 8001702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b02      	cmp	r3, #2
 800170a:	d80c      	bhi.n	8001726 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6919      	ldr	r1, [r3, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	e004      	b.n	8001730 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	461a      	mov	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d9b5      	bls.n	80016a8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691a      	ldr	r2, [r3, #16]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	60da      	str	r2, [r3, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800178e:	2300      	movs	r3, #0
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e175      	b.n	8001a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	4013      	ands	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8164 	bne.w	8001a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d005      	beq.n	80017ca <HAL_GPIO_Init+0x56>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d130      	bne.n	800182c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	091b      	lsrs	r3, r3, #4
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b03      	cmp	r3, #3
 8001836:	d017      	beq.n	8001868 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d123      	bne.n	80018bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	69b9      	ldr	r1, [r7, #24]
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80be 	beq.w	8001a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b66      	ldr	r3, [pc, #408]	; (8001a98 <HAL_GPIO_Init+0x324>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <HAL_GPIO_Init+0x324>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
 800190a:	4b63      	ldr	r3, [pc, #396]	; (8001a98 <HAL_GPIO_Init+0x324>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001916:	4a61      	ldr	r2, [pc, #388]	; (8001a9c <HAL_GPIO_Init+0x328>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d037      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d031      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a56      	ldr	r2, [pc, #344]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d02b      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a55      	ldr	r2, [pc, #340]	; (8001aac <HAL_GPIO_Init+0x338>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d025      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x33c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d01f      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a53      	ldr	r2, [pc, #332]	; (8001ab4 <HAL_GPIO_Init+0x340>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d019      	beq.n	800199e <HAL_GPIO_Init+0x22a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <HAL_GPIO_Init+0x344>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d013      	beq.n	800199a <HAL_GPIO_Init+0x226>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a51      	ldr	r2, [pc, #324]	; (8001abc <HAL_GPIO_Init+0x348>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00d      	beq.n	8001996 <HAL_GPIO_Init+0x222>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a50      	ldr	r2, [pc, #320]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <HAL_GPIO_Init+0x21e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4f      	ldr	r2, [pc, #316]	; (8001ac4 <HAL_GPIO_Init+0x350>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_GPIO_Init+0x21a>
 800198a:	2309      	movs	r3, #9
 800198c:	e012      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800198e:	230a      	movs	r3, #10
 8001990:	e010      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001992:	2308      	movs	r3, #8
 8001994:	e00e      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 8001996:	2307      	movs	r3, #7
 8001998:	e00c      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199a:	2306      	movs	r3, #6
 800199c:	e00a      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 800199e:	2305      	movs	r3, #5
 80019a0:	e008      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a2:	2304      	movs	r3, #4
 80019a4:	e006      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019a6:	2303      	movs	r3, #3
 80019a8:	e004      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019aa:	2302      	movs	r3, #2
 80019ac:	e002      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019ae:	2301      	movs	r3, #1
 80019b0:	e000      	b.n	80019b4 <HAL_GPIO_Init+0x240>
 80019b2:	2300      	movs	r3, #0
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f002 0203 	and.w	r2, r2, #3
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4093      	lsls	r3, r2
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019c4:	4935      	ldr	r1, [pc, #212]	; (8001a9c <HAL_GPIO_Init+0x328>)
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	089b      	lsrs	r3, r3, #2
 80019ca:	3302      	adds	r3, #2
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019f6:	4a34      	ldr	r2, [pc, #208]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a20:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <HAL_GPIO_Init+0x354>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2b0f      	cmp	r3, #15
 8001a84:	f67f ae86 	bls.w	8001794 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020800 	.word	0x40020800
 8001aac:	40020c00 	.word	0x40020c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40021400 	.word	0x40021400
 8001ab8:	40021800 	.word	0x40021800
 8001abc:	40021c00 	.word	0x40021c00
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40022400 	.word	0x40022400
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001adc:	787b      	ldrb	r3, [r7, #1]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	041a      	lsls	r2, r3, #16
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	619a      	str	r2, [r3, #24]
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b10:	887a      	ldrh	r2, [r7, #2]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	4013      	ands	r3, r2
 8001b16:	041a      	lsls	r2, r3, #16
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	887b      	ldrh	r3, [r7, #2]
 8001b1e:	400b      	ands	r3, r1
 8001b20:	431a      	orrs	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	619a      	str	r2, [r3, #24]
}
 8001b26:	bf00      	nop
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fea2 	bl	800089c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40013c00 	.word	0x40013c00

08001b64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	b08f      	sub	sp, #60	; 0x3c
 8001b68:	af0a      	add	r7, sp, #40	; 0x28
 8001b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e116      	b.n	8001da4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff f861 	bl	8000c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 ff39 	bl	8003a2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	687e      	ldr	r6, [r7, #4]
 8001bc2:	466d      	mov	r5, sp
 8001bc4:	f106 0410 	add.w	r4, r6, #16
 8001bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bd8:	1d33      	adds	r3, r6, #4
 8001bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bdc:	6838      	ldr	r0, [r7, #0]
 8001bde:	f001 fecd 	bl	800397c <USB_CoreInit>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e0d7      	b.n	8001da4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f001 ff27 	bl	8003a4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e04a      	b.n	8001c9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	333d      	adds	r3, #61	; 0x3d
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	440b      	add	r3, r1
 8001c28:	333c      	adds	r3, #60	; 0x3c
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
 8001c32:	b298      	uxth	r0, r3
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3344      	adds	r3, #68	; 0x44
 8001c42:	4602      	mov	r2, r0
 8001c44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c46:	7bfa      	ldrb	r2, [r7, #15]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3340      	adds	r3, #64	; 0x40
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	3348      	adds	r3, #72	; 0x48
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	334c      	adds	r3, #76	; 0x4c
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	4613      	mov	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	440b      	add	r3, r1
 8001c90:	3354      	adds	r3, #84	; 0x54
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d3af      	bcc.n	8001c06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
 8001caa:	e044      	b.n	8001d36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cd8:	7bfa      	ldrb	r2, [r7, #15]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001cea:	2200      	movs	r2, #0
 8001cec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3301      	adds	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d3b5      	bcc.n	8001cac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	687e      	ldr	r6, [r7, #4]
 8001d48:	466d      	mov	r5, sp
 8001d4a:	f106 0410 	add.w	r4, r6, #16
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5e:	1d33      	adds	r3, r6, #4
 8001d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d62:	6838      	ldr	r0, [r7, #0]
 8001d64:	f001 fec0 	bl	8003ae8 <USB_DevInit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e014      	b.n	8001da4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f80a 	bl	8001dac <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 f87e 	bl	8003e9e <USB_DevDisconnect>

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dac <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	10000003 	.word	0x10000003

08001df4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40007000 	.word	0x40007000

08001e14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	4a22      	ldr	r2, [pc, #136]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6413      	str	r3, [r2, #64]	; 0x40
 8001e2a:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_PWREx_EnableOverDrive+0x98>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e40:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e42:	f7fe fffd 	bl	8000e40 <HAL_GetTick>
 8001e46:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e48:	e009      	b.n	8001e5e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e4a:	f7fe fff9 	bl	8000e40 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e58:	d901      	bls.n	8001e5e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e022      	b.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d1ee      	bne.n	8001e4a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e76:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e78:	f7fe ffe2 	bl	8000e40 <HAL_GetTick>
 8001e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e7e:	e009      	b.n	8001e94 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e80:	f7fe ffde 	bl	8000e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e8e:	d901      	bls.n	8001e94 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e007      	b.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001ea0:	d1ee      	bne.n	8001e80 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e29b      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee4:	4b93      	ldr	r3, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x130>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e275      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7a>
 8001f20:	4b84      	ldr	r3, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a83      	ldr	r2, [pc, #524]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x9c>
 8001f36:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7b      	ldr	r2, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6b      	ldr	r2, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7fe ff54 	bl	8000e40 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7fe ff50 	bl	8000e40 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e229      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe8>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff40 	bl	8000e40 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe ff3c 	bl	8000e40 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e215      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x110>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d069      	beq.n	80020c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1e9      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	493d      	ldr	r1, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e040      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe fef2 	bl	8000e40 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7fe feee 	bl	8000e40 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1c7      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4929      	ldr	r1, [pc, #164]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fece 	bl	8000e40 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe feca 	bl	8000e40 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e1a3      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d038      	beq.n	8002144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7fe feab 	bl	8000e40 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7fe fea7 	bl	8000e40 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e180      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x23a>
 800210c:	e01a      	b.n	8002144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7fe fe91 	bl	8000e40 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7fe fe8d 	bl	8000e40 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d903      	bls.n	8002138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e166      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
 8002134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a4 	beq.w	800229a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b89      	ldr	r3, [pc, #548]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a88      	ldr	r2, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b86      	ldr	r3, [pc, #536]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002186:	4b80      	ldr	r3, [pc, #512]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7f      	ldr	r2, [pc, #508]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7fe fe55 	bl	8000e40 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7fe fe51 	bl	8000e40 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e12a      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ac:	4b76      	ldr	r3, [pc, #472]	; (8002388 <HAL_RCC_OscConfig+0x4d4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x31a>
 80021c0:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x33c>
 80021d6:	4b6b      	ldr	r3, [pc, #428]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a6a      	ldr	r2, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a67      	ldr	r2, [pc, #412]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x35e>
 80021f8:	4b62      	ldr	r3, [pc, #392]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a61      	ldr	r2, [pc, #388]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 8002212:	4b5c      	ldr	r3, [pc, #368]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a58      	ldr	r2, [pc, #352]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7fe fe05 	bl	8000e40 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7fe fe01 	bl	8000e40 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0d8      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b4c      	ldr	r3, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x386>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fdef 	bl	8000e40 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7fe fdeb 	bl	8000e40 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0c2      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b41      	ldr	r3, [pc, #260]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a3c      	ldr	r2, [pc, #240]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80ae 	beq.w	8002400 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d06d      	beq.n	800238c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d14b      	bne.n	8002350 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b32      	ldr	r3, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a31      	ldr	r2, [pc, #196]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fdbc 	bl	8000e40 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7fe fdb8 	bl	8000e40 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e091      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b29      	ldr	r3, [pc, #164]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	071b      	lsls	r3, r3, #28
 8002316:	491b      	ldr	r1, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe fd8a 	bl	8000e40 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fd86 	bl	8000e40 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e05f      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x47c>
 800234e:	e057      	b.n	8002400 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fd70 	bl	8000e40 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7fe fd6c 	bl	8000e40 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e045      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002376:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x4b0>
 8002382:	e03d      	b.n	8002400 <HAL_RCC_OscConfig+0x54c>
 8002384:	40023800 	.word	0x40023800
 8002388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800238c:	4b1f      	ldr	r3, [pc, #124]	; (800240c <HAL_RCC_OscConfig+0x558>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d030      	beq.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d129      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d122      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d119      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10f      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0d0      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	4965      	ldr	r1, [pc, #404]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0b8      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a58      	ldr	r2, [pc, #352]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800247a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002488:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a52      	ldr	r2, [pc, #328]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002494:	4b50      	ldr	r3, [pc, #320]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	494d      	ldr	r1, [pc, #308]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d040      	beq.n	8002534 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d115      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e07f      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d2:	4b41      	ldr	r3, [pc, #260]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e073      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e2:	4b3d      	ldr	r3, [pc, #244]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e06b      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f023 0203 	bic.w	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4936      	ldr	r1, [pc, #216]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	4313      	orrs	r3, r2
 8002502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002504:	f7fe fc9c 	bl	8000e40 <HAL_GetTick>
 8002508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	e00a      	b.n	8002522 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250c:	f7fe fc98 	bl	8000e40 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e053      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 020c 	and.w	r2, r3, #12
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	429a      	cmp	r2, r3
 8002532:	d1eb      	bne.n	800250c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002534:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d210      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 020f 	bic.w	r2, r3, #15
 800254a:	4922      	ldr	r1, [pc, #136]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e032      	b.n	80025ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4916      	ldr	r1, [pc, #88]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	490e      	ldr	r1, [pc, #56]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a2:	f000 f821 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4602      	mov	r2, r0
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	490a      	ldr	r1, [pc, #40]	; (80025dc <HAL_RCC_ClockConfig+0x1cc>)
 80025b4:	5ccb      	ldrb	r3, [r1, r3]
 80025b6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1d0>)
 80025bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1d4>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fbf8 	bl	8000db8 <HAL_InitTick>

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08003fd4 	.word	0x08003fd4
 80025e0:	20000000 	.word	0x20000000
 80025e4:	20000004 	.word	0x20000004

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025ec:	b094      	sub	sp, #80	; 0x50
 80025ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	647b      	str	r3, [r7, #68]	; 0x44
 80025f4:	2300      	movs	r3, #0
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002600:	4b79      	ldr	r3, [pc, #484]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d00d      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x40>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f200 80e1 	bhi.w	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002616:	2b04      	cmp	r3, #4
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x3a>
 800261a:	e0db      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b73      	ldr	r3, [pc, #460]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002620:	e0db      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b73      	ldr	r3, [pc, #460]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002626:	e0d8      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b6f      	ldr	r3, [pc, #444]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002632:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d063      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	2200      	movs	r2, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
 8002648:	63fa      	str	r2, [r7, #60]	; 0x3c
 800264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
 8002656:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	0159      	lsls	r1, r3, #5
 8002668:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266c:	0150      	lsls	r0, r2, #5
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4621      	mov	r1, r4
 8002674:	1a51      	subs	r1, r2, r1
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	4629      	mov	r1, r5
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800268c:	4659      	mov	r1, fp
 800268e:	018b      	lsls	r3, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002696:	4651      	mov	r1, sl
 8002698:	018a      	lsls	r2, r1, #6
 800269a:	4651      	mov	r1, sl
 800269c:	ebb2 0801 	subs.w	r8, r2, r1
 80026a0:	4659      	mov	r1, fp
 80026a2:	eb63 0901 	sbc.w	r9, r3, r1
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ba:	4690      	mov	r8, r2
 80026bc:	4699      	mov	r9, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	eb18 0303 	adds.w	r3, r8, r3
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	462b      	mov	r3, r5
 80026c8:	eb49 0303 	adc.w	r3, r9, r3
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026da:	4629      	mov	r1, r5
 80026dc:	024b      	lsls	r3, r1, #9
 80026de:	4621      	mov	r1, r4
 80026e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026e4:	4621      	mov	r1, r4
 80026e6:	024a      	lsls	r2, r1, #9
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ee:	2200      	movs	r2, #0
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026f8:	f7fd fd9e 	bl	8000238 <__aeabi_uldivmod>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4613      	mov	r3, r2
 8002702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002704:	e058      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002706:	4b38      	ldr	r3, [pc, #224]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	099b      	lsrs	r3, r3, #6
 800270c:	2200      	movs	r2, #0
 800270e:	4618      	mov	r0, r3
 8002710:	4611      	mov	r1, r2
 8002712:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002716:	623b      	str	r3, [r7, #32]
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
 800271c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	f04f 0000 	mov.w	r0, #0
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	0159      	lsls	r1, r3, #5
 800272e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002732:	0150      	lsls	r0, r2, #5
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4641      	mov	r1, r8
 800273a:	ebb2 0a01 	subs.w	sl, r2, r1
 800273e:	4649      	mov	r1, r9
 8002740:	eb63 0b01 	sbc.w	fp, r3, r1
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	f04f 0300 	mov.w	r3, #0
 800274c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002750:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002754:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002758:	ebb2 040a 	subs.w	r4, r2, sl
 800275c:	eb63 050b 	sbc.w	r5, r3, fp
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	f04f 0300 	mov.w	r3, #0
 8002768:	00eb      	lsls	r3, r5, #3
 800276a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276e:	00e2      	lsls	r2, r4, #3
 8002770:	4614      	mov	r4, r2
 8002772:	461d      	mov	r5, r3
 8002774:	4643      	mov	r3, r8
 8002776:	18e3      	adds	r3, r4, r3
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	464b      	mov	r3, r9
 800277c:	eb45 0303 	adc.w	r3, r5, r3
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278e:	4629      	mov	r1, r5
 8002790:	028b      	lsls	r3, r1, #10
 8002792:	4621      	mov	r1, r4
 8002794:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002798:	4621      	mov	r1, r4
 800279a:	028a      	lsls	r2, r1, #10
 800279c:	4610      	mov	r0, r2
 800279e:	4619      	mov	r1, r3
 80027a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027a2:	2200      	movs	r2, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	61fa      	str	r2, [r7, #28]
 80027a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027ac:	f7fd fd44 	bl	8000238 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4613      	mov	r3, r2
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0303 	and.w	r3, r3, #3
 80027c2:	3301      	adds	r3, #1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80027c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x204>)
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3750      	adds	r7, #80	; 0x50
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	00f42400 	.word	0x00f42400
 80027f0:	007a1200 	.word	0x007a1200

080027f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08003fe4 	.word	0x08003fe4

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08003fe4 	.word	0x08003fe4

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002884:	4b69      	ldr	r3, [pc, #420]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a68      	ldr	r2, [pc, #416]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800288e:	6093      	str	r3, [r2, #8]
 8002890:	4b66      	ldr	r3, [pc, #408]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002898:	4964      	ldr	r1, [pc, #400]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d017      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	4959      	ldr	r1, [pc, #356]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028d4:	d101      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028d6:	2301      	movs	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d017      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f2:	4b4e      	ldr	r3, [pc, #312]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	494a      	ldr	r1, [pc, #296]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002910:	d101      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002912:	2301      	movs	r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800291e:	2301      	movs	r3, #1
 8002920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800292e:	2301      	movs	r3, #1
 8002930:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 808b 	beq.w	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002940:	4b3a      	ldr	r3, [pc, #232]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	4a39      	ldr	r2, [pc, #228]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800294a:	6413      	str	r3, [r2, #64]	; 0x40
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a34      	ldr	r2, [pc, #208]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fa6c 	bl	8000e40 <HAL_GetTick>
 8002968:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7fe fa68 	bl	8000e40 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b64      	cmp	r3, #100	; 0x64
 8002978:	d901      	bls.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e38f      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800298a:	4b28      	ldr	r3, [pc, #160]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002992:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d035      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d02e      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a8:	4b20      	ldr	r3, [pc, #128]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029be:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029ca:	4a18      	ldr	r2, [pc, #96]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029d0:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d114      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fa30 	bl	8000e40 <HAL_GetTick>
 80029e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7fe fa2c 	bl	8000e40 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e351      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0ee      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a12:	d111      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a22:	400b      	ands	r3, r1
 8002a24:	4901      	ldr	r1, [pc, #4]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40007000 	.word	0x40007000
 8002a34:	0ffffcff 	.word	0x0ffffcff
 8002a38:	4bac      	ldr	r3, [pc, #688]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4aab      	ldr	r2, [pc, #684]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a42:	6093      	str	r3, [r2, #8]
 8002a44:	4ba9      	ldr	r3, [pc, #676]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a50:	49a6      	ldr	r1, [pc, #664]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0310 	and.w	r3, r3, #16
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d010      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a62:	4ba2      	ldr	r3, [pc, #648]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a68:	4aa0      	ldr	r2, [pc, #640]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a72:	4b9e      	ldr	r3, [pc, #632]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7c:	499b      	ldr	r1, [pc, #620]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a90:	4b96      	ldr	r3, [pc, #600]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a9e:	4993      	ldr	r1, [pc, #588]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab2:	4b8e      	ldr	r3, [pc, #568]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac0:	498a      	ldr	r1, [pc, #552]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00a      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad4:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae2:	4982      	ldr	r1, [pc, #520]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002af6:	4b7d      	ldr	r3, [pc, #500]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4979      	ldr	r1, [pc, #484]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b18:	4b74      	ldr	r3, [pc, #464]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1e:	f023 0203 	bic.w	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4971      	ldr	r1, [pc, #452]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b3a:	4b6c      	ldr	r3, [pc, #432]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b40:	f023 020c 	bic.w	r2, r3, #12
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	4968      	ldr	r1, [pc, #416]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00a      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b5c:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	4960      	ldr	r1, [pc, #384]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d00a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b8c:	4957      	ldr	r1, [pc, #348]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba0:	4b52      	ldr	r3, [pc, #328]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	494f      	ldr	r1, [pc, #316]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002bc2:	4b4a      	ldr	r3, [pc, #296]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bd0:	4946      	ldr	r1, [pc, #280]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00a      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002be4:	4b41      	ldr	r3, [pc, #260]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	493e      	ldr	r1, [pc, #248]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c14:	4935      	ldr	r1, [pc, #212]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c28:	4b30      	ldr	r3, [pc, #192]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c36:	492d      	ldr	r1, [pc, #180]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d011      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c58:	4924      	ldr	r1, [pc, #144]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c68:	d101      	bne.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c98:	4914      	ldr	r1, [pc, #80]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbc:	490b      	ldr	r1, [pc, #44]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce0:	4902      	ldr	r1, [pc, #8]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cfc:	4b8a      	ldr	r3, [pc, #552]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	4986      	ldr	r1, [pc, #536]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002d20:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d30:	497d      	ldr	r1, [pc, #500]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d006      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 80d6 	beq.w	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d4c:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a75      	ldr	r2, [pc, #468]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe f872 	bl	8000e40 <HAL_GetTick>
 8002d5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d60:	f7fe f86e 	bl	8000e40 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e195      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d72:	4b6d      	ldr	r3, [pc, #436]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d021      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d11d      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d92:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002da0:	4b61      	ldr	r3, [pc, #388]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002da6:	0e1b      	lsrs	r3, r3, #24
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	019a      	lsls	r2, r3, #6
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	041b      	lsls	r3, r3, #16
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	061b      	lsls	r3, r3, #24
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	071b      	lsls	r3, r3, #28
 8002dc6:	4958      	ldr	r1, [pc, #352]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d004      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02e      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df8:	d129      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dfa:	4b4b      	ldr	r3, [pc, #300]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e08:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	0f1b      	lsrs	r3, r3, #28
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	019a      	lsls	r2, r3, #6
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	041b      	lsls	r3, r3, #16
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	061b      	lsls	r3, r3, #24
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	071b      	lsls	r3, r3, #28
 8002e2e:	493e      	ldr	r1, [pc, #248]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e36:	4b3c      	ldr	r3, [pc, #240]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3c:	f023 021f 	bic.w	r2, r3, #31
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	3b01      	subs	r3, #1
 8002e46:	4938      	ldr	r1, [pc, #224]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e5a:	4b33      	ldr	r3, [pc, #204]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e60:	0e1b      	lsrs	r3, r3, #24
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e68:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e6e:	0f1b      	lsrs	r3, r3, #28
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	019a      	lsls	r2, r3, #6
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	041b      	lsls	r3, r3, #16
 8002e82:	431a      	orrs	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	061b      	lsls	r3, r3, #24
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	071b      	lsls	r3, r3, #28
 8002e8e:	4926      	ldr	r1, [pc, #152]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d011      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	019a      	lsls	r2, r3, #6
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	041b      	lsls	r3, r3, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	061b      	lsls	r3, r3, #24
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	071b      	lsls	r3, r3, #28
 8002ebe:	491a      	ldr	r1, [pc, #104]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed2:	f7fd ffb5 	bl	8000e40 <HAL_GetTick>
 8002ed6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eda:	f7fd ffb1 	bl	8000e40 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b64      	cmp	r3, #100	; 0x64
 8002ee6:	d901      	bls.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0d8      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	f040 80ce 	bne.w	800309c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0c:	f7fd ff98 	bl	8000e40 <HAL_GetTick>
 8002f10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f12:	e00b      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f14:	f7fd ff94 	bl	8000e40 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d904      	bls.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0bb      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f2c:	4b5e      	ldr	r3, [pc, #376]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f38:	d0ec      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d02e      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d12a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f62:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f70:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	0f1b      	lsrs	r3, r3, #28
 8002f78:	f003 0307 	and.w	r3, r3, #7
 8002f7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	019a      	lsls	r2, r3, #6
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	041b      	lsls	r3, r3, #16
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	431a      	orrs	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	071b      	lsls	r3, r3, #28
 8002f96:	4944      	ldr	r1, [pc, #272]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f9e:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	493d      	ldr	r1, [pc, #244]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d022      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fcc:	d11d      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fce:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fdc:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	0f1b      	lsrs	r3, r3, #28
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4929      	ldr	r1, [pc, #164]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0308 	and.w	r3, r3, #8
 8003012:	2b00      	cmp	r3, #0
 8003014:	d028      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301c:	0e1b      	lsrs	r3, r3, #24
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003024:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302a:	0c1b      	lsrs	r3, r3, #16
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	019a      	lsls	r2, r3, #6
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	041b      	lsls	r3, r3, #16
 800303c:	431a      	orrs	r2, r3
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	071b      	lsls	r3, r3, #28
 800304a:	4917      	ldr	r1, [pc, #92]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003052:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003060:	4911      	ldr	r1, [pc, #68]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003074:	f7fd fee4 	bl	8000e40 <HAL_GetTick>
 8003078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800307c:	f7fd fee0 	bl	8000e40 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e007      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800309a:	d1ef      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40023800 	.word	0x40023800

080030ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e040      	b.n	8003140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d106      	bne.n	80030d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7fd fd34 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2224      	movs	r2, #36	; 0x24
 80030d8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f82c 	bl	8003148 <UART_SetConfig>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e022      	b.n	8003140 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fa84 	bl	8003610 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f042 0201 	orr.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fb0b 	bl	8003754 <UART_CheckIdleState>
 800313e:	4603      	mov	r3, r0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b088      	sub	sp, #32
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	431a      	orrs	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	4ba6      	ldr	r3, [pc, #664]	; (800340c <UART_SetConfig+0x2c4>)
 8003174:	4013      	ands	r3, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	430b      	orrs	r3, r1
 800317e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a94      	ldr	r2, [pc, #592]	; (8003410 <UART_SetConfig+0x2c8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d120      	bne.n	8003206 <UART_SetConfig+0xbe>
 80031c4:	4b93      	ldr	r3, [pc, #588]	; (8003414 <UART_SetConfig+0x2cc>)
 80031c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b03      	cmp	r3, #3
 80031d0:	d816      	bhi.n	8003200 <UART_SetConfig+0xb8>
 80031d2:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <UART_SetConfig+0x90>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	080031e9 	.word	0x080031e9
 80031dc:	080031f5 	.word	0x080031f5
 80031e0:	080031ef 	.word	0x080031ef
 80031e4:	080031fb 	.word	0x080031fb
 80031e8:	2301      	movs	r3, #1
 80031ea:	77fb      	strb	r3, [r7, #31]
 80031ec:	e150      	b.n	8003490 <UART_SetConfig+0x348>
 80031ee:	2302      	movs	r3, #2
 80031f0:	77fb      	strb	r3, [r7, #31]
 80031f2:	e14d      	b.n	8003490 <UART_SetConfig+0x348>
 80031f4:	2304      	movs	r3, #4
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e14a      	b.n	8003490 <UART_SetConfig+0x348>
 80031fa:	2308      	movs	r3, #8
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e147      	b.n	8003490 <UART_SetConfig+0x348>
 8003200:	2310      	movs	r3, #16
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e144      	b.n	8003490 <UART_SetConfig+0x348>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a83      	ldr	r2, [pc, #524]	; (8003418 <UART_SetConfig+0x2d0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d132      	bne.n	8003276 <UART_SetConfig+0x12e>
 8003210:	4b80      	ldr	r3, [pc, #512]	; (8003414 <UART_SetConfig+0x2cc>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f003 030c 	and.w	r3, r3, #12
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d828      	bhi.n	8003270 <UART_SetConfig+0x128>
 800321e:	a201      	add	r2, pc, #4	; (adr r2, 8003224 <UART_SetConfig+0xdc>)
 8003220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003224:	08003259 	.word	0x08003259
 8003228:	08003271 	.word	0x08003271
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003265 	.word	0x08003265
 8003238:	08003271 	.word	0x08003271
 800323c:	08003271 	.word	0x08003271
 8003240:	08003271 	.word	0x08003271
 8003244:	0800325f 	.word	0x0800325f
 8003248:	08003271 	.word	0x08003271
 800324c:	08003271 	.word	0x08003271
 8003250:	08003271 	.word	0x08003271
 8003254:	0800326b 	.word	0x0800326b
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e118      	b.n	8003490 <UART_SetConfig+0x348>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e115      	b.n	8003490 <UART_SetConfig+0x348>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e112      	b.n	8003490 <UART_SetConfig+0x348>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e10f      	b.n	8003490 <UART_SetConfig+0x348>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e10c      	b.n	8003490 <UART_SetConfig+0x348>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a68      	ldr	r2, [pc, #416]	; (800341c <UART_SetConfig+0x2d4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d120      	bne.n	80032c2 <UART_SetConfig+0x17a>
 8003280:	4b64      	ldr	r3, [pc, #400]	; (8003414 <UART_SetConfig+0x2cc>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800328a:	2b30      	cmp	r3, #48	; 0x30
 800328c:	d013      	beq.n	80032b6 <UART_SetConfig+0x16e>
 800328e:	2b30      	cmp	r3, #48	; 0x30
 8003290:	d814      	bhi.n	80032bc <UART_SetConfig+0x174>
 8003292:	2b20      	cmp	r3, #32
 8003294:	d009      	beq.n	80032aa <UART_SetConfig+0x162>
 8003296:	2b20      	cmp	r3, #32
 8003298:	d810      	bhi.n	80032bc <UART_SetConfig+0x174>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x15c>
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d006      	beq.n	80032b0 <UART_SetConfig+0x168>
 80032a2:	e00b      	b.n	80032bc <UART_SetConfig+0x174>
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
 80032a8:	e0f2      	b.n	8003490 <UART_SetConfig+0x348>
 80032aa:	2302      	movs	r3, #2
 80032ac:	77fb      	strb	r3, [r7, #31]
 80032ae:	e0ef      	b.n	8003490 <UART_SetConfig+0x348>
 80032b0:	2304      	movs	r3, #4
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	e0ec      	b.n	8003490 <UART_SetConfig+0x348>
 80032b6:	2308      	movs	r3, #8
 80032b8:	77fb      	strb	r3, [r7, #31]
 80032ba:	e0e9      	b.n	8003490 <UART_SetConfig+0x348>
 80032bc:	2310      	movs	r3, #16
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e0e6      	b.n	8003490 <UART_SetConfig+0x348>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a56      	ldr	r2, [pc, #344]	; (8003420 <UART_SetConfig+0x2d8>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d120      	bne.n	800330e <UART_SetConfig+0x1c6>
 80032cc:	4b51      	ldr	r3, [pc, #324]	; (8003414 <UART_SetConfig+0x2cc>)
 80032ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032d6:	2bc0      	cmp	r3, #192	; 0xc0
 80032d8:	d013      	beq.n	8003302 <UART_SetConfig+0x1ba>
 80032da:	2bc0      	cmp	r3, #192	; 0xc0
 80032dc:	d814      	bhi.n	8003308 <UART_SetConfig+0x1c0>
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d009      	beq.n	80032f6 <UART_SetConfig+0x1ae>
 80032e2:	2b80      	cmp	r3, #128	; 0x80
 80032e4:	d810      	bhi.n	8003308 <UART_SetConfig+0x1c0>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <UART_SetConfig+0x1a8>
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d006      	beq.n	80032fc <UART_SetConfig+0x1b4>
 80032ee:	e00b      	b.n	8003308 <UART_SetConfig+0x1c0>
 80032f0:	2300      	movs	r3, #0
 80032f2:	77fb      	strb	r3, [r7, #31]
 80032f4:	e0cc      	b.n	8003490 <UART_SetConfig+0x348>
 80032f6:	2302      	movs	r3, #2
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e0c9      	b.n	8003490 <UART_SetConfig+0x348>
 80032fc:	2304      	movs	r3, #4
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e0c6      	b.n	8003490 <UART_SetConfig+0x348>
 8003302:	2308      	movs	r3, #8
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e0c3      	b.n	8003490 <UART_SetConfig+0x348>
 8003308:	2310      	movs	r3, #16
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e0c0      	b.n	8003490 <UART_SetConfig+0x348>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a44      	ldr	r2, [pc, #272]	; (8003424 <UART_SetConfig+0x2dc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d125      	bne.n	8003364 <UART_SetConfig+0x21c>
 8003318:	4b3e      	ldr	r3, [pc, #248]	; (8003414 <UART_SetConfig+0x2cc>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003326:	d017      	beq.n	8003358 <UART_SetConfig+0x210>
 8003328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332c:	d817      	bhi.n	800335e <UART_SetConfig+0x216>
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d00b      	beq.n	800334c <UART_SetConfig+0x204>
 8003334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003338:	d811      	bhi.n	800335e <UART_SetConfig+0x216>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <UART_SetConfig+0x1fe>
 800333e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003342:	d006      	beq.n	8003352 <UART_SetConfig+0x20a>
 8003344:	e00b      	b.n	800335e <UART_SetConfig+0x216>
 8003346:	2300      	movs	r3, #0
 8003348:	77fb      	strb	r3, [r7, #31]
 800334a:	e0a1      	b.n	8003490 <UART_SetConfig+0x348>
 800334c:	2302      	movs	r3, #2
 800334e:	77fb      	strb	r3, [r7, #31]
 8003350:	e09e      	b.n	8003490 <UART_SetConfig+0x348>
 8003352:	2304      	movs	r3, #4
 8003354:	77fb      	strb	r3, [r7, #31]
 8003356:	e09b      	b.n	8003490 <UART_SetConfig+0x348>
 8003358:	2308      	movs	r3, #8
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	e098      	b.n	8003490 <UART_SetConfig+0x348>
 800335e:	2310      	movs	r3, #16
 8003360:	77fb      	strb	r3, [r7, #31]
 8003362:	e095      	b.n	8003490 <UART_SetConfig+0x348>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a2f      	ldr	r2, [pc, #188]	; (8003428 <UART_SetConfig+0x2e0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d125      	bne.n	80033ba <UART_SetConfig+0x272>
 800336e:	4b29      	ldr	r3, [pc, #164]	; (8003414 <UART_SetConfig+0x2cc>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800337c:	d017      	beq.n	80033ae <UART_SetConfig+0x266>
 800337e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003382:	d817      	bhi.n	80033b4 <UART_SetConfig+0x26c>
 8003384:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003388:	d00b      	beq.n	80033a2 <UART_SetConfig+0x25a>
 800338a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338e:	d811      	bhi.n	80033b4 <UART_SetConfig+0x26c>
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <UART_SetConfig+0x254>
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d006      	beq.n	80033a8 <UART_SetConfig+0x260>
 800339a:	e00b      	b.n	80033b4 <UART_SetConfig+0x26c>
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
 80033a0:	e076      	b.n	8003490 <UART_SetConfig+0x348>
 80033a2:	2302      	movs	r3, #2
 80033a4:	77fb      	strb	r3, [r7, #31]
 80033a6:	e073      	b.n	8003490 <UART_SetConfig+0x348>
 80033a8:	2304      	movs	r3, #4
 80033aa:	77fb      	strb	r3, [r7, #31]
 80033ac:	e070      	b.n	8003490 <UART_SetConfig+0x348>
 80033ae:	2308      	movs	r3, #8
 80033b0:	77fb      	strb	r3, [r7, #31]
 80033b2:	e06d      	b.n	8003490 <UART_SetConfig+0x348>
 80033b4:	2310      	movs	r3, #16
 80033b6:	77fb      	strb	r3, [r7, #31]
 80033b8:	e06a      	b.n	8003490 <UART_SetConfig+0x348>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1b      	ldr	r2, [pc, #108]	; (800342c <UART_SetConfig+0x2e4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d138      	bne.n	8003436 <UART_SetConfig+0x2ee>
 80033c4:	4b13      	ldr	r3, [pc, #76]	; (8003414 <UART_SetConfig+0x2cc>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80033ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d2:	d017      	beq.n	8003404 <UART_SetConfig+0x2bc>
 80033d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d8:	d82a      	bhi.n	8003430 <UART_SetConfig+0x2e8>
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d00b      	beq.n	80033f8 <UART_SetConfig+0x2b0>
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	d824      	bhi.n	8003430 <UART_SetConfig+0x2e8>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <UART_SetConfig+0x2aa>
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d006      	beq.n	80033fe <UART_SetConfig+0x2b6>
 80033f0:	e01e      	b.n	8003430 <UART_SetConfig+0x2e8>
 80033f2:	2300      	movs	r3, #0
 80033f4:	77fb      	strb	r3, [r7, #31]
 80033f6:	e04b      	b.n	8003490 <UART_SetConfig+0x348>
 80033f8:	2302      	movs	r3, #2
 80033fa:	77fb      	strb	r3, [r7, #31]
 80033fc:	e048      	b.n	8003490 <UART_SetConfig+0x348>
 80033fe:	2304      	movs	r3, #4
 8003400:	77fb      	strb	r3, [r7, #31]
 8003402:	e045      	b.n	8003490 <UART_SetConfig+0x348>
 8003404:	2308      	movs	r3, #8
 8003406:	77fb      	strb	r3, [r7, #31]
 8003408:	e042      	b.n	8003490 <UART_SetConfig+0x348>
 800340a:	bf00      	nop
 800340c:	efff69f3 	.word	0xefff69f3
 8003410:	40011000 	.word	0x40011000
 8003414:	40023800 	.word	0x40023800
 8003418:	40004400 	.word	0x40004400
 800341c:	40004800 	.word	0x40004800
 8003420:	40004c00 	.word	0x40004c00
 8003424:	40005000 	.word	0x40005000
 8003428:	40011400 	.word	0x40011400
 800342c:	40007800 	.word	0x40007800
 8003430:	2310      	movs	r3, #16
 8003432:	77fb      	strb	r3, [r7, #31]
 8003434:	e02c      	b.n	8003490 <UART_SetConfig+0x348>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <UART_SetConfig+0x4bc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d125      	bne.n	800348c <UART_SetConfig+0x344>
 8003440:	4b71      	ldr	r3, [pc, #452]	; (8003608 <UART_SetConfig+0x4c0>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800344a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800344e:	d017      	beq.n	8003480 <UART_SetConfig+0x338>
 8003450:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003454:	d817      	bhi.n	8003486 <UART_SetConfig+0x33e>
 8003456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345a:	d00b      	beq.n	8003474 <UART_SetConfig+0x32c>
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d811      	bhi.n	8003486 <UART_SetConfig+0x33e>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <UART_SetConfig+0x326>
 8003466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800346a:	d006      	beq.n	800347a <UART_SetConfig+0x332>
 800346c:	e00b      	b.n	8003486 <UART_SetConfig+0x33e>
 800346e:	2300      	movs	r3, #0
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e00d      	b.n	8003490 <UART_SetConfig+0x348>
 8003474:	2302      	movs	r3, #2
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e00a      	b.n	8003490 <UART_SetConfig+0x348>
 800347a:	2304      	movs	r3, #4
 800347c:	77fb      	strb	r3, [r7, #31]
 800347e:	e007      	b.n	8003490 <UART_SetConfig+0x348>
 8003480:	2308      	movs	r3, #8
 8003482:	77fb      	strb	r3, [r7, #31]
 8003484:	e004      	b.n	8003490 <UART_SetConfig+0x348>
 8003486:	2310      	movs	r3, #16
 8003488:	77fb      	strb	r3, [r7, #31]
 800348a:	e001      	b.n	8003490 <UART_SetConfig+0x348>
 800348c:	2310      	movs	r3, #16
 800348e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	d15b      	bne.n	8003552 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800349a:	7ffb      	ldrb	r3, [r7, #31]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d828      	bhi.n	80034f2 <UART_SetConfig+0x3aa>
 80034a0:	a201      	add	r2, pc, #4	; (adr r2, 80034a8 <UART_SetConfig+0x360>)
 80034a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a6:	bf00      	nop
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034d5 	.word	0x080034d5
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034f3 	.word	0x080034f3
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	080034f3 	.word	0x080034f3
 80034c0:	080034f3 	.word	0x080034f3
 80034c4:	080034f3 	.word	0x080034f3
 80034c8:	080034eb 	.word	0x080034eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034cc:	f7ff f99e 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 80034d0:	61b8      	str	r0, [r7, #24]
        break;
 80034d2:	e013      	b.n	80034fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7ff f9ae 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 80034d8:	61b8      	str	r0, [r7, #24]
        break;
 80034da:	e00f      	b.n	80034fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <UART_SetConfig+0x4c4>)
 80034de:	61bb      	str	r3, [r7, #24]
        break;
 80034e0:	e00c      	b.n	80034fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e2:	f7ff f881 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80034e6:	61b8      	str	r0, [r7, #24]
        break;
 80034e8:	e008      	b.n	80034fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ee:	61bb      	str	r3, [r7, #24]
        break;
 80034f0:	e004      	b.n	80034fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77bb      	strb	r3, [r7, #30]
        break;
 80034fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d074      	beq.n	80035ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	005a      	lsls	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	085b      	lsrs	r3, r3, #1
 800350c:	441a      	add	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	fbb2 f3f3 	udiv	r3, r2, r3
 8003516:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d916      	bls.n	800354c <UART_SetConfig+0x404>
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d212      	bcs.n	800354c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	b29b      	uxth	r3, r3
 800352a:	f023 030f 	bic.w	r3, r3, #15
 800352e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	b29b      	uxth	r3, r3
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	b29a      	uxth	r2, r3
 800353c:	89fb      	ldrh	r3, [r7, #14]
 800353e:	4313      	orrs	r3, r2
 8003540:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	89fa      	ldrh	r2, [r7, #14]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	e04f      	b.n	80035ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	77bb      	strb	r3, [r7, #30]
 8003550:	e04c      	b.n	80035ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003552:	7ffb      	ldrb	r3, [r7, #31]
 8003554:	2b08      	cmp	r3, #8
 8003556:	d828      	bhi.n	80035aa <UART_SetConfig+0x462>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <UART_SetConfig+0x418>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003585 	.word	0x08003585
 8003564:	0800358d 	.word	0x0800358d
 8003568:	08003595 	.word	0x08003595
 800356c:	080035ab 	.word	0x080035ab
 8003570:	0800359b 	.word	0x0800359b
 8003574:	080035ab 	.word	0x080035ab
 8003578:	080035ab 	.word	0x080035ab
 800357c:	080035ab 	.word	0x080035ab
 8003580:	080035a3 	.word	0x080035a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003584:	f7ff f942 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8003588:	61b8      	str	r0, [r7, #24]
        break;
 800358a:	e013      	b.n	80035b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800358c:	f7ff f952 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8003590:	61b8      	str	r0, [r7, #24]
        break;
 8003592:	e00f      	b.n	80035b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003594:	4b1d      	ldr	r3, [pc, #116]	; (800360c <UART_SetConfig+0x4c4>)
 8003596:	61bb      	str	r3, [r7, #24]
        break;
 8003598:	e00c      	b.n	80035b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800359a:	f7ff f825 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 800359e:	61b8      	str	r0, [r7, #24]
        break;
 80035a0:	e008      	b.n	80035b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a6:	61bb      	str	r3, [r7, #24]
        break;
 80035a8:	e004      	b.n	80035b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	77bb      	strb	r3, [r7, #30]
        break;
 80035b2:	bf00      	nop
    }

    if (pclk != 0U)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d018      	beq.n	80035ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	085a      	lsrs	r2, r3, #1
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	2b0f      	cmp	r3, #15
 80035d2:	d909      	bls.n	80035e8 <UART_SetConfig+0x4a0>
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d205      	bcs.n	80035e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	b29a      	uxth	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	60da      	str	r2, [r3, #12]
 80035e6:	e001      	b.n	80035ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80035f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40007c00 	.word	0x40007c00
 8003608:	40023800 	.word	0x40023800
 800360c:	00f42400 	.word	0x00f42400

08003610 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00a      	beq.n	800367e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00a      	beq.n	80036a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00a      	beq.n	80036e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01a      	beq.n	8003726 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370e:	d10a      	bne.n	8003726 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  }
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003764:	f7fd fb6c 	bl	8000e40 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b08      	cmp	r3, #8
 8003776:	d10e      	bne.n	8003796 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003778:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f831 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e027      	b.n	80037e6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0304 	and.w	r3, r3, #4
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d10e      	bne.n	80037c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f81b 	bl	80037ee <UART_WaitOnFlagUntilTimeout>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e011      	b.n	80037e6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2220      	movs	r2, #32
 80037c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b09c      	sub	sp, #112	; 0x70
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037fe:	e0a7      	b.n	8003950 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003800:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003806:	f000 80a3 	beq.w	8003950 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fd fb19 	bl	8000e40 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <UART_WaitOnFlagUntilTimeout+0x32>
 800381a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381c:	2b00      	cmp	r3, #0
 800381e:	d13f      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	e853 3f00 	ldrex	r3, [r3]
 800382c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800382e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003830:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003834:	667b      	str	r3, [r7, #100]	; 0x64
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800383e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003840:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003844:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003846:	e841 2300 	strex	r3, r2, [r1]
 800384a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1e6      	bne.n	8003820 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	3308      	adds	r3, #8
 8003858:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	663b      	str	r3, [r7, #96]	; 0x60
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3308      	adds	r3, #8
 8003870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003872:	64ba      	str	r2, [r7, #72]	; 0x48
 8003874:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003878:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1e5      	bne.n	8003852 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e068      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d050      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038bc:	d148      	bne.n	8003950 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	461a      	mov	r2, r3
 80038e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e6:	637b      	str	r3, [r7, #52]	; 0x34
 80038e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e6      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	e853 3f00 	ldrex	r3, [r3]
 8003908:	613b      	str	r3, [r7, #16]
   return(result);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3308      	adds	r3, #8
 8003918:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800391a:	623a      	str	r2, [r7, #32]
 800391c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391e:	69f9      	ldr	r1, [r7, #28]
 8003920:	6a3a      	ldr	r2, [r7, #32]
 8003922:	e841 2300 	strex	r3, r2, [r1]
 8003926:	61bb      	str	r3, [r7, #24]
   return(result);
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1e5      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e010      	b.n	8003972 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	429a      	cmp	r2, r3
 800395e:	bf0c      	ite	eq
 8003960:	2301      	moveq	r3, #1
 8003962:	2300      	movne	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	461a      	mov	r2, r3
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	429a      	cmp	r2, r3
 800396c:	f43f af48 	beq.w	8003800 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3770      	adds	r7, #112	; 0x70
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800397c:	b084      	sub	sp, #16
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	f107 001c 	add.w	r0, r7, #28
 800398a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d120      	bne.n	80039d6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b20      	ldr	r3, [pc, #128]	; (8003a28 <USB_CoreInit+0xac>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa96 	bl	8003efc <USB_CoreReset>
 80039d0:	4603      	mov	r3, r0
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	e010      	b.n	80039f8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa8a 	bl	8003efc <USB_CoreReset>
 80039e8:	4603      	mov	r3, r0
 80039ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10b      	bne.n	8003a16 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f043 0206 	orr.w	r2, r3, #6
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a22:	b004      	add	sp, #16
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	ffbdffbf 	.word	0xffbdffbf

08003a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 0201 	bic.w	r2, r3, #1
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d115      	bne.n	8003a9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f7fd f9eb 	bl	8000e58 <HAL_Delay>
      ms++;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fa29 	bl	8003ee0 <USB_GetMode>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d01e      	beq.n	8003ad2 <USB_SetCurrentMode+0x84>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b31      	cmp	r3, #49	; 0x31
 8003a98:	d9f0      	bls.n	8003a7c <USB_SetCurrentMode+0x2e>
 8003a9a:	e01a      	b.n	8003ad2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d115      	bne.n	8003ace <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aae:	2001      	movs	r0, #1
 8003ab0:	f7fd f9d2 	bl	8000e58 <HAL_Delay>
      ms++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa10 	bl	8003ee0 <USB_GetMode>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <USB_SetCurrentMode+0x84>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2b31      	cmp	r3, #49	; 0x31
 8003aca:	d9f0      	bls.n	8003aae <USB_SetCurrentMode+0x60>
 8003acc:	e001      	b.n	8003ad2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e005      	b.n	8003ade <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2b32      	cmp	r3, #50	; 0x32
 8003ad6:	d101      	bne.n	8003adc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae8:	b084      	sub	sp, #16
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b02:	2300      	movs	r3, #0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e009      	b.n	8003b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	3340      	adds	r3, #64	; 0x40
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	2200      	movs	r2, #0
 8003b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	3301      	adds	r3, #1
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b0e      	cmp	r3, #14
 8003b20:	d9f2      	bls.n	8003b08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11c      	bne.n	8003b62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b36:	f043 0302 	orr.w	r3, r3, #2
 8003b3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e005      	b.n	8003b6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b80:	4619      	mov	r1, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b88:	461a      	mov	r2, r3
 8003b8a:	680b      	ldr	r3, [r1, #0]
 8003b8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10c      	bne.n	8003bae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f965 	bl	8003e6c <USB_SetDevSpeed>
 8003ba2:	e008      	b.n	8003bb6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f960 	bl	8003e6c <USB_SetDevSpeed>
 8003bac:	e003      	b.n	8003bb6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003bae:	2103      	movs	r1, #3
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f95b 	bl	8003e6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003bb6:	2110      	movs	r1, #16
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f8f3 	bl	8003da4 <USB_FlushTxFifo>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f91f 	bl	8003e0c <USB_FlushRxFifo>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bde:	461a      	mov	r2, r3
 8003be0:	2300      	movs	r3, #0
 8003be2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bea:	461a      	mov	r2, r3
 8003bec:	2300      	movs	r3, #0
 8003bee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e043      	b.n	8003c8a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c18:	d118      	bne.n	8003c4c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e013      	b.n	8003c5e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c42:	461a      	mov	r2, r3
 8003c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e008      	b.n	8003c5e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3301      	adds	r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3b7      	bcc.n	8003c02 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c92:	2300      	movs	r3, #0
 8003c94:	613b      	str	r3, [r7, #16]
 8003c96:	e043      	b.n	8003d20 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cae:	d118      	bne.n	8003ce2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e013      	b.n	8003cf4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e008      	b.n	8003cf4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d00:	461a      	mov	r2, r3
 8003d02:	2300      	movs	r3, #0
 8003d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	461a      	mov	r2, r3
 8003d14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d3b7      	bcc.n	8003c98 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f043 0210 	orr.w	r2, r3, #16
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	4b0e      	ldr	r3, [pc, #56]	; (8003d9c <USB_DevInit+0x2b4>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d005      	beq.n	8003d7a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f043 0208 	orr.w	r2, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <USB_DevInit+0x2b8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d98:	b004      	add	sp, #16
 8003d9a:	4770      	bx	lr
 8003d9c:	803c3800 	.word	0x803c3800
 8003da0:	40000004 	.word	0x40000004

08003da4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a13      	ldr	r2, [pc, #76]	; (8003e08 <USB_FlushTxFifo+0x64>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e01b      	b.n	8003dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	daf2      	bge.n	8003db2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	019b      	lsls	r3, r3, #6
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <USB_FlushTxFifo+0x64>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e006      	b.n	8003dfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0320 	and.w	r3, r3, #32
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d0f0      	beq.n	8003ddc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	00030d40 	.word	0x00030d40

08003e0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4a11      	ldr	r2, [pc, #68]	; (8003e68 <USB_FlushRxFifo+0x5c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e018      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	daf2      	bge.n	8003e18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4a08      	ldr	r2, [pc, #32]	; (8003e68 <USB_FlushRxFifo+0x5c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e006      	b.n	8003e5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0310 	and.w	r3, r3, #16
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d0f0      	beq.n	8003e3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	00030d40 	.word	0x00030d40

08003e6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003eb8:	f023 0303 	bic.w	r3, r3, #3
 8003ebc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0301 	and.w	r3, r3, #1
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <USB_CoreReset+0x64>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e01b      	b.n	8003f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	daf2      	bge.n	8003f08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <USB_CoreReset+0x64>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e006      	b.n	8003f52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d0f0      	beq.n	8003f32 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	00030d40 	.word	0x00030d40

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	4d0d      	ldr	r5, [pc, #52]	; (8003f9c <__libc_init_array+0x38>)
 8003f68:	4c0d      	ldr	r4, [pc, #52]	; (8003fa0 <__libc_init_array+0x3c>)
 8003f6a:	1b64      	subs	r4, r4, r5
 8003f6c:	10a4      	asrs	r4, r4, #2
 8003f6e:	2600      	movs	r6, #0
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	4d0b      	ldr	r5, [pc, #44]	; (8003fa4 <__libc_init_array+0x40>)
 8003f76:	4c0c      	ldr	r4, [pc, #48]	; (8003fa8 <__libc_init_array+0x44>)
 8003f78:	f000 f820 	bl	8003fbc <_init>
 8003f7c:	1b64      	subs	r4, r4, r5
 8003f7e:	10a4      	asrs	r4, r4, #2
 8003f80:	2600      	movs	r6, #0
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	08003ff4 	.word	0x08003ff4
 8003fa0:	08003ff4 	.word	0x08003ff4
 8003fa4:	08003ff4 	.word	0x08003ff4
 8003fa8:	08003ff8 	.word	0x08003ff8

08003fac <memset>:
 8003fac:	4402      	add	r2, r0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <_init>:
 8003fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fbe:	bf00      	nop
 8003fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fc2:	bc08      	pop	{r3}
 8003fc4:	469e      	mov	lr, r3
 8003fc6:	4770      	bx	lr

08003fc8 <_fini>:
 8003fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fca:	bf00      	nop
 8003fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fce:	bc08      	pop	{r3}
 8003fd0:	469e      	mov	lr, r3
 8003fd2:	4770      	bx	lr
