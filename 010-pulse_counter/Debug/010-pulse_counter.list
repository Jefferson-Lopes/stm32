
010-pulse_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d74  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fcc  08004fcc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004fcc  08004fcc  00014fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd4  08004fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000070  0800504c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  0800504c  00020260  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fea3  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3f  00000000  00000000  0002ff41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280bf  00000000  00000000  000337d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010161  00000000  00000000  0005b897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbf96  00000000  00000000  0006b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016798e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cbc  00000000  00000000  001679e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004f5c 	.word	0x08004f5c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004f5c 	.word	0x08004f5c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005fa:	f000 fe4c 	bl	8001296 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005fe:	f000 f86d 	bl	80006dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000602:	f000 faeb 	bl	8000bdc <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000606:	f000 fab9 	bl	8000b7c <MX_USART3_UART_Init>
	MX_TIM4_Init();
 800060a:	f000 f9c7 	bl	800099c <MX_TIM4_Init>
	MX_TIM2_Init();
 800060e:	f000 f8d7 	bl	80007c0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000612:	f000 f94b 	bl	80008ac <MX_TIM3_Init>
	MX_TIM5_Init();
 8000616:	f000 fa39 	bl	8000a8c <MX_TIM5_Init>
	/* USER CODE BEGIN 2 */
	char buffer_usart[32];

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800061a:	210c      	movs	r1, #12
 800061c:	4827      	ldr	r0, [pc, #156]	; (80006bc <main+0xc8>)
 800061e:	f002 fbd9 	bl	8002dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000622:	2108      	movs	r1, #8
 8000624:	4826      	ldr	r0, [pc, #152]	; (80006c0 <main+0xcc>)
 8000626:	f002 fbd5 	bl	8002dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	4825      	ldr	r0, [pc, #148]	; (80006c4 <main+0xd0>)
 800062e:	f002 fbd1 	bl	8002dd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4824      	ldr	r0, [pc, #144]	; (80006c8 <main+0xd4>)
 8000636:	f002 fbcd 	bl	8002dd4 <HAL_TIM_PWM_Start>

	int pulse = 52;
 800063a:	2334      	movs	r3, #52	; 0x34
 800063c:	627b      	str	r3, [r7, #36]	; 0x24

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulse);
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <main+0xc8>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000644:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pulse);
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <main+0xcc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <main+0xd0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, pulse);
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0xd4>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800065c:	635a      	str	r2, [r3, #52]	; 0x34
	/* USER CODE BEGIN WHILE */
	while (1){
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		snprintf(buffer_usart, 16, "Counts: %d\n", counts);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <main+0xd8>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	1d38      	adds	r0, r7, #4
 8000664:	4a1a      	ldr	r2, [pc, #104]	; (80006d0 <main+0xdc>)
 8000666:	2110      	movs	r1, #16
 8000668:	f003 fff6 	bl	8004658 <sniprintf>
		HAL_UART_Transmit(&huart3, buffer_usart, strlen(buffer_usart), 10);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fde6 	bl	8000240 <strlen>
 8000674:	4603      	mov	r3, r0
 8000676:	b29a      	uxth	r2, r3
 8000678:	1d39      	adds	r1, r7, #4
 800067a:	230a      	movs	r3, #10
 800067c:	4815      	ldr	r0, [pc, #84]	; (80006d4 <main+0xe0>)
 800067e:	f003 fb1b 	bl	8003cb8 <HAL_UART_Transmit>
		memset(&buffer_usart[0], 0, sizeof(buffer_usart)); // clear the buffer
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2220      	movs	r2, #32
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f003 ffdd 	bl	8004648 <memset>

		counts = 0;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0xd8>)
 8000690:	2200      	movs	r2, #0
 8000692:	801a      	strh	r2, [r3, #0]

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000694:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <main+0xe4>)
 800069a:	f001 f954 	bl	8001946 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 800069e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a2:	f000 fe55 	bl	8001350 <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006aa:	480b      	ldr	r0, [pc, #44]	; (80006d8 <main+0xe4>)
 80006ac:	f001 f94b 	bl	8001946 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80006b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b4:	f000 fe4c 	bl	8001350 <HAL_Delay>
		snprintf(buffer_usart, 16, "Counts: %d\n", counts);
 80006b8:	e7d1      	b.n	800065e <main+0x6a>
 80006ba:	bf00      	nop
 80006bc:	2000008c 	.word	0x2000008c
 80006c0:	200000d8 	.word	0x200000d8
 80006c4:	20000124 	.word	0x20000124
 80006c8:	20000170 	.word	0x20000170
 80006cc:	20000244 	.word	0x20000244
 80006d0:	08004f74 	.word	0x08004f74
 80006d4:	200001bc 	.word	0x200001bc
 80006d8:	40020400 	.word	0x40020400

080006dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f003 ffac 	bl	8004648 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000700:	f001 f954 	bl	80019ac <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000704:	4b2c      	ldr	r3, [pc, #176]	; (80007b8 <SystemClock_Config+0xdc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a2b      	ldr	r2, [pc, #172]	; (80007b8 <SystemClock_Config+0xdc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b29      	ldr	r3, [pc, #164]	; (80007b8 <SystemClock_Config+0xdc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <SystemClock_Config+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000724:	4a25      	ldr	r2, [pc, #148]	; (80007bc <SystemClock_Config+0xe0>)
 8000726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b23      	ldr	r3, [pc, #140]	; (80007bc <SystemClock_Config+0xe0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800073c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000740:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 800074c:	2304      	movs	r3, #4
 800074e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 96;
 8000750:	2360      	movs	r3, #96	; 0x60
 8000752:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800075c:	2302      	movs	r3, #2
 800075e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f981 	bl	8001a6c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8000770:	f000 fb62 	bl	8000e38 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000774:	f001 f92a 	bl	80019cc <HAL_PWREx_EnableOverDrive>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800077e:	f000 fb5b 	bl	8000e38 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2302      	movs	r3, #2
 8000788:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2103      	movs	r1, #3
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fc12 	bl	8001fc8 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xd2>
	{
		Error_Handler();
 80007aa:	f000 fb45 	bl	8000e38 <Error_Handler>
	}
}
 80007ae:	bf00      	nop
 80007b0:	3750      	adds	r7, #80	; 0x50
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000

080007c0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08e      	sub	sp, #56	; 0x38
 80007c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	463b      	mov	r3, r7
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_TIM2_Init+0xe8>)
 80007f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 128;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM2_Init+0xe8>)
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1023;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000808:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800080c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800081c:	f002 fa22 	bl	8002c64 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000826:	f000 fb07 	bl	8000e38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000838:	f002 fcda 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000842:	f000 faf9 	bl	8000e38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000846:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000848:	f002 fa63 	bl	8002d12 <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000852:	f000 faf1 	bl	8000e38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	; (80008a8 <MX_TIM2_Init+0xe8>)
 8000866:	f003 f94b 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000870:	f000 fae2 	bl	8000e38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	220c      	movs	r2, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800088c:	f002 fb9c 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8000896:	f000 facf 	bl	8000e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM2_Init+0xe8>)
 800089c:	f000 fb50 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000008c 	.word	0x2000008c

080008ac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
 80008da:	615a      	str	r2, [r3, #20]
 80008dc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80008de:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008e0:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <MX_TIM3_Init+0xec>)
 80008e2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 256;
 80008e4:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008ea:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1023;
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008f4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80008f8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b26      	ldr	r3, [pc, #152]	; (8000994 <MX_TIM3_Init+0xe8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000906:	4823      	ldr	r0, [pc, #140]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000908:	f002 f9ac 	bl	8002c64 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM3_Init+0x6a>
	{
		Error_Handler();
 8000912:	f000 fa91 	bl	8000e38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000920:	4619      	mov	r1, r3
 8000922:	481c      	ldr	r0, [pc, #112]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000924:	f002 fc64 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x86>
	{
		Error_Handler();
 800092e:	f000 fa83 	bl	8000e38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000932:	4818      	ldr	r0, [pc, #96]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000934:	f002 f9ed 	bl	8002d12 <HAL_TIM_PWM_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x96>
	{
		Error_Handler();
 800093e:	f000 fa7b 	bl	8000e38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4810      	ldr	r0, [pc, #64]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000952:	f003 f8d5 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xb4>
	{
		Error_Handler();
 800095c:	f000 fa6c 	bl	8000e38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	2360      	movs	r3, #96	; 0x60
 8000962:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2208      	movs	r2, #8
 8000974:	4619      	mov	r1, r3
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000978:	f002 fb26 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8000982:	f000 fa59 	bl	8000e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000986:	4803      	ldr	r0, [pc, #12]	; (8000994 <MX_TIM3_Init+0xe8>)
 8000988:	f000 fada 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200000d8 	.word	0x200000d8
 8000998:	40000400 	.word	0x40000400

0800099c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08e      	sub	sp, #56	; 0x38
 80009a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]
 80009cc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009d0:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <MX_TIM4_Init+0xec>)
 80009d2:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 1024;
 80009d4:	4b2b      	ldr	r3, [pc, #172]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009da:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1023;
 80009e2:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009e8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b26      	ldr	r3, [pc, #152]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <MX_TIM4_Init+0xe8>)
 80009f8:	f002 f934 	bl	8002c64 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x6a>
	{
		Error_Handler();
 8000a02:	f000 fa19 	bl	8000e38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481c      	ldr	r0, [pc, #112]	; (8000a84 <MX_TIM4_Init+0xe8>)
 8000a14:	f002 fbec 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0x86>
	{
		Error_Handler();
 8000a1e:	f000 fa0b 	bl	8000e38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a22:	4818      	ldr	r0, [pc, #96]	; (8000a84 <MX_TIM4_Init+0xe8>)
 8000a24:	f002 f975 	bl	8002d12 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0x96>
	{
		Error_Handler();
 8000a2e:	f000 fa03 	bl	8000e38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4810      	ldr	r0, [pc, #64]	; (8000a84 <MX_TIM4_Init+0xe8>)
 8000a42:	f003 f85d 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0xb4>
	{
		Error_Handler();
 8000a4c:	f000 f9f4 	bl	8000e38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a60:	463b      	mov	r3, r7
 8000a62:	2200      	movs	r2, #0
 8000a64:	4619      	mov	r1, r3
 8000a66:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM4_Init+0xe8>)
 8000a68:	f002 faae 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0xda>
	{
		Error_Handler();
 8000a72:	f000 f9e1 	bl	8000e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000a76:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM4_Init+0xe8>)
 8000a78:	f000 fa62 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000a7c:	bf00      	nop
 8000a7e:	3738      	adds	r7, #56	; 0x38
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000124 	.word	0x20000124
 8000a88:	40000800 	.word	0x40000800

08000a8c <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	; (8000b78 <MX_TIM5_Init+0xec>)
 8000ac2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 512;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aca:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 1023;
 8000ad2:	4b28      	ldr	r3, [pc, #160]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ad4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000ad8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ae6:	4823      	ldr	r0, [pc, #140]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000ae8:	f002 f8bc 	bl	8002c64 <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM5_Init+0x6a>
	{
		Error_Handler();
 8000af2:	f000 f9a1 	bl	8000e38 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b00:	4619      	mov	r1, r3
 8000b02:	481c      	ldr	r0, [pc, #112]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000b04:	f002 fb74 	bl	80031f0 <HAL_TIM_ConfigClockSource>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM5_Init+0x86>
	{
		Error_Handler();
 8000b0e:	f000 f993 	bl	8000e38 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b12:	4818      	ldr	r0, [pc, #96]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000b14:	f002 f8fd 	bl	8002d12 <HAL_TIM_PWM_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM5_Init+0x96>
	{
		Error_Handler();
 8000b1e:	f000 f98b 	bl	8000e38 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4810      	ldr	r0, [pc, #64]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000b32:	f002 ffe5 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM5_Init+0xb4>
	{
		Error_Handler();
 8000b3c:	f000 f97c 	bl	8000e38 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b40:	2360      	movs	r3, #96	; 0x60
 8000b42:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	2200      	movs	r2, #0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4807      	ldr	r0, [pc, #28]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000b58:	f002 fa36 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM5_Init+0xda>
	{
		Error_Handler();
 8000b62:	f000 f969 	bl	8000e38 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8000b66:	4803      	ldr	r0, [pc, #12]	; (8000b74 <MX_TIM5_Init+0xe8>)
 8000b68:	f000 f9ea 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000b6c:	bf00      	nop
 8000b6e:	3738      	adds	r7, #56	; 0x38
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000170 	.word	0x20000170
 8000b78:	40000c00 	.word	0x40000c00

08000b7c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART3_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART3_UART_Init+0x58>)
 8000bc0:	f003 f82c 	bl	8003c1c <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 8000bca:	f000 f935 	bl	8000e38 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200001bc 	.word	0x200001bc
 8000bd8:	40004800 	.word	0x40004800

08000bdc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b81      	ldr	r3, [pc, #516]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a80      	ldr	r2, [pc, #512]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b7e      	ldr	r3, [pc, #504]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b7b      	ldr	r3, [pc, #492]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a7a      	ldr	r2, [pc, #488]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b78      	ldr	r3, [pc, #480]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b75      	ldr	r3, [pc, #468]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b72      	ldr	r3, [pc, #456]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b6f      	ldr	r3, [pc, #444]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a6e      	ldr	r2, [pc, #440]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b6c      	ldr	r3, [pc, #432]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c52:	4b69      	ldr	r3, [pc, #420]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a68      	ldr	r2, [pc, #416]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c58:	f043 0320 	orr.w	r3, r3, #32
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b66      	ldr	r3, [pc, #408]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b63      	ldr	r3, [pc, #396]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a62      	ldr	r2, [pc, #392]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c70:	f043 0308 	orr.w	r3, r3, #8
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b60      	ldr	r3, [pc, #384]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b5d      	ldr	r3, [pc, #372]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a5c      	ldr	r2, [pc, #368]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b5a      	ldr	r3, [pc, #360]	; (8000df8 <MX_GPIO_Init+0x21c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ca0:	4856      	ldr	r0, [pc, #344]	; (8000dfc <MX_GPIO_Init+0x220>)
 8000ca2:	f000 fe37 	bl	8001914 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2140      	movs	r1, #64	; 0x40
 8000caa:	4855      	ldr	r0, [pc, #340]	; (8000e00 <MX_GPIO_Init+0x224>)
 8000cac:	f000 fe32 	bl	8001914 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cb0:	2332      	movs	r3, #50	; 0x32
 8000cb2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	484e      	ldr	r0, [pc, #312]	; (8000e04 <MX_GPIO_Init+0x228>)
 8000ccc:	f000 fc76 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000cd0:	2386      	movs	r3, #134	; 0x86
 8000cd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce0:	230b      	movs	r3, #11
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4847      	ldr	r0, [pc, #284]	; (8000e08 <MX_GPIO_Init+0x22c>)
 8000cec:	f000 fc66 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pin : ENCODER_Pin */
	GPIO_InitStruct.Pin = ENCODER_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cfa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	4841      	ldr	r0, [pc, #260]	; (8000e0c <MX_GPIO_Init+0x230>)
 8000d08:	f000 fc58 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 031c 	add.w	r3, r7, #28
 8000d26:	4619      	mov	r1, r3
 8000d28:	4834      	ldr	r0, [pc, #208]	; (8000dfc <MX_GPIO_Init+0x220>)
 8000d2a:	f000 fc47 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000d2e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000d32:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	4619      	mov	r1, r3
 8000d46:	482d      	ldr	r0, [pc, #180]	; (8000dfc <MX_GPIO_Init+0x220>)
 8000d48:	f000 fc38 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d4c:	2340      	movs	r3, #64	; 0x40
 8000d4e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4827      	ldr	r0, [pc, #156]	; (8000e00 <MX_GPIO_Init+0x224>)
 8000d64:	f000 fc2a 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d74:	f107 031c 	add.w	r3, r7, #28
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4821      	ldr	r0, [pc, #132]	; (8000e00 <MX_GPIO_Init+0x224>)
 8000d7c:	f000 fc1e 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d80:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d92:	230a      	movs	r3, #10
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	481a      	ldr	r0, [pc, #104]	; (8000e08 <MX_GPIO_Init+0x22c>)
 8000d9e:	f000 fc0d 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da8:	2300      	movs	r3, #0
 8000daa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 031c 	add.w	r3, r7, #28
 8000db4:	4619      	mov	r1, r3
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_GPIO_Init+0x22c>)
 8000db8:	f000 fc00 	bl	80015bc <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dc0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dce:	230b      	movs	r3, #11
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4809      	ldr	r0, [pc, #36]	; (8000e00 <MX_GPIO_Init+0x224>)
 8000dda:	f000 fbef 	bl	80015bc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2100      	movs	r1, #0
 8000de2:	2028      	movs	r0, #40	; 0x28
 8000de4:	f000 fbb3 	bl	800154e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de8:	2028      	movs	r0, #40	; 0x28
 8000dea:	f000 fbcc 	bl	8001586 <HAL_NVIC_EnableIRQ>

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020400 	.word	0x40020400
 8000e00:	40021800 	.word	0x40021800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40021400 	.word	0x40021400

08000e10 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	80fb      	strh	r3, [r7, #6]
	counts++;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e24:	801a      	strh	r2, [r3, #0]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000244 	.word	0x20000244

08000e38 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e3c:	b672      	cpsid	i
}
 8000e3e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000e40:	e7fe      	b.n	8000e40 <Error_Handler+0x8>
	...

08000e44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_MspInit+0x44>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x44>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x44>)
 8000e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9c:	d10c      	bne.n	8000eb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e9e:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a23      	ldr	r2, [pc, #140]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000eb6:	e034      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <HAL_TIM_Base_MspInit+0xa8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d10c      	bne.n	8000edc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
}
 8000eda:	e022      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM4)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <HAL_TIM_Base_MspInit+0xac>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d10c      	bne.n	8000f00 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ee6:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
}
 8000efe:	e010      	b.n	8000f22 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_TIM_Base_MspInit+0xb0>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10b      	bne.n	8000f22 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a08      	ldr	r2, [pc, #32]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_TIM_Base_MspInit+0xa4>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
}
 8000f22:	bf00      	nop
 8000f24:	371c      	adds	r7, #28
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800
 8000f3c:	40000c00 	.word	0x40000c00

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 031c 	add.w	r3, r7, #28
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f60:	d11d      	bne.n	8000f9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b44      	ldr	r3, [pc, #272]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a43      	ldr	r2, [pc, #268]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000f68:	f043 0302 	orr.w	r3, r3, #2
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b41      	ldr	r3, [pc, #260]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4838      	ldr	r0, [pc, #224]	; (8001078 <HAL_TIM_MspPostInit+0x138>)
 8000f98:	f000 fb10 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f9c:	e065      	b.n	800106a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a36      	ldr	r2, [pc, #216]	; (800107c <HAL_TIM_MspPostInit+0x13c>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d11c      	bne.n	8000fe2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4827      	ldr	r0, [pc, #156]	; (8001078 <HAL_TIM_MspPostInit+0x138>)
 8000fdc:	f000 faee 	bl	80015bc <HAL_GPIO_Init>
}
 8000fe0:	e043      	b.n	800106a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a26      	ldr	r2, [pc, #152]	; (8001080 <HAL_TIM_MspPostInit+0x140>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d11d      	bne.n	8001028 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	4a20      	ldr	r2, [pc, #128]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000ff2:	f043 0308 	orr.w	r3, r3, #8
 8000ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff8:	4b1e      	ldr	r3, [pc, #120]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8000ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001016:	2302      	movs	r3, #2
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <HAL_TIM_MspPostInit+0x144>)
 8001022:	f000 facb 	bl	80015bc <HAL_GPIO_Init>
}
 8001026:	e020      	b.n	800106a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM5)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a16      	ldr	r2, [pc, #88]	; (8001088 <HAL_TIM_MspPostInit+0x148>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d11b      	bne.n	800106a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a0f      	ldr	r2, [pc, #60]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0d      	ldr	r3, [pc, #52]	; (8001074 <HAL_TIM_MspPostInit+0x134>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800104a:	2301      	movs	r3, #1
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800105a:	2302      	movs	r3, #2
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_TIM_MspPostInit+0x14c>)
 8001066:	f000 faa9 	bl	80015bc <HAL_GPIO_Init>
}
 800106a:	bf00      	nop
 800106c:	3730      	adds	r7, #48	; 0x30
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400
 800107c:	40000400 	.word	0x40000400
 8001080:	40000800 	.word	0x40000800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40000c00 	.word	0x40000c00
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ae      	sub	sp, #184	; 0xb8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2290      	movs	r2, #144	; 0x90
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fac9 	bl	8004648 <memset>
  if(huart->Instance==USART3)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_UART_MspInit+0xb4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d13c      	bne.n	800113a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f9a0 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010da:	f7ff fead 	bl	8000e38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <HAL_UART_MspInit+0xb8>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <HAL_UART_MspInit+0xb8>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_UART_MspInit+0xb8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_UART_MspInit+0xb8>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <HAL_UART_MspInit+0xb8>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_UART_MspInit+0xb8>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800110e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001128:	2307      	movs	r3, #7
 800112a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_UART_MspInit+0xbc>)
 8001136:	f000 fa41 	bl	80015bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800113a:	bf00      	nop
 800113c:	37b8      	adds	r7, #184	; 0xb8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40004800 	.word	0x40004800
 8001148:	40023800 	.word	0x40023800
 800114c:	40020c00 	.word	0x40020c00

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f8b8 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_Pin);
 80011a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ac:	f000 fbe6 	bl	800197c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_sbrk>:
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
 80011e4:	f003 fa06 	bl	80045f4 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20080000 	.word	0x20080000
 8001214:	00000400 	.word	0x00000400
 8001218:	20000248 	.word	0x20000248
 800121c:	20000260 	.word	0x20000260

08001220 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
 800124e:	2300      	movs	r3, #0
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:
 8001252:	58d4      	ldr	r4, [r2, r3]
 8001254:	50c4      	str	r4, [r0, r3]
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:
 8001258:	18c4      	adds	r4, r0, r3
 800125a:	428c      	cmp	r4, r1
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
 8001262:	2300      	movs	r3, #0
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:
 800126a:	42a2      	cmp	r2, r4
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
 8001272:	f003 f9c5 	bl	8004600 <__libc_init_array>
 8001276:	f7ff f9bd 	bl	80005f4 <main>
 800127a:	4770      	bx	lr
 800127c:	20080000 	.word	0x20080000
 8001280:	20000000 	.word	0x20000000
 8001284:	20000070 	.word	0x20000070
 8001288:	08004fdc 	.word	0x08004fdc
 800128c:	20000070 	.word	0x20000070
 8001290:	20000260 	.word	0x20000260

08001294 <ADC_IRQHandler>:
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>

08001296 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129a:	2003      	movs	r0, #3
 800129c:	f000 f94c 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f805 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a6:	f7ff fdcd 	bl	8000e44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f967 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ec:	f000 f92f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	2000024c 	.word	0x2000024c

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000024c 	.word	0x2000024c

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <__NVIC_SetPriorityGrouping+0x40>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	; (80013d8 <__NVIC_SetPriorityGrouping+0x40>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	05fa0000 	.word	0x05fa0000

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	e175      	b.n	80018c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8164 	bne.w	80018c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <HAL_GPIO_Init+0x56>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d130      	bne.n	8001674 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	091b      	lsrs	r3, r3, #4
 800165e:	f003 0201 	and.w	r2, r3, #1
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	2b03      	cmp	r3, #3
 800167e:	d017      	beq.n	80016b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d123      	bne.n	8001704 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	220f      	movs	r2, #15
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691a      	ldr	r2, [r3, #16]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	08da      	lsrs	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	3208      	adds	r2, #8
 80016fe:	69b9      	ldr	r1, [r7, #24]
 8001700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	2203      	movs	r2, #3
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	4013      	ands	r3, r2
 800171a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0203 	and.w	r2, r3, #3
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80be 	beq.w	80018c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001746:	4b66      	ldr	r3, [pc, #408]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a65      	ldr	r2, [pc, #404]	; (80018e0 <HAL_GPIO_Init+0x324>)
 800174c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_GPIO_Init+0x324>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800175e:	4a61      	ldr	r2, [pc, #388]	; (80018e4 <HAL_GPIO_Init+0x328>)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	089b      	lsrs	r3, r3, #2
 8001764:	3302      	adds	r3, #2
 8001766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	220f      	movs	r2, #15
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a58      	ldr	r2, [pc, #352]	; (80018e8 <HAL_GPIO_Init+0x32c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d037      	beq.n	80017fa <HAL_GPIO_Init+0x23e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a57      	ldr	r2, [pc, #348]	; (80018ec <HAL_GPIO_Init+0x330>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d031      	beq.n	80017f6 <HAL_GPIO_Init+0x23a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a56      	ldr	r2, [pc, #344]	; (80018f0 <HAL_GPIO_Init+0x334>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d02b      	beq.n	80017f2 <HAL_GPIO_Init+0x236>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a55      	ldr	r2, [pc, #340]	; (80018f4 <HAL_GPIO_Init+0x338>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d025      	beq.n	80017ee <HAL_GPIO_Init+0x232>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a54      	ldr	r2, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x33c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_Init+0x22e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a53      	ldr	r2, [pc, #332]	; (80018fc <HAL_GPIO_Init+0x340>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_Init+0x22a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_GPIO_Init+0x344>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x226>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a51      	ldr	r2, [pc, #324]	; (8001904 <HAL_GPIO_Init+0x348>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x222>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a50      	ldr	r2, [pc, #320]	; (8001908 <HAL_GPIO_Init+0x34c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x21e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4f      	ldr	r2, [pc, #316]	; (800190c <HAL_GPIO_Init+0x350>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x21a>
 80017d2:	2309      	movs	r3, #9
 80017d4:	e012      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017d6:	230a      	movs	r3, #10
 80017d8:	e010      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017da:	2308      	movs	r3, #8
 80017dc:	e00e      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00c      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017e2:	2306      	movs	r3, #6
 80017e4:	e00a      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017e6:	2305      	movs	r3, #5
 80017e8:	e008      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017ea:	2304      	movs	r3, #4
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x240>
 80017fa:	2300      	movs	r3, #0
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f002 0203 	and.w	r2, r2, #3
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	4093      	lsls	r3, r2
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4313      	orrs	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800180c:	4935      	ldr	r1, [pc, #212]	; (80018e4 <HAL_GPIO_Init+0x328>)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <HAL_GPIO_Init+0x354>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800183e:	4a34      	ldr	r2, [pc, #208]	; (8001910 <HAL_GPIO_Init+0x354>)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_GPIO_Init+0x354>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	43db      	mvns	r3, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4013      	ands	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001868:	4a29      	ldr	r2, [pc, #164]	; (8001910 <HAL_GPIO_Init+0x354>)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <HAL_GPIO_Init+0x354>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	43db      	mvns	r3, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4013      	ands	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d003      	beq.n	8001892 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001892:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <HAL_GPIO_Init+0x354>)
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <HAL_GPIO_Init+0x354>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018bc:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_GPIO_Init+0x354>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	2b0f      	cmp	r3, #15
 80018cc:	f67f ae86 	bls.w	80015dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021800 	.word	0x40021800
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40022000 	.word	0x40022000
 800190c:	40022400 	.word	0x40022400
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4013      	ands	r3, r2
 800195e:	041a      	lsls	r2, r3, #16
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	43d9      	mvns	r1, r3
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	400b      	ands	r3, r1
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001988:	695a      	ldr	r2, [r3, #20]
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	4013      	ands	r3, r2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d006      	beq.n	80019a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001998:	88fb      	ldrh	r3, [r7, #6]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fa38 	bl	8000e10 <HAL_GPIO_EXTI_Callback>
  }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a04      	ldr	r2, [pc, #16]	; (80019c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40007000 	.word	0x40007000

080019cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x98>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_PWREx_EnableOverDrive+0x98>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1d      	ldr	r2, [pc, #116]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 80019f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fa:	f7ff fc9d 	bl	8001338 <HAL_GetTick>
 80019fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a00:	e009      	b.n	8001a16 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a02:	f7ff fc99 	bl	8001338 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a10:	d901      	bls.n	8001a16 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e022      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d1ee      	bne.n	8001a02 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a24:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a30:	f7ff fc82 	bl	8001338 <HAL_GetTick>
 8001a34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a36:	e009      	b.n	8001a4c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a38:	f7ff fc7e 	bl	8001338 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a46:	d901      	bls.n	8001a4c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e007      	b.n	8001a5c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a58:	d1ee      	bne.n	8001a38 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000

08001a6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e29b      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 8087 	beq.w	8001b9e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a90:	4b96      	ldr	r3, [pc, #600]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9c:	4b93      	ldr	r3, [pc, #588]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d112      	bne.n	8001ace <HAL_RCC_OscConfig+0x62>
 8001aa8:	4b90      	ldr	r3, [pc, #576]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab4:	d10b      	bne.n	8001ace <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d06c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x130>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d168      	bne.n	8001b9c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e275      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x7a>
 8001ad8:	4b84      	ldr	r3, [pc, #528]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a83      	ldr	r2, [pc, #524]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	e02e      	b.n	8001b44 <HAL_RCC_OscConfig+0xd8>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x9c>
 8001aee:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7e      	ldr	r2, [pc, #504]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7b      	ldr	r2, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e01d      	b.n	8001b44 <HAL_RCC_OscConfig+0xd8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0xc0>
 8001b12:	4b76      	ldr	r3, [pc, #472]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a75      	ldr	r2, [pc, #468]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a72      	ldr	r2, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b28:	6013      	str	r3, [r2, #0]
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0xd8>
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a6b      	ldr	r2, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff fbf4 	bl	8001338 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff fbf0 	bl	8001338 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e229      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b66:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe8>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fbe0 	bl	8001338 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fbdc 	bl	8001338 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e215      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8e:	4b57      	ldr	r3, [pc, #348]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x110>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d069      	beq.n	8001c7e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001baa:	4b50      	ldr	r3, [pc, #320]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bb6:	4b4d      	ldr	r3, [pc, #308]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	d11c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x190>
 8001bc2:	4b4a      	ldr	r3, [pc, #296]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d116      	bne.n	8001bfc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	4b47      	ldr	r3, [pc, #284]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x17a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e1e9      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be6:	4b41      	ldr	r3, [pc, #260]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	493d      	ldr	r1, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	e040      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a38      	ldr	r2, [pc, #224]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb92 	bl	8001338 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff fb8e 	bl	8001338 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1c7      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4929      	ldr	r1, [pc, #164]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
 8001c4a:	e018      	b.n	8001c7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fb6e 	bl	8001338 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c60:	f7ff fb6a 	bl	8001338 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1a3      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c72:	4b1e      	ldr	r3, [pc, #120]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d038      	beq.n	8001cfc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9e:	f7ff fb4b 	bl	8001338 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fb47 	bl	8001338 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e180      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x23a>
 8001cc4:	e01a      	b.n	8001cfc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cca:	4a08      	ldr	r2, [pc, #32]	; (8001cec <HAL_RCC_OscConfig+0x280>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd2:	f7ff fb31 	bl	8001338 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd8:	e00a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff fb2d 	bl	8001338 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d903      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e166      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
 8001cec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b92      	ldr	r3, [pc, #584]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a4 	beq.w	8001e52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0a:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10d      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a88      	ldr	r2, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b86      	ldr	r3, [pc, #536]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d32:	4b83      	ldr	r3, [pc, #524]	; (8001f40 <HAL_RCC_OscConfig+0x4d4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d118      	bne.n	8001d70 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d3e:	4b80      	ldr	r3, [pc, #512]	; (8001f40 <HAL_RCC_OscConfig+0x4d4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7f      	ldr	r2, [pc, #508]	; (8001f40 <HAL_RCC_OscConfig+0x4d4>)
 8001d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff faf5 	bl	8001338 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d52:	f7ff faf1 	bl	8001338 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b64      	cmp	r3, #100	; 0x64
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e12a      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x4d4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d0f0      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x31a>
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a6f      	ldr	r2, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	e02d      	b.n	8001de2 <HAL_RCC_OscConfig+0x376>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x33c>
 8001d8e:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a6a      	ldr	r2, [pc, #424]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9e:	4a67      	ldr	r2, [pc, #412]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001da0:	f023 0304 	bic.w	r3, r3, #4
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
 8001da6:	e01c      	b.n	8001de2 <HAL_RCC_OscConfig+0x376>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x35e>
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a61      	ldr	r2, [pc, #388]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x376>
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a5b      	ldr	r2, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd6:	4b59      	ldr	r3, [pc, #356]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dda:	4a58      	ldr	r2, [pc, #352]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d015      	beq.n	8001e16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7ff faa5 	bl	8001338 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7ff faa1 	bl	8001338 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e0d8      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e08:	4b4c      	ldr	r3, [pc, #304]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0ee      	beq.n	8001df2 <HAL_RCC_OscConfig+0x386>
 8001e14:	e014      	b.n	8001e40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa8f 	bl	8001338 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1c:	e00a      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fa8b 	bl	8001338 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e0c2      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e34:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1ee      	bne.n	8001e1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d105      	bne.n	8001e52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e46:	4b3d      	ldr	r3, [pc, #244]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	4a3c      	ldr	r2, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80ae 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5c:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d06d      	beq.n	8001f44 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d14b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fa5c 	bl	8001338 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff fa58 	bl	8001338 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e091      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b29      	ldr	r3, [pc, #164]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	071b      	lsls	r3, r3, #28
 8001ece:	491b      	ldr	r1, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fa2a 	bl	8001338 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff fa26 	bl	8001338 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e05f      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x47c>
 8001f06:	e057      	b.n	8001fb8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7ff fa10 	bl	8001338 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fa0c 	bl	8001338 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e045      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x4d0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4b0>
 8001f3a:	e03d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x54c>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <HAL_RCC_OscConfig+0x558>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d030      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d122      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f74:	4013      	ands	r3, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d119      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10f      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d107      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0d0      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b6a      	ldr	r3, [pc, #424]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d910      	bls.n	8002010 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b67      	ldr	r3, [pc, #412]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 020f 	bic.w	r2, r3, #15
 8001ff6:	4965      	ldr	r1, [pc, #404]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b63      	ldr	r3, [pc, #396]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0b8      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d020      	beq.n	800205e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a58      	ldr	r2, [pc, #352]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800202e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002032:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002040:	4b53      	ldr	r3, [pc, #332]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800204a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204c:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	494d      	ldr	r1, [pc, #308]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d040      	beq.n	80020ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002072:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e07f      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b41      	ldr	r3, [pc, #260]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e073      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06b      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b39      	ldr	r3, [pc, #228]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4936      	ldr	r1, [pc, #216]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020bc:	f7ff f93c 	bl	8001338 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff f938 	bl	8001338 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e053      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d210      	bcs.n	800211c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 020f 	bic.w	r2, r3, #15
 8002102:	4922      	ldr	r1, [pc, #136]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e032      	b.n	8002182 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4916      	ldr	r1, [pc, #88]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	490e      	ldr	r1, [pc, #56]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800215a:	f000 f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800215e:	4602      	mov	r2, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <HAL_RCC_ClockConfig+0x1cc>)
 800216c:	5ccb      	ldrb	r3, [r1, r3]
 800216e:	fa22 f303 	lsr.w	r3, r2, r3
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1d0>)
 8002174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x1d4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff f898 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40023c00 	.word	0x40023c00
 8002190:	40023800 	.word	0x40023800
 8002194:	08004f80 	.word	0x08004f80
 8002198:	20000000 	.word	0x20000000
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021a4:	b094      	sub	sp, #80	; 0x50
 80021a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
 80021ac:	2300      	movs	r3, #0
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b0:	2300      	movs	r3, #0
 80021b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b8:	4b79      	ldr	r3, [pc, #484]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 030c 	and.w	r3, r3, #12
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d00d      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x40>
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	f200 80e1 	bhi.w	800238c <HAL_RCC_GetSysClockFreq+0x1ec>
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0x3a>
 80021d2:	e0db      	b.n	800238c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b73      	ldr	r3, [pc, #460]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80021d6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021d8:	e0db      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80021dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021de:	e0d8      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e0:	4b6f      	ldr	r3, [pc, #444]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d063      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f6:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	099b      	lsrs	r3, r3, #6
 80021fc:	2200      	movs	r2, #0
 80021fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
 800220a:	2300      	movs	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
 800220e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002212:	4622      	mov	r2, r4
 8002214:	462b      	mov	r3, r5
 8002216:	f04f 0000 	mov.w	r0, #0
 800221a:	f04f 0100 	mov.w	r1, #0
 800221e:	0159      	lsls	r1, r3, #5
 8002220:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002224:	0150      	lsls	r0, r2, #5
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4621      	mov	r1, r4
 800222c:	1a51      	subs	r1, r2, r1
 800222e:	6139      	str	r1, [r7, #16]
 8002230:	4629      	mov	r1, r5
 8002232:	eb63 0301 	sbc.w	r3, r3, r1
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002244:	4659      	mov	r1, fp
 8002246:	018b      	lsls	r3, r1, #6
 8002248:	4651      	mov	r1, sl
 800224a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224e:	4651      	mov	r1, sl
 8002250:	018a      	lsls	r2, r1, #6
 8002252:	4651      	mov	r1, sl
 8002254:	ebb2 0801 	subs.w	r8, r2, r1
 8002258:	4659      	mov	r1, fp
 800225a:	eb63 0901 	sbc.w	r9, r3, r1
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800226a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002272:	4690      	mov	r8, r2
 8002274:	4699      	mov	r9, r3
 8002276:	4623      	mov	r3, r4
 8002278:	eb18 0303 	adds.w	r3, r8, r3
 800227c:	60bb      	str	r3, [r7, #8]
 800227e:	462b      	mov	r3, r5
 8002280:	eb49 0303 	adc.w	r3, r9, r3
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002292:	4629      	mov	r1, r5
 8002294:	024b      	lsls	r3, r1, #9
 8002296:	4621      	mov	r1, r4
 8002298:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800229c:	4621      	mov	r1, r4
 800229e:	024a      	lsls	r2, r1, #9
 80022a0:	4610      	mov	r0, r2
 80022a2:	4619      	mov	r1, r3
 80022a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022a6:	2200      	movs	r2, #0
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022b0:	f7fe f81e 	bl	80002f0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022bc:	e058      	b.n	8002370 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	099b      	lsrs	r3, r3, #6
 80022c4:	2200      	movs	r2, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	4611      	mov	r1, r2
 80022ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ce:	623b      	str	r3, [r7, #32]
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
 80022d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022d8:	4642      	mov	r2, r8
 80022da:	464b      	mov	r3, r9
 80022dc:	f04f 0000 	mov.w	r0, #0
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	0159      	lsls	r1, r3, #5
 80022e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ea:	0150      	lsls	r0, r2, #5
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4641      	mov	r1, r8
 80022f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80022f6:	4649      	mov	r1, r9
 80022f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002308:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800230c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002310:	ebb2 040a 	subs.w	r4, r2, sl
 8002314:	eb63 050b 	sbc.w	r5, r3, fp
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	00eb      	lsls	r3, r5, #3
 8002322:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002326:	00e2      	lsls	r2, r4, #3
 8002328:	4614      	mov	r4, r2
 800232a:	461d      	mov	r5, r3
 800232c:	4643      	mov	r3, r8
 800232e:	18e3      	adds	r3, r4, r3
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	464b      	mov	r3, r9
 8002334:	eb45 0303 	adc.w	r3, r5, r3
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002346:	4629      	mov	r1, r5
 8002348:	028b      	lsls	r3, r1, #10
 800234a:	4621      	mov	r1, r4
 800234c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002350:	4621      	mov	r1, r4
 8002352:	028a      	lsls	r2, r1, #10
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800235a:	2200      	movs	r2, #0
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	61fa      	str	r2, [r7, #28]
 8002360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002364:	f7fd ffc4 	bl	80002f0 <__aeabi_uldivmod>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4613      	mov	r3, r2
 800236e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002370:	4b0b      	ldr	r3, [pc, #44]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002380:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800238a:	e002      	b.n	8002392 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002394:	4618      	mov	r0, r3
 8002396:	3750      	adds	r7, #80	; 0x50
 8002398:	46bd      	mov	sp, r7
 800239a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	00f42400 	.word	0x00f42400
 80023a8:	007a1200 	.word	0x007a1200

080023ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000000 	.word	0x20000000

080023c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023c8:	f7ff fff0 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0a9b      	lsrs	r3, r3, #10
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	; (80023e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08004f90 	.word	0x08004f90

080023ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f0:	f7ff ffdc 	bl	80023ac <HAL_RCC_GetHCLKFreq>
 80023f4:	4602      	mov	r2, r0
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_RCC_GetPCLK2Freq+0x20>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	0b5b      	lsrs	r3, r3, #13
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002402:	5ccb      	ldrb	r3, [r1, r3]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40023800 	.word	0x40023800
 8002410:	08004f90 	.word	0x08004f90

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d012      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800243c:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002442:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002446:	6093      	str	r3, [r2, #8]
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	4964      	ldr	r1, [pc, #400]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d017      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246e:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247c:	4959      	ldr	r1, [pc, #356]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248c:	d101      	bne.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800248e:	2301      	movs	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d017      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024aa:	4b4e      	ldr	r3, [pc, #312]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	494a      	ldr	r1, [pc, #296]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80024d6:	2301      	movs	r3, #1
 80024d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80024e6:	2301      	movs	r3, #1
 80024e8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 808b 	beq.w	800260e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	4a39      	ldr	r2, [pc, #228]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002502:	6413      	str	r3, [r2, #64]	; 0x40
 8002504:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800251c:	f7fe ff0c 	bl	8001338 <HAL_GetTick>
 8002520:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe ff08 	bl	8001338 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e38f      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002536:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d035      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	429a      	cmp	r2, r3
 800255e:	d02e      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002568:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800256a:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257a:	4a1a      	ldr	r2, [pc, #104]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800257c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002580:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b01      	cmp	r3, #1
 8002592:	d114      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe fed0 	bl	8001338 <HAL_GetTick>
 8002598:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	e00a      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800259c:	f7fe fecc 	bl	8001338 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e351      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0ee      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ca:	d111      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025d8:	4b04      	ldr	r3, [pc, #16]	; (80025ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80025da:	400b      	ands	r3, r1
 80025dc:	4901      	ldr	r1, [pc, #4]	; (80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	608b      	str	r3, [r1, #8]
 80025e2:	e00b      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40007000 	.word	0x40007000
 80025ec:	0ffffcff 	.word	0x0ffffcff
 80025f0:	4bac      	ldr	r3, [pc, #688]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4aab      	ldr	r2, [pc, #684]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025fa:	6093      	str	r3, [r2, #8]
 80025fc:	4ba9      	ldr	r3, [pc, #676]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002608:	49a6      	ldr	r1, [pc, #664]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	4313      	orrs	r3, r2
 800260c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800261a:	4ba2      	ldr	r3, [pc, #648]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002620:	4aa0      	ldr	r2, [pc, #640]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002626:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800262a:	4b9e      	ldr	r3, [pc, #632]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	499b      	ldr	r1, [pc, #620]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002648:	4b96      	ldr	r3, [pc, #600]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002656:	4993      	ldr	r1, [pc, #588]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800266a:	4b8e      	ldr	r3, [pc, #568]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002678:	498a      	ldr	r1, [pc, #552]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800268c:	4b85      	ldr	r3, [pc, #532]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269a:	4982      	ldr	r1, [pc, #520]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ae:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026bc:	4979      	ldr	r1, [pc, #484]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d0:	4b74      	ldr	r3, [pc, #464]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4971      	ldr	r1, [pc, #452]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f2:	4b6c      	ldr	r3, [pc, #432]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f023 020c 	bic.w	r2, r3, #12
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	4968      	ldr	r1, [pc, #416]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002714:	4b63      	ldr	r3, [pc, #396]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	4960      	ldr	r1, [pc, #384]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002736:	4b5b      	ldr	r3, [pc, #364]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002744:	4957      	ldr	r1, [pc, #348]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002758:	4b52      	ldr	r3, [pc, #328]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002766:	494f      	ldr	r1, [pc, #316]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800277a:	4b4a      	ldr	r3, [pc, #296]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	4946      	ldr	r1, [pc, #280]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800279c:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	493e      	ldr	r1, [pc, #248]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027cc:	4935      	ldr	r1, [pc, #212]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80027e0:	4b30      	ldr	r3, [pc, #192]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ee:	492d      	ldr	r1, [pc, #180]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d011      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002802:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002810:	4924      	ldr	r1, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002820:	d101      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002842:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	4914      	ldr	r1, [pc, #80]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002874:	490b      	ldr	r1, [pc, #44]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00f      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002898:	4902      	ldr	r1, [pc, #8]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028a0:	e002      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80028b4:	4b8a      	ldr	r3, [pc, #552]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	4986      	ldr	r1, [pc, #536]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80028d8:	4b81      	ldr	r3, [pc, #516]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e8:	497d      	ldr	r1, [pc, #500]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d006      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 80d6 	beq.w	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002904:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800290a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800290e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002910:	f7fe fd12 	bl	8001338 <HAL_GetTick>
 8002914:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002918:	f7fe fd0e 	bl	8001338 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e195      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800292a:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d021      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11d      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002958:	4b61      	ldr	r3, [pc, #388]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295e:	0e1b      	lsrs	r3, r3, #24
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4958      	ldr	r1, [pc, #352]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d02e      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b0:	d129      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029b2:	4b4b      	ldr	r3, [pc, #300]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b8:	0c1b      	lsrs	r3, r3, #16
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029c0:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029c6:	0f1b      	lsrs	r3, r3, #28
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	019a      	lsls	r2, r3, #6
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	493e      	ldr	r1, [pc, #248]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80029ee:	4b3c      	ldr	r3, [pc, #240]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029f4:	f023 021f 	bic.w	r2, r3, #31
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	3b01      	subs	r3, #1
 80029fe:	4938      	ldr	r1, [pc, #224]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01d      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a18:	0e1b      	lsrs	r3, r3, #24
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	0f1b      	lsrs	r3, r3, #28
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	019a      	lsls	r2, r3, #6
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	061b      	lsls	r3, r3, #24
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	071b      	lsls	r3, r3, #28
 8002a46:	4926      	ldr	r1, [pc, #152]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d011      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	019a      	lsls	r2, r3, #6
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	071b      	lsls	r3, r3, #28
 8002a76:	491a      	ldr	r1, [pc, #104]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a17      	ldr	r2, [pc, #92]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a8a:	f7fe fc55 	bl	8001338 <HAL_GetTick>
 8002a8e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a90:	e008      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a92:	f7fe fc51 	bl	8001338 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	2b64      	cmp	r3, #100	; 0x64
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0d8      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002aa4:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0f0      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	f040 80ce 	bne.w	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fc38 	bl	8001338 <HAL_GetTick>
 8002ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002acc:	f7fe fc34 	bl	8001338 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d904      	bls.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e0bb      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af0:	d0ec      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d02e      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12a      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	0c1b      	lsrs	r3, r3, #16
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b28:	4b4d      	ldr	r3, [pc, #308]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	0f1b      	lsrs	r3, r3, #28
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4944      	ldr	r1, [pc, #272]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002b56:	4b42      	ldr	r3, [pc, #264]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	493d      	ldr	r1, [pc, #244]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d022      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b84:	d11d      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	0e1b      	lsrs	r3, r3, #24
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	0f1b      	lsrs	r3, r3, #28
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	019a      	lsls	r2, r3, #6
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	041b      	lsls	r3, r3, #16
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	061b      	lsls	r3, r3, #24
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	071b      	lsls	r3, r3, #28
 8002bba:	4929      	ldr	r1, [pc, #164]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d028      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002bce:	4b24      	ldr	r3, [pc, #144]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	0e1b      	lsrs	r3, r3, #24
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	019a      	lsls	r2, r3, #6
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	041b      	lsls	r3, r3, #16
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	4917      	ldr	r1, [pc, #92]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	4911      	ldr	r1, [pc, #68]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c2c:	f7fe fb84 	bl	8001338 <HAL_GetTick>
 8002c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c34:	f7fe fb80 	bl	8001338 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b64      	cmp	r3, #100	; 0x64
 8002c40:	d901      	bls.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e007      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c52:	d1ef      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e049      	b.n	8002d0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fe f8fe 	bl	8000e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fb6e 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e049      	b.n	8002db8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d106      	bne.n	8002d3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f841 	bl	8002dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 fb17 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <HAL_TIM_PWM_Start+0x24>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e03c      	b.n	8002e72 <HAL_TIM_PWM_Start+0x9e>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d109      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x3e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e02f      	b.n	8002e72 <HAL_TIM_PWM_Start+0x9e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d109      	bne.n	8002e2c <HAL_TIM_PWM_Start+0x58>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	e022      	b.n	8002e72 <HAL_TIM_PWM_Start+0x9e>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d109      	bne.n	8002e46 <HAL_TIM_PWM_Start+0x72>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	bf14      	ite	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	2300      	moveq	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	e015      	b.n	8002e72 <HAL_TIM_PWM_Start+0x9e>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b10      	cmp	r3, #16
 8002e4a:	d109      	bne.n	8002e60 <HAL_TIM_PWM_Start+0x8c>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	bf14      	ite	ne
 8002e58:	2301      	movne	r3, #1
 8002e5a:	2300      	moveq	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	e008      	b.n	8002e72 <HAL_TIM_PWM_Start+0x9e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e092      	b.n	8002fa0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_TIM_PWM_Start+0xb6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e88:	e023      	b.n	8002ed2 <HAL_TIM_PWM_Start+0xfe>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xc6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2202      	movs	r2, #2
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	e01b      	b.n	8002ed2 <HAL_TIM_PWM_Start+0xfe>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Start+0xd6>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea8:	e013      	b.n	8002ed2 <HAL_TIM_PWM_Start+0xfe>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Start+0xe6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb8:	e00b      	b.n	8002ed2 <HAL_TIM_PWM_Start+0xfe>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b10      	cmp	r3, #16
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Start+0xf6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	e003      	b.n	8002ed2 <HAL_TIM_PWM_Start+0xfe>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	6839      	ldr	r1, [r7, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fdea 	bl	8003ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a30      	ldr	r2, [pc, #192]	; (8002fa8 <HAL_TIM_PWM_Start+0x1d4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_TIM_PWM_Start+0x120>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <HAL_TIM_PWM_Start+0x1d8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d101      	bne.n	8002ef8 <HAL_TIM_PWM_Start+0x124>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_PWM_Start+0x126>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a25      	ldr	r2, [pc, #148]	; (8002fa8 <HAL_TIM_PWM_Start+0x1d4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d01d      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <HAL_TIM_PWM_Start+0x1dc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_TIM_PWM_Start+0x1e0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_TIM_PWM_Start+0x1e4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_TIM_PWM_Start+0x1d8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	; (8002fbc <HAL_TIM_PWM_Start+0x1e8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIM_PWM_Start+0x18a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <HAL_TIM_PWM_Start+0x1ec>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d115      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <HAL_TIM_PWM_Start+0x1f0>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b06      	cmp	r3, #6
 8002f6e:	d015      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x1c8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f76:	d011      	beq.n	8002f9c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f042 0201 	orr.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	e008      	b.n	8002f9c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e000      	b.n	8002f9e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40010400 	.word	0x40010400
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40001800 	.word	0x40001800
 8002fc4:	00010007 	.word	0x00010007

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0ff      	b.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b14      	cmp	r3, #20
 8002ff2:	f200 80f0 	bhi.w	80031d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003051 	.word	0x08003051
 8003000:	080031d7 	.word	0x080031d7
 8003004:	080031d7 	.word	0x080031d7
 8003008:	080031d7 	.word	0x080031d7
 800300c:	08003091 	.word	0x08003091
 8003010:	080031d7 	.word	0x080031d7
 8003014:	080031d7 	.word	0x080031d7
 8003018:	080031d7 	.word	0x080031d7
 800301c:	080030d3 	.word	0x080030d3
 8003020:	080031d7 	.word	0x080031d7
 8003024:	080031d7 	.word	0x080031d7
 8003028:	080031d7 	.word	0x080031d7
 800302c:	08003113 	.word	0x08003113
 8003030:	080031d7 	.word	0x080031d7
 8003034:	080031d7 	.word	0x080031d7
 8003038:	080031d7 	.word	0x080031d7
 800303c:	08003155 	.word	0x08003155
 8003040:	080031d7 	.word	0x080031d7
 8003044:	080031d7 	.word	0x080031d7
 8003048:	080031d7 	.word	0x080031d7
 800304c:	08003195 	.word	0x08003195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa34 	bl	80034c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	619a      	str	r2, [r3, #24]
      break;
 800308e:	e0a5      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa86 	bl	80035a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	021a      	lsls	r2, r3, #8
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]
      break;
 80030d0:	e084      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fadd 	bl	8003698 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0208 	orr.w	r2, r2, #8
 80030ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0204 	bic.w	r2, r2, #4
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
      break;
 8003110:	e064      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fb33 	bl	8003784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800313c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	61da      	str	r2, [r3, #28]
      break;
 8003152:	e043      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fb6a 	bl	8003834 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0208 	orr.w	r2, r2, #8
 800316e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0204 	bic.w	r2, r2, #4
 800317e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003192:	e023      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fb9c 	bl	80038d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	021a      	lsls	r2, r3, #8
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80031d4:	e002      	b.n	80031dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop

080031f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e0b4      	b.n	8003376 <HAL_TIM_ConfigClockSource+0x186>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	4b56      	ldr	r3, [pc, #344]	; (8003380 <HAL_TIM_ConfigClockSource+0x190>)
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003244:	d03e      	beq.n	80032c4 <HAL_TIM_ConfigClockSource+0xd4>
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324a:	f200 8087 	bhi.w	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	f000 8086 	beq.w	8003362 <HAL_TIM_ConfigClockSource+0x172>
 8003256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800325a:	d87f      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b70      	cmp	r3, #112	; 0x70
 800325e:	d01a      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0xa6>
 8003260:	2b70      	cmp	r3, #112	; 0x70
 8003262:	d87b      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b60      	cmp	r3, #96	; 0x60
 8003266:	d050      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x11a>
 8003268:	2b60      	cmp	r3, #96	; 0x60
 800326a:	d877      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800326c:	2b50      	cmp	r3, #80	; 0x50
 800326e:	d03c      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xfa>
 8003270:	2b50      	cmp	r3, #80	; 0x50
 8003272:	d873      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d058      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x13a>
 8003278:	2b40      	cmp	r3, #64	; 0x40
 800327a:	d86f      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b30      	cmp	r3, #48	; 0x30
 800327e:	d064      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003280:	2b30      	cmp	r3, #48	; 0x30
 8003282:	d86b      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b20      	cmp	r3, #32
 8003286:	d060      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003288:	2b20      	cmp	r3, #32
 800328a:	d867      	bhi.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d05c      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003290:	2b10      	cmp	r3, #16
 8003292:	d05a      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x15a>
 8003294:	e062      	b.n	800335c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6818      	ldr	r0, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	6899      	ldr	r1, [r3, #8]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f000 fbe5 	bl	8003a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
      break;
 80032c2:	e04f      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6899      	ldr	r1, [r3, #8]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f000 fbce 	bl	8003a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	689a      	ldr	r2, [r3, #8]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e6:	609a      	str	r2, [r3, #8]
      break;
 80032e8:	e03c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f000 fb42 	bl	8003980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2150      	movs	r1, #80	; 0x50
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fb9b 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 8003308:	e02c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	461a      	mov	r2, r3
 8003318:	f000 fb61 	bl	80039de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2160      	movs	r1, #96	; 0x60
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fb8b 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 8003328:	e01c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	461a      	mov	r2, r3
 8003338:	f000 fb22 	bl	8003980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fb7b 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 8003348:	e00c      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4619      	mov	r1, r3
 8003354:	4610      	mov	r0, r2
 8003356:	f000 fb72 	bl	8003a3e <TIM_ITRx_SetConfig>
      break;
 800335a:	e003      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      break;
 8003360:	e000      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	fffeff88 	.word	0xfffeff88

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <TIM_Base_SetConfig+0x114>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d013      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a2:	d00f      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a3d      	ldr	r2, [pc, #244]	; (800349c <TIM_Base_SetConfig+0x118>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d00b      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <TIM_Base_SetConfig+0x11c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d007      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3b      	ldr	r2, [pc, #236]	; (80034a4 <TIM_Base_SetConfig+0x120>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3a      	ldr	r2, [pc, #232]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d108      	bne.n	80033d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2f      	ldr	r2, [pc, #188]	; (8003498 <TIM_Base_SetConfig+0x114>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d02b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e4:	d027      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2c      	ldr	r2, [pc, #176]	; (800349c <TIM_Base_SetConfig+0x118>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d023      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <TIM_Base_SetConfig+0x11c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2a      	ldr	r2, [pc, #168]	; (80034a4 <TIM_Base_SetConfig+0x120>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d01b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a29      	ldr	r2, [pc, #164]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a28      	ldr	r2, [pc, #160]	; (80034ac <TIM_Base_SetConfig+0x128>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a27      	ldr	r2, [pc, #156]	; (80034b0 <TIM_Base_SetConfig+0x12c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <TIM_Base_SetConfig+0x130>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <TIM_Base_SetConfig+0x134>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <TIM_Base_SetConfig+0x138>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <TIM_Base_SetConfig+0x13c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <TIM_Base_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <TIM_Base_SetConfig+0x124>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d103      	bne.n	8003484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	615a      	str	r2, [r3, #20]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40000c00 	.word	0x40000c00
 80034a8:	40010400 	.word	0x40010400
 80034ac:	40014000 	.word	0x40014000
 80034b0:	40014400 	.word	0x40014400
 80034b4:	40014800 	.word	0x40014800
 80034b8:	40001800 	.word	0x40001800
 80034bc:	40001c00 	.word	0x40001c00
 80034c0:	40002000 	.word	0x40002000

080034c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	f023 0201 	bic.w	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4b2b      	ldr	r3, [pc, #172]	; (800359c <TIM_OC1_SetConfig+0xd8>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0303 	bic.w	r3, r3, #3
 80034fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 0302 	bic.w	r3, r3, #2
 800350c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <TIM_OC1_SetConfig+0xdc>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_OC1_SetConfig+0x64>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a20      	ldr	r2, [pc, #128]	; (80035a4 <TIM_OC1_SetConfig+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d10c      	bne.n	8003542 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f023 0308 	bic.w	r3, r3, #8
 800352e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <TIM_OC1_SetConfig+0xdc>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_OC1_SetConfig+0x8e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <TIM_OC1_SetConfig+0xe0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d111      	bne.n	8003576 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	bf00      	nop
 8003592:	371c      	adds	r7, #28
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	fffeff8f 	.word	0xfffeff8f
 80035a0:	40010000 	.word	0x40010000
 80035a4:	40010400 	.word	0x40010400

080035a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	f023 0210 	bic.w	r2, r3, #16
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4b2e      	ldr	r3, [pc, #184]	; (800368c <TIM_OC2_SetConfig+0xe4>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0320 	bic.w	r3, r3, #32
 80035f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <TIM_OC2_SetConfig+0xe8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d003      	beq.n	8003610 <TIM_OC2_SetConfig+0x68>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a22      	ldr	r2, [pc, #136]	; (8003694 <TIM_OC2_SetConfig+0xec>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d10d      	bne.n	800362c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <TIM_OC2_SetConfig+0xe8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_OC2_SetConfig+0x94>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a17      	ldr	r2, [pc, #92]	; (8003694 <TIM_OC2_SetConfig+0xec>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d113      	bne.n	8003664 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003642:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800364a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	bf00      	nop
 8003680:	371c      	adds	r7, #28
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	feff8fff 	.word	0xfeff8fff
 8003690:	40010000 	.word	0x40010000
 8003694:	40010400 	.word	0x40010400

08003698 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4b2d      	ldr	r3, [pc, #180]	; (8003778 <TIM_OC3_SetConfig+0xe0>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a22      	ldr	r2, [pc, #136]	; (800377c <TIM_OC3_SetConfig+0xe4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_OC3_SetConfig+0x66>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <TIM_OC3_SetConfig+0xe8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	021b      	lsls	r3, r3, #8
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a17      	ldr	r2, [pc, #92]	; (800377c <TIM_OC3_SetConfig+0xe4>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d003      	beq.n	800372a <TIM_OC3_SetConfig+0x92>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <TIM_OC3_SetConfig+0xe8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d113      	bne.n	8003752 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	fffeff8f 	.word	0xfffeff8f
 800377c:	40010000 	.word	0x40010000
 8003780:	40010400 	.word	0x40010400

08003784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <TIM_OC4_SetConfig+0xa4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	031b      	lsls	r3, r3, #12
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <TIM_OC4_SetConfig+0xa8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_OC4_SetConfig+0x68>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <TIM_OC4_SetConfig+0xac>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d109      	bne.n	8003800 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	019b      	lsls	r3, r3, #6
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	621a      	str	r2, [r3, #32]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	feff8fff 	.word	0xfeff8fff
 800382c:	40010000 	.word	0x40010000
 8003830:	40010400 	.word	0x40010400

08003834 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <TIM_OC5_SetConfig+0x98>)
 8003860:	4013      	ands	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003874:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	041b      	lsls	r3, r3, #16
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <TIM_OC5_SetConfig+0x9c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC5_SetConfig+0x5e>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <TIM_OC5_SetConfig+0xa0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d109      	bne.n	80038a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003898:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	fffeff8f 	.word	0xfffeff8f
 80038d0:	40010000 	.word	0x40010000
 80038d4:	40010400 	.word	0x40010400

080038d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <TIM_OC6_SetConfig+0x9c>)
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800391a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <TIM_OC6_SetConfig+0xa0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC6_SetConfig+0x60>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a12      	ldr	r2, [pc, #72]	; (800397c <TIM_OC6_SetConfig+0xa4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d109      	bne.n	800394c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	feff8fff 	.word	0xfeff8fff
 8003978:	40010000 	.word	0x40010000
 800397c:	40010400 	.word	0x40010400

08003980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f023 0201 	bic.w	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f023 030a 	bic.w	r3, r3, #10
 80039bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	621a      	str	r2, [r3, #32]
}
 80039d2:	bf00      	nop
 80039d4:	371c      	adds	r7, #28
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039de:	b480      	push	{r7}
 80039e0:	b087      	sub	sp, #28
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	031b      	lsls	r3, r3, #12
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b085      	sub	sp, #20
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f043 0307 	orr.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	021a      	lsls	r2, r3, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	609a      	str	r2, [r3, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	371c      	adds	r7, #28
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	401a      	ands	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a1a      	ldr	r2, [r3, #32]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
}
 8003af2:	bf00      	nop
 8003af4:	371c      	adds	r7, #28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
	...

08003b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e06d      	b.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a2f      	ldr	r2, [pc, #188]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d022      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a1d      	ldr	r2, [pc, #116]	; (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d018      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d013      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	; (8003c10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00e      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a15      	ldr	r2, [pc, #84]	; (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d009      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10c      	bne.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40010000 	.word	0x40010000
 8003c04:	40010400 	.word	0x40010400
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	40000800 	.word	0x40000800
 8003c10:	40000c00 	.word	0x40000c00
 8003c14:	40014000 	.word	0x40014000
 8003c18:	40001800 	.word	0x40001800

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e040      	b.n	8003cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fd fa26 	bl	8001090 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	; 0x24
 8003c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0201 	bic.w	r2, r2, #1
 8003c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8b0 	bl	8003dc0 <UART_SetConfig>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d002      	beq.n	8003c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fb08 	bl	8004288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fb8f 	bl	80043cc <UART_CheckIdleState>
 8003cae:	4603      	mov	r3, r0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af02      	add	r7, sp, #8
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d171      	bne.n	8003db4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_UART_Transmit+0x24>
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e06a      	b.n	8003db6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	; 0x21
 8003cec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fb23 	bl	8001338 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d28:	e02c      	b.n	8003d84 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2200      	movs	r2, #0
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb96 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e038      	b.n	8003db6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e007      	b.n	8003d72 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1cc      	bne.n	8003d2a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 fb63 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e005      	b.n	8003db6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003db4:	2302      	movs	r3, #2
  }
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
	...

08003dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4ba6      	ldr	r3, [pc, #664]	; (8004084 <UART_SetConfig+0x2c4>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	6979      	ldr	r1, [r7, #20]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a94      	ldr	r2, [pc, #592]	; (8004088 <UART_SetConfig+0x2c8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d120      	bne.n	8003e7e <UART_SetConfig+0xbe>
 8003e3c:	4b93      	ldr	r3, [pc, #588]	; (800408c <UART_SetConfig+0x2cc>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	d816      	bhi.n	8003e78 <UART_SetConfig+0xb8>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x90>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e61 	.word	0x08003e61
 8003e54:	08003e6d 	.word	0x08003e6d
 8003e58:	08003e67 	.word	0x08003e67
 8003e5c:	08003e73 	.word	0x08003e73
 8003e60:	2301      	movs	r3, #1
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e150      	b.n	8004108 <UART_SetConfig+0x348>
 8003e66:	2302      	movs	r3, #2
 8003e68:	77fb      	strb	r3, [r7, #31]
 8003e6a:	e14d      	b.n	8004108 <UART_SetConfig+0x348>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e14a      	b.n	8004108 <UART_SetConfig+0x348>
 8003e72:	2308      	movs	r3, #8
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e147      	b.n	8004108 <UART_SetConfig+0x348>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e144      	b.n	8004108 <UART_SetConfig+0x348>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a83      	ldr	r2, [pc, #524]	; (8004090 <UART_SetConfig+0x2d0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d132      	bne.n	8003eee <UART_SetConfig+0x12e>
 8003e88:	4b80      	ldr	r3, [pc, #512]	; (800408c <UART_SetConfig+0x2cc>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	f003 030c 	and.w	r3, r3, #12
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d828      	bhi.n	8003ee8 <UART_SetConfig+0x128>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0xdc>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ed1 	.word	0x08003ed1
 8003ea0:	08003ee9 	.word	0x08003ee9
 8003ea4:	08003ee9 	.word	0x08003ee9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003edd 	.word	0x08003edd
 8003eb0:	08003ee9 	.word	0x08003ee9
 8003eb4:	08003ee9 	.word	0x08003ee9
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003ed7 	.word	0x08003ed7
 8003ec0:	08003ee9 	.word	0x08003ee9
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003ee9 	.word	0x08003ee9
 8003ecc:	08003ee3 	.word	0x08003ee3
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e118      	b.n	8004108 <UART_SetConfig+0x348>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e115      	b.n	8004108 <UART_SetConfig+0x348>
 8003edc:	2304      	movs	r3, #4
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e112      	b.n	8004108 <UART_SetConfig+0x348>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e10f      	b.n	8004108 <UART_SetConfig+0x348>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e10c      	b.n	8004108 <UART_SetConfig+0x348>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a68      	ldr	r2, [pc, #416]	; (8004094 <UART_SetConfig+0x2d4>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d120      	bne.n	8003f3a <UART_SetConfig+0x17a>
 8003ef8:	4b64      	ldr	r3, [pc, #400]	; (800408c <UART_SetConfig+0x2cc>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f02:	2b30      	cmp	r3, #48	; 0x30
 8003f04:	d013      	beq.n	8003f2e <UART_SetConfig+0x16e>
 8003f06:	2b30      	cmp	r3, #48	; 0x30
 8003f08:	d814      	bhi.n	8003f34 <UART_SetConfig+0x174>
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	d009      	beq.n	8003f22 <UART_SetConfig+0x162>
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d810      	bhi.n	8003f34 <UART_SetConfig+0x174>
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <UART_SetConfig+0x15c>
 8003f16:	2b10      	cmp	r3, #16
 8003f18:	d006      	beq.n	8003f28 <UART_SetConfig+0x168>
 8003f1a:	e00b      	b.n	8003f34 <UART_SetConfig+0x174>
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e0f2      	b.n	8004108 <UART_SetConfig+0x348>
 8003f22:	2302      	movs	r3, #2
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e0ef      	b.n	8004108 <UART_SetConfig+0x348>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	77fb      	strb	r3, [r7, #31]
 8003f2c:	e0ec      	b.n	8004108 <UART_SetConfig+0x348>
 8003f2e:	2308      	movs	r3, #8
 8003f30:	77fb      	strb	r3, [r7, #31]
 8003f32:	e0e9      	b.n	8004108 <UART_SetConfig+0x348>
 8003f34:	2310      	movs	r3, #16
 8003f36:	77fb      	strb	r3, [r7, #31]
 8003f38:	e0e6      	b.n	8004108 <UART_SetConfig+0x348>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a56      	ldr	r2, [pc, #344]	; (8004098 <UART_SetConfig+0x2d8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d120      	bne.n	8003f86 <UART_SetConfig+0x1c6>
 8003f44:	4b51      	ldr	r3, [pc, #324]	; (800408c <UART_SetConfig+0x2cc>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f4e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f50:	d013      	beq.n	8003f7a <UART_SetConfig+0x1ba>
 8003f52:	2bc0      	cmp	r3, #192	; 0xc0
 8003f54:	d814      	bhi.n	8003f80 <UART_SetConfig+0x1c0>
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d009      	beq.n	8003f6e <UART_SetConfig+0x1ae>
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d810      	bhi.n	8003f80 <UART_SetConfig+0x1c0>
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <UART_SetConfig+0x1a8>
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d006      	beq.n	8003f74 <UART_SetConfig+0x1b4>
 8003f66:	e00b      	b.n	8003f80 <UART_SetConfig+0x1c0>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e0cc      	b.n	8004108 <UART_SetConfig+0x348>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e0c9      	b.n	8004108 <UART_SetConfig+0x348>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e0c6      	b.n	8004108 <UART_SetConfig+0x348>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e0c3      	b.n	8004108 <UART_SetConfig+0x348>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e0c0      	b.n	8004108 <UART_SetConfig+0x348>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a44      	ldr	r2, [pc, #272]	; (800409c <UART_SetConfig+0x2dc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d125      	bne.n	8003fdc <UART_SetConfig+0x21c>
 8003f90:	4b3e      	ldr	r3, [pc, #248]	; (800408c <UART_SetConfig+0x2cc>)
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f9e:	d017      	beq.n	8003fd0 <UART_SetConfig+0x210>
 8003fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fa4:	d817      	bhi.n	8003fd6 <UART_SetConfig+0x216>
 8003fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003faa:	d00b      	beq.n	8003fc4 <UART_SetConfig+0x204>
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fb0:	d811      	bhi.n	8003fd6 <UART_SetConfig+0x216>
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <UART_SetConfig+0x1fe>
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fba:	d006      	beq.n	8003fca <UART_SetConfig+0x20a>
 8003fbc:	e00b      	b.n	8003fd6 <UART_SetConfig+0x216>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e0a1      	b.n	8004108 <UART_SetConfig+0x348>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e09e      	b.n	8004108 <UART_SetConfig+0x348>
 8003fca:	2304      	movs	r3, #4
 8003fcc:	77fb      	strb	r3, [r7, #31]
 8003fce:	e09b      	b.n	8004108 <UART_SetConfig+0x348>
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	77fb      	strb	r3, [r7, #31]
 8003fd4:	e098      	b.n	8004108 <UART_SetConfig+0x348>
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	77fb      	strb	r3, [r7, #31]
 8003fda:	e095      	b.n	8004108 <UART_SetConfig+0x348>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a2f      	ldr	r2, [pc, #188]	; (80040a0 <UART_SetConfig+0x2e0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d125      	bne.n	8004032 <UART_SetConfig+0x272>
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <UART_SetConfig+0x2cc>)
 8003fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ff0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ff4:	d017      	beq.n	8004026 <UART_SetConfig+0x266>
 8003ff6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ffa:	d817      	bhi.n	800402c <UART_SetConfig+0x26c>
 8003ffc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004000:	d00b      	beq.n	800401a <UART_SetConfig+0x25a>
 8004002:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004006:	d811      	bhi.n	800402c <UART_SetConfig+0x26c>
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <UART_SetConfig+0x254>
 800400c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004010:	d006      	beq.n	8004020 <UART_SetConfig+0x260>
 8004012:	e00b      	b.n	800402c <UART_SetConfig+0x26c>
 8004014:	2301      	movs	r3, #1
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e076      	b.n	8004108 <UART_SetConfig+0x348>
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e073      	b.n	8004108 <UART_SetConfig+0x348>
 8004020:	2304      	movs	r3, #4
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	e070      	b.n	8004108 <UART_SetConfig+0x348>
 8004026:	2308      	movs	r3, #8
 8004028:	77fb      	strb	r3, [r7, #31]
 800402a:	e06d      	b.n	8004108 <UART_SetConfig+0x348>
 800402c:	2310      	movs	r3, #16
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e06a      	b.n	8004108 <UART_SetConfig+0x348>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <UART_SetConfig+0x2e4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d138      	bne.n	80040ae <UART_SetConfig+0x2ee>
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <UART_SetConfig+0x2cc>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404a:	d017      	beq.n	800407c <UART_SetConfig+0x2bc>
 800404c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004050:	d82a      	bhi.n	80040a8 <UART_SetConfig+0x2e8>
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004056:	d00b      	beq.n	8004070 <UART_SetConfig+0x2b0>
 8004058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405c:	d824      	bhi.n	80040a8 <UART_SetConfig+0x2e8>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <UART_SetConfig+0x2aa>
 8004062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004066:	d006      	beq.n	8004076 <UART_SetConfig+0x2b6>
 8004068:	e01e      	b.n	80040a8 <UART_SetConfig+0x2e8>
 800406a:	2300      	movs	r3, #0
 800406c:	77fb      	strb	r3, [r7, #31]
 800406e:	e04b      	b.n	8004108 <UART_SetConfig+0x348>
 8004070:	2302      	movs	r3, #2
 8004072:	77fb      	strb	r3, [r7, #31]
 8004074:	e048      	b.n	8004108 <UART_SetConfig+0x348>
 8004076:	2304      	movs	r3, #4
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e045      	b.n	8004108 <UART_SetConfig+0x348>
 800407c:	2308      	movs	r3, #8
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e042      	b.n	8004108 <UART_SetConfig+0x348>
 8004082:	bf00      	nop
 8004084:	efff69f3 	.word	0xefff69f3
 8004088:	40011000 	.word	0x40011000
 800408c:	40023800 	.word	0x40023800
 8004090:	40004400 	.word	0x40004400
 8004094:	40004800 	.word	0x40004800
 8004098:	40004c00 	.word	0x40004c00
 800409c:	40005000 	.word	0x40005000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	40007800 	.word	0x40007800
 80040a8:	2310      	movs	r3, #16
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e02c      	b.n	8004108 <UART_SetConfig+0x348>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a72      	ldr	r2, [pc, #456]	; (800427c <UART_SetConfig+0x4bc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d125      	bne.n	8004104 <UART_SetConfig+0x344>
 80040b8:	4b71      	ldr	r3, [pc, #452]	; (8004280 <UART_SetConfig+0x4c0>)
 80040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80040c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040c6:	d017      	beq.n	80040f8 <UART_SetConfig+0x338>
 80040c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80040cc:	d817      	bhi.n	80040fe <UART_SetConfig+0x33e>
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d00b      	beq.n	80040ec <UART_SetConfig+0x32c>
 80040d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d8:	d811      	bhi.n	80040fe <UART_SetConfig+0x33e>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <UART_SetConfig+0x326>
 80040de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040e2:	d006      	beq.n	80040f2 <UART_SetConfig+0x332>
 80040e4:	e00b      	b.n	80040fe <UART_SetConfig+0x33e>
 80040e6:	2300      	movs	r3, #0
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e00d      	b.n	8004108 <UART_SetConfig+0x348>
 80040ec:	2302      	movs	r3, #2
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e00a      	b.n	8004108 <UART_SetConfig+0x348>
 80040f2:	2304      	movs	r3, #4
 80040f4:	77fb      	strb	r3, [r7, #31]
 80040f6:	e007      	b.n	8004108 <UART_SetConfig+0x348>
 80040f8:	2308      	movs	r3, #8
 80040fa:	77fb      	strb	r3, [r7, #31]
 80040fc:	e004      	b.n	8004108 <UART_SetConfig+0x348>
 80040fe:	2310      	movs	r3, #16
 8004100:	77fb      	strb	r3, [r7, #31]
 8004102:	e001      	b.n	8004108 <UART_SetConfig+0x348>
 8004104:	2310      	movs	r3, #16
 8004106:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004110:	d15b      	bne.n	80041ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004112:	7ffb      	ldrb	r3, [r7, #31]
 8004114:	2b08      	cmp	r3, #8
 8004116:	d828      	bhi.n	800416a <UART_SetConfig+0x3aa>
 8004118:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x360>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe f93e 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8004148:	61b8      	str	r0, [r7, #24]
        break;
 800414a:	e013      	b.n	8004174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe f94e 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8004150:	61b8      	str	r0, [r7, #24]
        break;
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b4b      	ldr	r3, [pc, #300]	; (8004284 <UART_SetConfig+0x4c4>)
 8004156:	61bb      	str	r3, [r7, #24]
        break;
 8004158:	e00c      	b.n	8004174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe f821 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 800415e:	61b8      	str	r0, [r7, #24]
        break;
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e004      	b.n	8004174 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77bb      	strb	r3, [r7, #30]
        break;
 8004172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d074      	beq.n	8004264 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	005a      	lsls	r2, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	441a      	add	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	fbb2 f3f3 	udiv	r3, r2, r3
 800418e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d916      	bls.n	80041c4 <UART_SetConfig+0x404>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d212      	bcs.n	80041c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f023 030f 	bic.w	r3, r3, #15
 80041a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	085b      	lsrs	r3, r3, #1
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	89fb      	ldrh	r3, [r7, #14]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	89fa      	ldrh	r2, [r7, #14]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	e04f      	b.n	8004264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	77bb      	strb	r3, [r7, #30]
 80041c8:	e04c      	b.n	8004264 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ca:	7ffb      	ldrb	r3, [r7, #31]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d828      	bhi.n	8004222 <UART_SetConfig+0x462>
 80041d0:	a201      	add	r2, pc, #4	; (adr r2, 80041d8 <UART_SetConfig+0x418>)
 80041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d6:	bf00      	nop
 80041d8:	080041fd 	.word	0x080041fd
 80041dc:	08004205 	.word	0x08004205
 80041e0:	0800420d 	.word	0x0800420d
 80041e4:	08004223 	.word	0x08004223
 80041e8:	08004213 	.word	0x08004213
 80041ec:	08004223 	.word	0x08004223
 80041f0:	08004223 	.word	0x08004223
 80041f4:	08004223 	.word	0x08004223
 80041f8:	0800421b 	.word	0x0800421b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe f8e2 	bl	80023c4 <HAL_RCC_GetPCLK1Freq>
 8004200:	61b8      	str	r0, [r7, #24]
        break;
 8004202:	e013      	b.n	800422c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004204:	f7fe f8f2 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8004208:	61b8      	str	r0, [r7, #24]
        break;
 800420a:	e00f      	b.n	800422c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800420c:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <UART_SetConfig+0x4c4>)
 800420e:	61bb      	str	r3, [r7, #24]
        break;
 8004210:	e00c      	b.n	800422c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004212:	f7fd ffc5 	bl	80021a0 <HAL_RCC_GetSysClockFreq>
 8004216:	61b8      	str	r0, [r7, #24]
        break;
 8004218:	e008      	b.n	800422c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800421e:	61bb      	str	r3, [r7, #24]
        break;
 8004220:	e004      	b.n	800422c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	77bb      	strb	r3, [r7, #30]
        break;
 800422a:	bf00      	nop
    }

    if (pclk != 0U)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d018      	beq.n	8004264 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	085a      	lsrs	r2, r3, #1
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	441a      	add	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	fbb2 f3f3 	udiv	r3, r2, r3
 8004244:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d909      	bls.n	8004260 <UART_SetConfig+0x4a0>
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004252:	d205      	bcs.n	8004260 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	e001      	b.n	8004264 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004270:	7fbb      	ldrb	r3, [r7, #30]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3720      	adds	r7, #32
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40007c00 	.word	0x40007c00
 8004280:	40023800 	.word	0x40023800
 8004284:	00f42400 	.word	0x00f42400

08004288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01a      	beq.n	800439e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004386:	d10a      	bne.n	800439e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]
  }
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043dc:	f7fc ffac 	bl	8001338 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d10e      	bne.n	800440e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f831 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e027      	b.n	800445e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b04      	cmp	r3, #4
 800441a:	d10e      	bne.n	800443a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800441c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f81b 	bl	8004466 <UART_WaitOnFlagUntilTimeout>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e011      	b.n	800445e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2220      	movs	r2, #32
 8004444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b09c      	sub	sp, #112	; 0x70
 800446a:	af00      	add	r7, sp, #0
 800446c:	60f8      	str	r0, [r7, #12]
 800446e:	60b9      	str	r1, [r7, #8]
 8004470:	603b      	str	r3, [r7, #0]
 8004472:	4613      	mov	r3, r2
 8004474:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004476:	e0a7      	b.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004478:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447e:	f000 80a3 	beq.w	80045c8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004482:	f7fc ff59 	bl	8001338 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800448e:	429a      	cmp	r2, r3
 8004490:	d302      	bcc.n	8004498 <UART_WaitOnFlagUntilTimeout+0x32>
 8004492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004494:	2b00      	cmp	r3, #0
 8004496:	d13f      	bne.n	8004518 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a0:	e853 3f00 	ldrex	r3, [r3]
 80044a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ac:	667b      	str	r3, [r7, #100]	; 0x64
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044be:	e841 2300 	strex	r3, r2, [r1]
 80044c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1e6      	bne.n	8004498 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	3308      	adds	r3, #8
 80044d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	f023 0301 	bic.w	r3, r3, #1
 80044e0:	663b      	str	r3, [r7, #96]	; 0x60
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3308      	adds	r3, #8
 80044e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80044f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e5      	bne.n	80044ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2220      	movs	r2, #32
 8004508:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e068      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0304 	and.w	r3, r3, #4
 8004522:	2b00      	cmp	r3, #0
 8004524:	d050      	beq.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004534:	d148      	bne.n	80045c8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800453e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004554:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	461a      	mov	r2, r3
 800455c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800455e:	637b      	str	r3, [r7, #52]	; 0x34
 8004560:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004564:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e6      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3308      	adds	r3, #8
 8004578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	613b      	str	r3, [r7, #16]
   return(result);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	66bb      	str	r3, [r7, #104]	; 0x68
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3308      	adds	r3, #8
 8004590:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004592:	623a      	str	r2, [r7, #32]
 8004594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	69f9      	ldr	r1, [r7, #28]
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	e841 2300 	strex	r3, r2, [r1]
 800459e:	61bb      	str	r3, [r7, #24]
   return(result);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1e5      	bne.n	8004572 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2220      	movs	r2, #32
 80045aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e010      	b.n	80045ea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	bf0c      	ite	eq
 80045d8:	2301      	moveq	r3, #1
 80045da:	2300      	movne	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	f43f af48 	beq.w	8004478 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3770      	adds	r7, #112	; 0x70
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	2000000c 	.word	0x2000000c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	4d0d      	ldr	r5, [pc, #52]	; (8004638 <__libc_init_array+0x38>)
 8004604:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	2600      	movs	r6, #0
 800460c:	42a6      	cmp	r6, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	4d0b      	ldr	r5, [pc, #44]	; (8004640 <__libc_init_array+0x40>)
 8004612:	4c0c      	ldr	r4, [pc, #48]	; (8004644 <__libc_init_array+0x44>)
 8004614:	f000 fca2 	bl	8004f5c <_init>
 8004618:	1b64      	subs	r4, r4, r5
 800461a:	10a4      	asrs	r4, r4, #2
 800461c:	2600      	movs	r6, #0
 800461e:	42a6      	cmp	r6, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f855 3b04 	ldr.w	r3, [r5], #4
 8004628:	4798      	blx	r3
 800462a:	3601      	adds	r6, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004632:	4798      	blx	r3
 8004634:	3601      	adds	r6, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08004fd4 	.word	0x08004fd4
 800463c:	08004fd4 	.word	0x08004fd4
 8004640:	08004fd4 	.word	0x08004fd4
 8004644:	08004fd8 	.word	0x08004fd8

08004648 <memset>:
 8004648:	4402      	add	r2, r0
 800464a:	4603      	mov	r3, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <sniprintf>:
 8004658:	b40c      	push	{r2, r3}
 800465a:	b530      	push	{r4, r5, lr}
 800465c:	4b17      	ldr	r3, [pc, #92]	; (80046bc <sniprintf+0x64>)
 800465e:	1e0c      	subs	r4, r1, #0
 8004660:	681d      	ldr	r5, [r3, #0]
 8004662:	b09d      	sub	sp, #116	; 0x74
 8004664:	da08      	bge.n	8004678 <sniprintf+0x20>
 8004666:	238b      	movs	r3, #139	; 0x8b
 8004668:	602b      	str	r3, [r5, #0]
 800466a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800466e:	b01d      	add	sp, #116	; 0x74
 8004670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004674:	b002      	add	sp, #8
 8004676:	4770      	bx	lr
 8004678:	f44f 7302 	mov.w	r3, #520	; 0x208
 800467c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004680:	bf14      	ite	ne
 8004682:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004686:	4623      	moveq	r3, r4
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	9307      	str	r3, [sp, #28]
 800468c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004690:	9002      	str	r0, [sp, #8]
 8004692:	9006      	str	r0, [sp, #24]
 8004694:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004698:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800469a:	ab21      	add	r3, sp, #132	; 0x84
 800469c:	a902      	add	r1, sp, #8
 800469e:	4628      	mov	r0, r5
 80046a0:	9301      	str	r3, [sp, #4]
 80046a2:	f000 f869 	bl	8004778 <_svfiprintf_r>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	bfbc      	itt	lt
 80046aa:	238b      	movlt	r3, #139	; 0x8b
 80046ac:	602b      	strlt	r3, [r5, #0]
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d0dd      	beq.n	800466e <sniprintf+0x16>
 80046b2:	9b02      	ldr	r3, [sp, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e7d9      	b.n	800466e <sniprintf+0x16>
 80046ba:	bf00      	nop
 80046bc:	2000000c 	.word	0x2000000c

080046c0 <__ssputs_r>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	688e      	ldr	r6, [r1, #8]
 80046c6:	429e      	cmp	r6, r3
 80046c8:	4682      	mov	sl, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4690      	mov	r8, r2
 80046ce:	461f      	mov	r7, r3
 80046d0:	d838      	bhi.n	8004744 <__ssputs_r+0x84>
 80046d2:	898a      	ldrh	r2, [r1, #12]
 80046d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046d8:	d032      	beq.n	8004740 <__ssputs_r+0x80>
 80046da:	6825      	ldr	r5, [r4, #0]
 80046dc:	6909      	ldr	r1, [r1, #16]
 80046de:	eba5 0901 	sub.w	r9, r5, r1
 80046e2:	6965      	ldr	r5, [r4, #20]
 80046e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80046ec:	3301      	adds	r3, #1
 80046ee:	444b      	add	r3, r9
 80046f0:	106d      	asrs	r5, r5, #1
 80046f2:	429d      	cmp	r5, r3
 80046f4:	bf38      	it	cc
 80046f6:	461d      	movcc	r5, r3
 80046f8:	0553      	lsls	r3, r2, #21
 80046fa:	d531      	bpl.n	8004760 <__ssputs_r+0xa0>
 80046fc:	4629      	mov	r1, r5
 80046fe:	f000 fb63 	bl	8004dc8 <_malloc_r>
 8004702:	4606      	mov	r6, r0
 8004704:	b950      	cbnz	r0, 800471c <__ssputs_r+0x5c>
 8004706:	230c      	movs	r3, #12
 8004708:	f8ca 3000 	str.w	r3, [sl]
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004712:	81a3      	strh	r3, [r4, #12]
 8004714:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800471c:	6921      	ldr	r1, [r4, #16]
 800471e:	464a      	mov	r2, r9
 8004720:	f000 fabe 	bl	8004ca0 <memcpy>
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800472a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	6126      	str	r6, [r4, #16]
 8004732:	6165      	str	r5, [r4, #20]
 8004734:	444e      	add	r6, r9
 8004736:	eba5 0509 	sub.w	r5, r5, r9
 800473a:	6026      	str	r6, [r4, #0]
 800473c:	60a5      	str	r5, [r4, #8]
 800473e:	463e      	mov	r6, r7
 8004740:	42be      	cmp	r6, r7
 8004742:	d900      	bls.n	8004746 <__ssputs_r+0x86>
 8004744:	463e      	mov	r6, r7
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	4632      	mov	r2, r6
 800474a:	4641      	mov	r1, r8
 800474c:	f000 fab6 	bl	8004cbc <memmove>
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	1b9b      	subs	r3, r3, r6
 8004754:	60a3      	str	r3, [r4, #8]
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	4433      	add	r3, r6
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	2000      	movs	r0, #0
 800475e:	e7db      	b.n	8004718 <__ssputs_r+0x58>
 8004760:	462a      	mov	r2, r5
 8004762:	f000 fba5 	bl	8004eb0 <_realloc_r>
 8004766:	4606      	mov	r6, r0
 8004768:	2800      	cmp	r0, #0
 800476a:	d1e1      	bne.n	8004730 <__ssputs_r+0x70>
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	4650      	mov	r0, sl
 8004770:	f000 fabe 	bl	8004cf0 <_free_r>
 8004774:	e7c7      	b.n	8004706 <__ssputs_r+0x46>
	...

08004778 <_svfiprintf_r>:
 8004778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477c:	4698      	mov	r8, r3
 800477e:	898b      	ldrh	r3, [r1, #12]
 8004780:	061b      	lsls	r3, r3, #24
 8004782:	b09d      	sub	sp, #116	; 0x74
 8004784:	4607      	mov	r7, r0
 8004786:	460d      	mov	r5, r1
 8004788:	4614      	mov	r4, r2
 800478a:	d50e      	bpl.n	80047aa <_svfiprintf_r+0x32>
 800478c:	690b      	ldr	r3, [r1, #16]
 800478e:	b963      	cbnz	r3, 80047aa <_svfiprintf_r+0x32>
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	f000 fb19 	bl	8004dc8 <_malloc_r>
 8004796:	6028      	str	r0, [r5, #0]
 8004798:	6128      	str	r0, [r5, #16]
 800479a:	b920      	cbnz	r0, 80047a6 <_svfiprintf_r+0x2e>
 800479c:	230c      	movs	r3, #12
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047a4:	e0d1      	b.n	800494a <_svfiprintf_r+0x1d2>
 80047a6:	2340      	movs	r3, #64	; 0x40
 80047a8:	616b      	str	r3, [r5, #20]
 80047aa:	2300      	movs	r3, #0
 80047ac:	9309      	str	r3, [sp, #36]	; 0x24
 80047ae:	2320      	movs	r3, #32
 80047b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b8:	2330      	movs	r3, #48	; 0x30
 80047ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004964 <_svfiprintf_r+0x1ec>
 80047be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047c2:	f04f 0901 	mov.w	r9, #1
 80047c6:	4623      	mov	r3, r4
 80047c8:	469a      	mov	sl, r3
 80047ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047ce:	b10a      	cbz	r2, 80047d4 <_svfiprintf_r+0x5c>
 80047d0:	2a25      	cmp	r2, #37	; 0x25
 80047d2:	d1f9      	bne.n	80047c8 <_svfiprintf_r+0x50>
 80047d4:	ebba 0b04 	subs.w	fp, sl, r4
 80047d8:	d00b      	beq.n	80047f2 <_svfiprintf_r+0x7a>
 80047da:	465b      	mov	r3, fp
 80047dc:	4622      	mov	r2, r4
 80047de:	4629      	mov	r1, r5
 80047e0:	4638      	mov	r0, r7
 80047e2:	f7ff ff6d 	bl	80046c0 <__ssputs_r>
 80047e6:	3001      	adds	r0, #1
 80047e8:	f000 80aa 	beq.w	8004940 <_svfiprintf_r+0x1c8>
 80047ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047ee:	445a      	add	r2, fp
 80047f0:	9209      	str	r2, [sp, #36]	; 0x24
 80047f2:	f89a 3000 	ldrb.w	r3, [sl]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80a2 	beq.w	8004940 <_svfiprintf_r+0x1c8>
 80047fc:	2300      	movs	r3, #0
 80047fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004806:	f10a 0a01 	add.w	sl, sl, #1
 800480a:	9304      	str	r3, [sp, #16]
 800480c:	9307      	str	r3, [sp, #28]
 800480e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004812:	931a      	str	r3, [sp, #104]	; 0x68
 8004814:	4654      	mov	r4, sl
 8004816:	2205      	movs	r2, #5
 8004818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481c:	4851      	ldr	r0, [pc, #324]	; (8004964 <_svfiprintf_r+0x1ec>)
 800481e:	f7fb fd17 	bl	8000250 <memchr>
 8004822:	9a04      	ldr	r2, [sp, #16]
 8004824:	b9d8      	cbnz	r0, 800485e <_svfiprintf_r+0xe6>
 8004826:	06d0      	lsls	r0, r2, #27
 8004828:	bf44      	itt	mi
 800482a:	2320      	movmi	r3, #32
 800482c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004830:	0711      	lsls	r1, r2, #28
 8004832:	bf44      	itt	mi
 8004834:	232b      	movmi	r3, #43	; 0x2b
 8004836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800483a:	f89a 3000 	ldrb.w	r3, [sl]
 800483e:	2b2a      	cmp	r3, #42	; 0x2a
 8004840:	d015      	beq.n	800486e <_svfiprintf_r+0xf6>
 8004842:	9a07      	ldr	r2, [sp, #28]
 8004844:	4654      	mov	r4, sl
 8004846:	2000      	movs	r0, #0
 8004848:	f04f 0c0a 	mov.w	ip, #10
 800484c:	4621      	mov	r1, r4
 800484e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004852:	3b30      	subs	r3, #48	; 0x30
 8004854:	2b09      	cmp	r3, #9
 8004856:	d94e      	bls.n	80048f6 <_svfiprintf_r+0x17e>
 8004858:	b1b0      	cbz	r0, 8004888 <_svfiprintf_r+0x110>
 800485a:	9207      	str	r2, [sp, #28]
 800485c:	e014      	b.n	8004888 <_svfiprintf_r+0x110>
 800485e:	eba0 0308 	sub.w	r3, r0, r8
 8004862:	fa09 f303 	lsl.w	r3, r9, r3
 8004866:	4313      	orrs	r3, r2
 8004868:	9304      	str	r3, [sp, #16]
 800486a:	46a2      	mov	sl, r4
 800486c:	e7d2      	b.n	8004814 <_svfiprintf_r+0x9c>
 800486e:	9b03      	ldr	r3, [sp, #12]
 8004870:	1d19      	adds	r1, r3, #4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	9103      	str	r1, [sp, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfbb      	ittet	lt
 800487a:	425b      	neglt	r3, r3
 800487c:	f042 0202 	orrlt.w	r2, r2, #2
 8004880:	9307      	strge	r3, [sp, #28]
 8004882:	9307      	strlt	r3, [sp, #28]
 8004884:	bfb8      	it	lt
 8004886:	9204      	strlt	r2, [sp, #16]
 8004888:	7823      	ldrb	r3, [r4, #0]
 800488a:	2b2e      	cmp	r3, #46	; 0x2e
 800488c:	d10c      	bne.n	80048a8 <_svfiprintf_r+0x130>
 800488e:	7863      	ldrb	r3, [r4, #1]
 8004890:	2b2a      	cmp	r3, #42	; 0x2a
 8004892:	d135      	bne.n	8004900 <_svfiprintf_r+0x188>
 8004894:	9b03      	ldr	r3, [sp, #12]
 8004896:	1d1a      	adds	r2, r3, #4
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	9203      	str	r2, [sp, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	bfb8      	it	lt
 80048a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80048a4:	3402      	adds	r4, #2
 80048a6:	9305      	str	r3, [sp, #20]
 80048a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004974 <_svfiprintf_r+0x1fc>
 80048ac:	7821      	ldrb	r1, [r4, #0]
 80048ae:	2203      	movs	r2, #3
 80048b0:	4650      	mov	r0, sl
 80048b2:	f7fb fccd 	bl	8000250 <memchr>
 80048b6:	b140      	cbz	r0, 80048ca <_svfiprintf_r+0x152>
 80048b8:	2340      	movs	r3, #64	; 0x40
 80048ba:	eba0 000a 	sub.w	r0, r0, sl
 80048be:	fa03 f000 	lsl.w	r0, r3, r0
 80048c2:	9b04      	ldr	r3, [sp, #16]
 80048c4:	4303      	orrs	r3, r0
 80048c6:	3401      	adds	r4, #1
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ce:	4826      	ldr	r0, [pc, #152]	; (8004968 <_svfiprintf_r+0x1f0>)
 80048d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048d4:	2206      	movs	r2, #6
 80048d6:	f7fb fcbb 	bl	8000250 <memchr>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d038      	beq.n	8004950 <_svfiprintf_r+0x1d8>
 80048de:	4b23      	ldr	r3, [pc, #140]	; (800496c <_svfiprintf_r+0x1f4>)
 80048e0:	bb1b      	cbnz	r3, 800492a <_svfiprintf_r+0x1b2>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	3307      	adds	r3, #7
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	3308      	adds	r3, #8
 80048ec:	9303      	str	r3, [sp, #12]
 80048ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f0:	4433      	add	r3, r6
 80048f2:	9309      	str	r3, [sp, #36]	; 0x24
 80048f4:	e767      	b.n	80047c6 <_svfiprintf_r+0x4e>
 80048f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80048fa:	460c      	mov	r4, r1
 80048fc:	2001      	movs	r0, #1
 80048fe:	e7a5      	b.n	800484c <_svfiprintf_r+0xd4>
 8004900:	2300      	movs	r3, #0
 8004902:	3401      	adds	r4, #1
 8004904:	9305      	str	r3, [sp, #20]
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0c0a 	mov.w	ip, #10
 800490c:	4620      	mov	r0, r4
 800490e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004912:	3a30      	subs	r2, #48	; 0x30
 8004914:	2a09      	cmp	r2, #9
 8004916:	d903      	bls.n	8004920 <_svfiprintf_r+0x1a8>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0c5      	beq.n	80048a8 <_svfiprintf_r+0x130>
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	e7c3      	b.n	80048a8 <_svfiprintf_r+0x130>
 8004920:	fb0c 2101 	mla	r1, ip, r1, r2
 8004924:	4604      	mov	r4, r0
 8004926:	2301      	movs	r3, #1
 8004928:	e7f0      	b.n	800490c <_svfiprintf_r+0x194>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <_svfiprintf_r+0x1f8>)
 8004932:	a904      	add	r1, sp, #16
 8004934:	4638      	mov	r0, r7
 8004936:	f3af 8000 	nop.w
 800493a:	1c42      	adds	r2, r0, #1
 800493c:	4606      	mov	r6, r0
 800493e:	d1d6      	bne.n	80048ee <_svfiprintf_r+0x176>
 8004940:	89ab      	ldrh	r3, [r5, #12]
 8004942:	065b      	lsls	r3, r3, #25
 8004944:	f53f af2c 	bmi.w	80047a0 <_svfiprintf_r+0x28>
 8004948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800494a:	b01d      	add	sp, #116	; 0x74
 800494c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004950:	ab03      	add	r3, sp, #12
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	462a      	mov	r2, r5
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <_svfiprintf_r+0x1f8>)
 8004958:	a904      	add	r1, sp, #16
 800495a:	4638      	mov	r0, r7
 800495c:	f000 f87a 	bl	8004a54 <_printf_i>
 8004960:	e7eb      	b.n	800493a <_svfiprintf_r+0x1c2>
 8004962:	bf00      	nop
 8004964:	08004f98 	.word	0x08004f98
 8004968:	08004fa2 	.word	0x08004fa2
 800496c:	00000000 	.word	0x00000000
 8004970:	080046c1 	.word	0x080046c1
 8004974:	08004f9e 	.word	0x08004f9e

08004978 <_printf_common>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	4616      	mov	r6, r2
 800497e:	4699      	mov	r9, r3
 8004980:	688a      	ldr	r2, [r1, #8]
 8004982:	690b      	ldr	r3, [r1, #16]
 8004984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004988:	4293      	cmp	r3, r2
 800498a:	bfb8      	it	lt
 800498c:	4613      	movlt	r3, r2
 800498e:	6033      	str	r3, [r6, #0]
 8004990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004994:	4607      	mov	r7, r0
 8004996:	460c      	mov	r4, r1
 8004998:	b10a      	cbz	r2, 800499e <_printf_common+0x26>
 800499a:	3301      	adds	r3, #1
 800499c:	6033      	str	r3, [r6, #0]
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	0699      	lsls	r1, r3, #26
 80049a2:	bf42      	ittt	mi
 80049a4:	6833      	ldrmi	r3, [r6, #0]
 80049a6:	3302      	addmi	r3, #2
 80049a8:	6033      	strmi	r3, [r6, #0]
 80049aa:	6825      	ldr	r5, [r4, #0]
 80049ac:	f015 0506 	ands.w	r5, r5, #6
 80049b0:	d106      	bne.n	80049c0 <_printf_common+0x48>
 80049b2:	f104 0a19 	add.w	sl, r4, #25
 80049b6:	68e3      	ldr	r3, [r4, #12]
 80049b8:	6832      	ldr	r2, [r6, #0]
 80049ba:	1a9b      	subs	r3, r3, r2
 80049bc:	42ab      	cmp	r3, r5
 80049be:	dc26      	bgt.n	8004a0e <_printf_common+0x96>
 80049c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049c4:	1e13      	subs	r3, r2, #0
 80049c6:	6822      	ldr	r2, [r4, #0]
 80049c8:	bf18      	it	ne
 80049ca:	2301      	movne	r3, #1
 80049cc:	0692      	lsls	r2, r2, #26
 80049ce:	d42b      	bmi.n	8004a28 <_printf_common+0xb0>
 80049d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d01e      	beq.n	8004a1c <_printf_common+0xa4>
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	68e5      	ldr	r5, [r4, #12]
 80049e2:	6832      	ldr	r2, [r6, #0]
 80049e4:	f003 0306 	and.w	r3, r3, #6
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	bf08      	it	eq
 80049ec:	1aad      	subeq	r5, r5, r2
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	6922      	ldr	r2, [r4, #16]
 80049f2:	bf0c      	ite	eq
 80049f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f8:	2500      	movne	r5, #0
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bfc4      	itt	gt
 80049fe:	1a9b      	subgt	r3, r3, r2
 8004a00:	18ed      	addgt	r5, r5, r3
 8004a02:	2600      	movs	r6, #0
 8004a04:	341a      	adds	r4, #26
 8004a06:	42b5      	cmp	r5, r6
 8004a08:	d11a      	bne.n	8004a40 <_printf_common+0xc8>
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e008      	b.n	8004a20 <_printf_common+0xa8>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	4652      	mov	r2, sl
 8004a12:	4649      	mov	r1, r9
 8004a14:	4638      	mov	r0, r7
 8004a16:	47c0      	blx	r8
 8004a18:	3001      	adds	r0, #1
 8004a1a:	d103      	bne.n	8004a24 <_printf_common+0xac>
 8004a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a24:	3501      	adds	r5, #1
 8004a26:	e7c6      	b.n	80049b6 <_printf_common+0x3e>
 8004a28:	18e1      	adds	r1, r4, r3
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	2030      	movs	r0, #48	; 0x30
 8004a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a32:	4422      	add	r2, r4
 8004a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	e7c7      	b.n	80049d0 <_printf_common+0x58>
 8004a40:	2301      	movs	r3, #1
 8004a42:	4622      	mov	r2, r4
 8004a44:	4649      	mov	r1, r9
 8004a46:	4638      	mov	r0, r7
 8004a48:	47c0      	blx	r8
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d0e6      	beq.n	8004a1c <_printf_common+0xa4>
 8004a4e:	3601      	adds	r6, #1
 8004a50:	e7d9      	b.n	8004a06 <_printf_common+0x8e>
	...

08004a54 <_printf_i>:
 8004a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a58:	7e0f      	ldrb	r7, [r1, #24]
 8004a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004a5c:	2f78      	cmp	r7, #120	; 0x78
 8004a5e:	4691      	mov	r9, r2
 8004a60:	4680      	mov	r8, r0
 8004a62:	460c      	mov	r4, r1
 8004a64:	469a      	mov	sl, r3
 8004a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004a6a:	d807      	bhi.n	8004a7c <_printf_i+0x28>
 8004a6c:	2f62      	cmp	r7, #98	; 0x62
 8004a6e:	d80a      	bhi.n	8004a86 <_printf_i+0x32>
 8004a70:	2f00      	cmp	r7, #0
 8004a72:	f000 80d8 	beq.w	8004c26 <_printf_i+0x1d2>
 8004a76:	2f58      	cmp	r7, #88	; 0x58
 8004a78:	f000 80a3 	beq.w	8004bc2 <_printf_i+0x16e>
 8004a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a84:	e03a      	b.n	8004afc <_printf_i+0xa8>
 8004a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a8a:	2b15      	cmp	r3, #21
 8004a8c:	d8f6      	bhi.n	8004a7c <_printf_i+0x28>
 8004a8e:	a101      	add	r1, pc, #4	; (adr r1, 8004a94 <_printf_i+0x40>)
 8004a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a94:	08004aed 	.word	0x08004aed
 8004a98:	08004b01 	.word	0x08004b01
 8004a9c:	08004a7d 	.word	0x08004a7d
 8004aa0:	08004a7d 	.word	0x08004a7d
 8004aa4:	08004a7d 	.word	0x08004a7d
 8004aa8:	08004a7d 	.word	0x08004a7d
 8004aac:	08004b01 	.word	0x08004b01
 8004ab0:	08004a7d 	.word	0x08004a7d
 8004ab4:	08004a7d 	.word	0x08004a7d
 8004ab8:	08004a7d 	.word	0x08004a7d
 8004abc:	08004a7d 	.word	0x08004a7d
 8004ac0:	08004c0d 	.word	0x08004c0d
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004bef 	.word	0x08004bef
 8004acc:	08004a7d 	.word	0x08004a7d
 8004ad0:	08004a7d 	.word	0x08004a7d
 8004ad4:	08004c2f 	.word	0x08004c2f
 8004ad8:	08004a7d 	.word	0x08004a7d
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004a7d 	.word	0x08004a7d
 8004ae4:	08004a7d 	.word	0x08004a7d
 8004ae8:	08004bf7 	.word	0x08004bf7
 8004aec:	682b      	ldr	r3, [r5, #0]
 8004aee:	1d1a      	adds	r2, r3, #4
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	602a      	str	r2, [r5, #0]
 8004af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004afc:	2301      	movs	r3, #1
 8004afe:	e0a3      	b.n	8004c48 <_printf_i+0x1f4>
 8004b00:	6820      	ldr	r0, [r4, #0]
 8004b02:	6829      	ldr	r1, [r5, #0]
 8004b04:	0606      	lsls	r6, r0, #24
 8004b06:	f101 0304 	add.w	r3, r1, #4
 8004b0a:	d50a      	bpl.n	8004b22 <_printf_i+0xce>
 8004b0c:	680e      	ldr	r6, [r1, #0]
 8004b0e:	602b      	str	r3, [r5, #0]
 8004b10:	2e00      	cmp	r6, #0
 8004b12:	da03      	bge.n	8004b1c <_printf_i+0xc8>
 8004b14:	232d      	movs	r3, #45	; 0x2d
 8004b16:	4276      	negs	r6, r6
 8004b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b1c:	485e      	ldr	r0, [pc, #376]	; (8004c98 <_printf_i+0x244>)
 8004b1e:	230a      	movs	r3, #10
 8004b20:	e019      	b.n	8004b56 <_printf_i+0x102>
 8004b22:	680e      	ldr	r6, [r1, #0]
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b2a:	bf18      	it	ne
 8004b2c:	b236      	sxthne	r6, r6
 8004b2e:	e7ef      	b.n	8004b10 <_printf_i+0xbc>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	6820      	ldr	r0, [r4, #0]
 8004b34:	1d19      	adds	r1, r3, #4
 8004b36:	6029      	str	r1, [r5, #0]
 8004b38:	0601      	lsls	r1, r0, #24
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0xec>
 8004b3c:	681e      	ldr	r6, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <_printf_i+0xf2>
 8004b40:	0646      	lsls	r6, r0, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0xe8>
 8004b44:	881e      	ldrh	r6, [r3, #0]
 8004b46:	4854      	ldr	r0, [pc, #336]	; (8004c98 <_printf_i+0x244>)
 8004b48:	2f6f      	cmp	r7, #111	; 0x6f
 8004b4a:	bf0c      	ite	eq
 8004b4c:	2308      	moveq	r3, #8
 8004b4e:	230a      	movne	r3, #10
 8004b50:	2100      	movs	r1, #0
 8004b52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b56:	6865      	ldr	r5, [r4, #4]
 8004b58:	60a5      	str	r5, [r4, #8]
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	bfa2      	ittt	ge
 8004b5e:	6821      	ldrge	r1, [r4, #0]
 8004b60:	f021 0104 	bicge.w	r1, r1, #4
 8004b64:	6021      	strge	r1, [r4, #0]
 8004b66:	b90e      	cbnz	r6, 8004b6c <_printf_i+0x118>
 8004b68:	2d00      	cmp	r5, #0
 8004b6a:	d04d      	beq.n	8004c08 <_printf_i+0x1b4>
 8004b6c:	4615      	mov	r5, r2
 8004b6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b72:	fb03 6711 	mls	r7, r3, r1, r6
 8004b76:	5dc7      	ldrb	r7, [r0, r7]
 8004b78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b7c:	4637      	mov	r7, r6
 8004b7e:	42bb      	cmp	r3, r7
 8004b80:	460e      	mov	r6, r1
 8004b82:	d9f4      	bls.n	8004b6e <_printf_i+0x11a>
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d10b      	bne.n	8004ba0 <_printf_i+0x14c>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	07de      	lsls	r6, r3, #31
 8004b8c:	d508      	bpl.n	8004ba0 <_printf_i+0x14c>
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	6861      	ldr	r1, [r4, #4]
 8004b92:	4299      	cmp	r1, r3
 8004b94:	bfde      	ittt	le
 8004b96:	2330      	movle	r3, #48	; 0x30
 8004b98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ba0:	1b52      	subs	r2, r2, r5
 8004ba2:	6122      	str	r2, [r4, #16]
 8004ba4:	f8cd a000 	str.w	sl, [sp]
 8004ba8:	464b      	mov	r3, r9
 8004baa:	aa03      	add	r2, sp, #12
 8004bac:	4621      	mov	r1, r4
 8004bae:	4640      	mov	r0, r8
 8004bb0:	f7ff fee2 	bl	8004978 <_printf_common>
 8004bb4:	3001      	adds	r0, #1
 8004bb6:	d14c      	bne.n	8004c52 <_printf_i+0x1fe>
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bbc:	b004      	add	sp, #16
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	4835      	ldr	r0, [pc, #212]	; (8004c98 <_printf_i+0x244>)
 8004bc4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004bc8:	6829      	ldr	r1, [r5, #0]
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8004bd0:	6029      	str	r1, [r5, #0]
 8004bd2:	061d      	lsls	r5, r3, #24
 8004bd4:	d514      	bpl.n	8004c00 <_printf_i+0x1ac>
 8004bd6:	07df      	lsls	r7, r3, #31
 8004bd8:	bf44      	itt	mi
 8004bda:	f043 0320 	orrmi.w	r3, r3, #32
 8004bde:	6023      	strmi	r3, [r4, #0]
 8004be0:	b91e      	cbnz	r6, 8004bea <_printf_i+0x196>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	f023 0320 	bic.w	r3, r3, #32
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	2310      	movs	r3, #16
 8004bec:	e7b0      	b.n	8004b50 <_printf_i+0xfc>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f043 0320 	orr.w	r3, r3, #32
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	2378      	movs	r3, #120	; 0x78
 8004bf8:	4828      	ldr	r0, [pc, #160]	; (8004c9c <_printf_i+0x248>)
 8004bfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bfe:	e7e3      	b.n	8004bc8 <_printf_i+0x174>
 8004c00:	0659      	lsls	r1, r3, #25
 8004c02:	bf48      	it	mi
 8004c04:	b2b6      	uxthmi	r6, r6
 8004c06:	e7e6      	b.n	8004bd6 <_printf_i+0x182>
 8004c08:	4615      	mov	r5, r2
 8004c0a:	e7bb      	b.n	8004b84 <_printf_i+0x130>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	6826      	ldr	r6, [r4, #0]
 8004c10:	6961      	ldr	r1, [r4, #20]
 8004c12:	1d18      	adds	r0, r3, #4
 8004c14:	6028      	str	r0, [r5, #0]
 8004c16:	0635      	lsls	r5, r6, #24
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	d501      	bpl.n	8004c20 <_printf_i+0x1cc>
 8004c1c:	6019      	str	r1, [r3, #0]
 8004c1e:	e002      	b.n	8004c26 <_printf_i+0x1d2>
 8004c20:	0670      	lsls	r0, r6, #25
 8004c22:	d5fb      	bpl.n	8004c1c <_printf_i+0x1c8>
 8004c24:	8019      	strh	r1, [r3, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	6123      	str	r3, [r4, #16]
 8004c2a:	4615      	mov	r5, r2
 8004c2c:	e7ba      	b.n	8004ba4 <_printf_i+0x150>
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	1d1a      	adds	r2, r3, #4
 8004c32:	602a      	str	r2, [r5, #0]
 8004c34:	681d      	ldr	r5, [r3, #0]
 8004c36:	6862      	ldr	r2, [r4, #4]
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	f7fb fb08 	bl	8000250 <memchr>
 8004c40:	b108      	cbz	r0, 8004c46 <_printf_i+0x1f2>
 8004c42:	1b40      	subs	r0, r0, r5
 8004c44:	6060      	str	r0, [r4, #4]
 8004c46:	6863      	ldr	r3, [r4, #4]
 8004c48:	6123      	str	r3, [r4, #16]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c50:	e7a8      	b.n	8004ba4 <_printf_i+0x150>
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	462a      	mov	r2, r5
 8004c56:	4649      	mov	r1, r9
 8004c58:	4640      	mov	r0, r8
 8004c5a:	47d0      	blx	sl
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d0ab      	beq.n	8004bb8 <_printf_i+0x164>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	079b      	lsls	r3, r3, #30
 8004c64:	d413      	bmi.n	8004c8e <_printf_i+0x23a>
 8004c66:	68e0      	ldr	r0, [r4, #12]
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	4298      	cmp	r0, r3
 8004c6c:	bfb8      	it	lt
 8004c6e:	4618      	movlt	r0, r3
 8004c70:	e7a4      	b.n	8004bbc <_printf_i+0x168>
 8004c72:	2301      	movs	r3, #1
 8004c74:	4632      	mov	r2, r6
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	47d0      	blx	sl
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d09b      	beq.n	8004bb8 <_printf_i+0x164>
 8004c80:	3501      	adds	r5, #1
 8004c82:	68e3      	ldr	r3, [r4, #12]
 8004c84:	9903      	ldr	r1, [sp, #12]
 8004c86:	1a5b      	subs	r3, r3, r1
 8004c88:	42ab      	cmp	r3, r5
 8004c8a:	dcf2      	bgt.n	8004c72 <_printf_i+0x21e>
 8004c8c:	e7eb      	b.n	8004c66 <_printf_i+0x212>
 8004c8e:	2500      	movs	r5, #0
 8004c90:	f104 0619 	add.w	r6, r4, #25
 8004c94:	e7f5      	b.n	8004c82 <_printf_i+0x22e>
 8004c96:	bf00      	nop
 8004c98:	08004fa9 	.word	0x08004fa9
 8004c9c:	08004fba 	.word	0x08004fba

08004ca0 <memcpy>:
 8004ca0:	440a      	add	r2, r1
 8004ca2:	4291      	cmp	r1, r2
 8004ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004ca8:	d100      	bne.n	8004cac <memcpy+0xc>
 8004caa:	4770      	bx	lr
 8004cac:	b510      	push	{r4, lr}
 8004cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb6:	4291      	cmp	r1, r2
 8004cb8:	d1f9      	bne.n	8004cae <memcpy+0xe>
 8004cba:	bd10      	pop	{r4, pc}

08004cbc <memmove>:
 8004cbc:	4288      	cmp	r0, r1
 8004cbe:	b510      	push	{r4, lr}
 8004cc0:	eb01 0402 	add.w	r4, r1, r2
 8004cc4:	d902      	bls.n	8004ccc <memmove+0x10>
 8004cc6:	4284      	cmp	r4, r0
 8004cc8:	4623      	mov	r3, r4
 8004cca:	d807      	bhi.n	8004cdc <memmove+0x20>
 8004ccc:	1e43      	subs	r3, r0, #1
 8004cce:	42a1      	cmp	r1, r4
 8004cd0:	d008      	beq.n	8004ce4 <memmove+0x28>
 8004cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cda:	e7f8      	b.n	8004cce <memmove+0x12>
 8004cdc:	4402      	add	r2, r0
 8004cde:	4601      	mov	r1, r0
 8004ce0:	428a      	cmp	r2, r1
 8004ce2:	d100      	bne.n	8004ce6 <memmove+0x2a>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004cee:	e7f7      	b.n	8004ce0 <memmove+0x24>

08004cf0 <_free_r>:
 8004cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d044      	beq.n	8004d80 <_free_r+0x90>
 8004cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfa:	9001      	str	r0, [sp, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8004d02:	bfb8      	it	lt
 8004d04:	18e4      	addlt	r4, r4, r3
 8004d06:	f000 f913 	bl	8004f30 <__malloc_lock>
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <_free_r+0x94>)
 8004d0c:	9801      	ldr	r0, [sp, #4]
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	b933      	cbnz	r3, 8004d20 <_free_r+0x30>
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	6014      	str	r4, [r2, #0]
 8004d16:	b003      	add	sp, #12
 8004d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1c:	f000 b90e 	b.w	8004f3c <__malloc_unlock>
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d908      	bls.n	8004d36 <_free_r+0x46>
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bf01      	itttt	eq
 8004d2c:	6819      	ldreq	r1, [r3, #0]
 8004d2e:	685b      	ldreq	r3, [r3, #4]
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	e7ed      	b.n	8004d12 <_free_r+0x22>
 8004d36:	461a      	mov	r2, r3
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b10b      	cbz	r3, 8004d40 <_free_r+0x50>
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	d9fa      	bls.n	8004d36 <_free_r+0x46>
 8004d40:	6811      	ldr	r1, [r2, #0]
 8004d42:	1855      	adds	r5, r2, r1
 8004d44:	42a5      	cmp	r5, r4
 8004d46:	d10b      	bne.n	8004d60 <_free_r+0x70>
 8004d48:	6824      	ldr	r4, [r4, #0]
 8004d4a:	4421      	add	r1, r4
 8004d4c:	1854      	adds	r4, r2, r1
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	d1e0      	bne.n	8004d16 <_free_r+0x26>
 8004d54:	681c      	ldr	r4, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	6053      	str	r3, [r2, #4]
 8004d5a:	4421      	add	r1, r4
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	e7da      	b.n	8004d16 <_free_r+0x26>
 8004d60:	d902      	bls.n	8004d68 <_free_r+0x78>
 8004d62:	230c      	movs	r3, #12
 8004d64:	6003      	str	r3, [r0, #0]
 8004d66:	e7d6      	b.n	8004d16 <_free_r+0x26>
 8004d68:	6825      	ldr	r5, [r4, #0]
 8004d6a:	1961      	adds	r1, r4, r5
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	bf04      	itt	eq
 8004d70:	6819      	ldreq	r1, [r3, #0]
 8004d72:	685b      	ldreq	r3, [r3, #4]
 8004d74:	6063      	str	r3, [r4, #4]
 8004d76:	bf04      	itt	eq
 8004d78:	1949      	addeq	r1, r1, r5
 8004d7a:	6021      	streq	r1, [r4, #0]
 8004d7c:	6054      	str	r4, [r2, #4]
 8004d7e:	e7ca      	b.n	8004d16 <_free_r+0x26>
 8004d80:	b003      	add	sp, #12
 8004d82:	bd30      	pop	{r4, r5, pc}
 8004d84:	20000250 	.word	0x20000250

08004d88 <sbrk_aligned>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4e0e      	ldr	r6, [pc, #56]	; (8004dc4 <sbrk_aligned+0x3c>)
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	6831      	ldr	r1, [r6, #0]
 8004d90:	4605      	mov	r5, r0
 8004d92:	b911      	cbnz	r1, 8004d9a <sbrk_aligned+0x12>
 8004d94:	f000 f8bc 	bl	8004f10 <_sbrk_r>
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 f8b7 	bl	8004f10 <_sbrk_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d00a      	beq.n	8004dbc <sbrk_aligned+0x34>
 8004da6:	1cc4      	adds	r4, r0, #3
 8004da8:	f024 0403 	bic.w	r4, r4, #3
 8004dac:	42a0      	cmp	r0, r4
 8004dae:	d007      	beq.n	8004dc0 <sbrk_aligned+0x38>
 8004db0:	1a21      	subs	r1, r4, r0
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 f8ac 	bl	8004f10 <_sbrk_r>
 8004db8:	3001      	adds	r0, #1
 8004dba:	d101      	bne.n	8004dc0 <sbrk_aligned+0x38>
 8004dbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	20000254 	.word	0x20000254

08004dc8 <_malloc_r>:
 8004dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dcc:	1ccd      	adds	r5, r1, #3
 8004dce:	f025 0503 	bic.w	r5, r5, #3
 8004dd2:	3508      	adds	r5, #8
 8004dd4:	2d0c      	cmp	r5, #12
 8004dd6:	bf38      	it	cc
 8004dd8:	250c      	movcc	r5, #12
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	4607      	mov	r7, r0
 8004dde:	db01      	blt.n	8004de4 <_malloc_r+0x1c>
 8004de0:	42a9      	cmp	r1, r5
 8004de2:	d905      	bls.n	8004df0 <_malloc_r+0x28>
 8004de4:	230c      	movs	r3, #12
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	2600      	movs	r6, #0
 8004dea:	4630      	mov	r0, r6
 8004dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df0:	4e2e      	ldr	r6, [pc, #184]	; (8004eac <_malloc_r+0xe4>)
 8004df2:	f000 f89d 	bl	8004f30 <__malloc_lock>
 8004df6:	6833      	ldr	r3, [r6, #0]
 8004df8:	461c      	mov	r4, r3
 8004dfa:	bb34      	cbnz	r4, 8004e4a <_malloc_r+0x82>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7ff ffc2 	bl	8004d88 <sbrk_aligned>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	4604      	mov	r4, r0
 8004e08:	d14d      	bne.n	8004ea6 <_malloc_r+0xde>
 8004e0a:	6834      	ldr	r4, [r6, #0]
 8004e0c:	4626      	mov	r6, r4
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d140      	bne.n	8004e94 <_malloc_r+0xcc>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	4631      	mov	r1, r6
 8004e16:	4638      	mov	r0, r7
 8004e18:	eb04 0803 	add.w	r8, r4, r3
 8004e1c:	f000 f878 	bl	8004f10 <_sbrk_r>
 8004e20:	4580      	cmp	r8, r0
 8004e22:	d13a      	bne.n	8004e9a <_malloc_r+0xd2>
 8004e24:	6821      	ldr	r1, [r4, #0]
 8004e26:	3503      	adds	r5, #3
 8004e28:	1a6d      	subs	r5, r5, r1
 8004e2a:	f025 0503 	bic.w	r5, r5, #3
 8004e2e:	3508      	adds	r5, #8
 8004e30:	2d0c      	cmp	r5, #12
 8004e32:	bf38      	it	cc
 8004e34:	250c      	movcc	r5, #12
 8004e36:	4629      	mov	r1, r5
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ffa5 	bl	8004d88 <sbrk_aligned>
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d02b      	beq.n	8004e9a <_malloc_r+0xd2>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	442b      	add	r3, r5
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	e00e      	b.n	8004e68 <_malloc_r+0xa0>
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	1b52      	subs	r2, r2, r5
 8004e4e:	d41e      	bmi.n	8004e8e <_malloc_r+0xc6>
 8004e50:	2a0b      	cmp	r2, #11
 8004e52:	d916      	bls.n	8004e82 <_malloc_r+0xba>
 8004e54:	1961      	adds	r1, r4, r5
 8004e56:	42a3      	cmp	r3, r4
 8004e58:	6025      	str	r5, [r4, #0]
 8004e5a:	bf18      	it	ne
 8004e5c:	6059      	strne	r1, [r3, #4]
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	bf08      	it	eq
 8004e62:	6031      	streq	r1, [r6, #0]
 8004e64:	5162      	str	r2, [r4, r5]
 8004e66:	604b      	str	r3, [r1, #4]
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f104 060b 	add.w	r6, r4, #11
 8004e6e:	f000 f865 	bl	8004f3c <__malloc_unlock>
 8004e72:	f026 0607 	bic.w	r6, r6, #7
 8004e76:	1d23      	adds	r3, r4, #4
 8004e78:	1af2      	subs	r2, r6, r3
 8004e7a:	d0b6      	beq.n	8004dea <_malloc_r+0x22>
 8004e7c:	1b9b      	subs	r3, r3, r6
 8004e7e:	50a3      	str	r3, [r4, r2]
 8004e80:	e7b3      	b.n	8004dea <_malloc_r+0x22>
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	bf0c      	ite	eq
 8004e88:	6032      	streq	r2, [r6, #0]
 8004e8a:	605a      	strne	r2, [r3, #4]
 8004e8c:	e7ec      	b.n	8004e68 <_malloc_r+0xa0>
 8004e8e:	4623      	mov	r3, r4
 8004e90:	6864      	ldr	r4, [r4, #4]
 8004e92:	e7b2      	b.n	8004dfa <_malloc_r+0x32>
 8004e94:	4634      	mov	r4, r6
 8004e96:	6876      	ldr	r6, [r6, #4]
 8004e98:	e7b9      	b.n	8004e0e <_malloc_r+0x46>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f000 f84c 	bl	8004f3c <__malloc_unlock>
 8004ea4:	e7a1      	b.n	8004dea <_malloc_r+0x22>
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	e7de      	b.n	8004e68 <_malloc_r+0xa0>
 8004eaa:	bf00      	nop
 8004eac:	20000250 	.word	0x20000250

08004eb0 <_realloc_r>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	460e      	mov	r6, r1
 8004eba:	b921      	cbnz	r1, 8004ec6 <_realloc_r+0x16>
 8004ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	f7ff bf81 	b.w	8004dc8 <_malloc_r>
 8004ec6:	b92a      	cbnz	r2, 8004ed4 <_realloc_r+0x24>
 8004ec8:	f7ff ff12 	bl	8004cf0 <_free_r>
 8004ecc:	4625      	mov	r5, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	f000 f838 	bl	8004f48 <_malloc_usable_size_r>
 8004ed8:	4284      	cmp	r4, r0
 8004eda:	4607      	mov	r7, r0
 8004edc:	d802      	bhi.n	8004ee4 <_realloc_r+0x34>
 8004ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ee2:	d812      	bhi.n	8004f0a <_realloc_r+0x5a>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff ff6e 	bl	8004dc8 <_malloc_r>
 8004eec:	4605      	mov	r5, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0ed      	beq.n	8004ece <_realloc_r+0x1e>
 8004ef2:	42bc      	cmp	r4, r7
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	bf28      	it	cs
 8004efa:	463a      	movcs	r2, r7
 8004efc:	f7ff fed0 	bl	8004ca0 <memcpy>
 8004f00:	4631      	mov	r1, r6
 8004f02:	4640      	mov	r0, r8
 8004f04:	f7ff fef4 	bl	8004cf0 <_free_r>
 8004f08:	e7e1      	b.n	8004ece <_realloc_r+0x1e>
 8004f0a:	4635      	mov	r5, r6
 8004f0c:	e7df      	b.n	8004ece <_realloc_r+0x1e>
	...

08004f10 <_sbrk_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4d06      	ldr	r5, [pc, #24]	; (8004f2c <_sbrk_r+0x1c>)
 8004f14:	2300      	movs	r3, #0
 8004f16:	4604      	mov	r4, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	602b      	str	r3, [r5, #0]
 8004f1c:	f7fc f94a 	bl	80011b4 <_sbrk>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_sbrk_r+0x1a>
 8004f24:	682b      	ldr	r3, [r5, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_sbrk_r+0x1a>
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000258 	.word	0x20000258

08004f30 <__malloc_lock>:
 8004f30:	4801      	ldr	r0, [pc, #4]	; (8004f38 <__malloc_lock+0x8>)
 8004f32:	f000 b811 	b.w	8004f58 <__retarget_lock_acquire_recursive>
 8004f36:	bf00      	nop
 8004f38:	2000025c 	.word	0x2000025c

08004f3c <__malloc_unlock>:
 8004f3c:	4801      	ldr	r0, [pc, #4]	; (8004f44 <__malloc_unlock+0x8>)
 8004f3e:	f000 b80c 	b.w	8004f5a <__retarget_lock_release_recursive>
 8004f42:	bf00      	nop
 8004f44:	2000025c 	.word	0x2000025c

08004f48 <_malloc_usable_size_r>:
 8004f48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f4c:	1f18      	subs	r0, r3, #4
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfbc      	itt	lt
 8004f52:	580b      	ldrlt	r3, [r1, r0]
 8004f54:	18c0      	addlt	r0, r0, r3
 8004f56:	4770      	bx	lr

08004f58 <__retarget_lock_acquire_recursive>:
 8004f58:	4770      	bx	lr

08004f5a <__retarget_lock_release_recursive>:
 8004f5a:	4770      	bx	lr

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
