
009-usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000414c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004344  08004344  00014344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004374  08004374  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800437c  0800437c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08004390  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004390  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c725  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6d  00000000  00000000  0002c75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268d3  00000000  00000000  0002f678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c046  00000000  00000000  00055f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edbe6  00000000  00000000  00061f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fb77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000214c  00000000  00000000  0014fbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800432c 	.word	0x0800432c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800432c 	.word	0x0800432c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_DMA_Init+0x38>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <MX_DMA_Init+0x38>)
 8000548:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_DMA_Init+0x38>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2100      	movs	r1, #0
 800055e:	200c      	movs	r0, #12
 8000560:	f000 fc93 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000564:	200c      	movs	r0, #12
 8000566:	f000 fcac 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08c      	sub	sp, #48	; 0x30
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 031c 	add.w	r3, r7, #28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	4b77      	ldr	r3, [pc, #476]	; (800076c <MX_GPIO_Init+0x1f4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a76      	ldr	r2, [pc, #472]	; (800076c <MX_GPIO_Init+0x1f4>)
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b74      	ldr	r3, [pc, #464]	; (800076c <MX_GPIO_Init+0x1f4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0304 	and.w	r3, r3, #4
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	4b71      	ldr	r3, [pc, #452]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a70      	ldr	r2, [pc, #448]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b6e      	ldr	r3, [pc, #440]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ba:	617b      	str	r3, [r7, #20]
 80005bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a6a      	ldr	r2, [pc, #424]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b68      	ldr	r3, [pc, #416]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b65      	ldr	r3, [pc, #404]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a64      	ldr	r2, [pc, #400]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005dc:	f043 0302 	orr.w	r3, r3, #2
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0302 	and.w	r3, r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005ee:	4b5f      	ldr	r3, [pc, #380]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a5e      	ldr	r2, [pc, #376]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005f4:	f043 0308 	orr.w	r3, r3, #8
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b5c      	ldr	r3, [pc, #368]	; (800076c <MX_GPIO_Init+0x1f4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0308 	and.w	r3, r3, #8
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000606:	4b59      	ldr	r3, [pc, #356]	; (800076c <MX_GPIO_Init+0x1f4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a58      	ldr	r2, [pc, #352]	; (800076c <MX_GPIO_Init+0x1f4>)
 800060c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b56      	ldr	r3, [pc, #344]	; (800076c <MX_GPIO_Init+0x1f4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f244 0181 	movw	r1, #16513	; 0x4081
 8000624:	4852      	ldr	r0, [pc, #328]	; (8000770 <MX_GPIO_Init+0x1f8>)
 8000626:	f001 fa1d 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2140      	movs	r1, #64	; 0x40
 800062e:	4851      	ldr	r0, [pc, #324]	; (8000774 <MX_GPIO_Init+0x1fc>)
 8000630:	f001 fa18 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000638:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800063e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	484b      	ldr	r0, [pc, #300]	; (8000778 <MX_GPIO_Init+0x200>)
 800064c:	f001 f85e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000650:	2332      	movs	r3, #50	; 0x32
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065c:	2303      	movs	r3, #3
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000660:	230b      	movs	r3, #11
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000664:	f107 031c 	add.w	r3, r7, #28
 8000668:	4619      	mov	r1, r3
 800066a:	4843      	ldr	r0, [pc, #268]	; (8000778 <MX_GPIO_Init+0x200>)
 800066c:	f001 f84e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000670:	2386      	movs	r3, #134	; 0x86
 8000672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067c:	2303      	movs	r3, #3
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000680:	230b      	movs	r3, #11
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4619      	mov	r1, r3
 800068a:	483c      	ldr	r0, [pc, #240]	; (800077c <MX_GPIO_Init+0x204>)
 800068c:	f001 f83e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000690:	f244 0381 	movw	r3, #16513	; 0x4081
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	2301      	movs	r3, #1
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	4619      	mov	r1, r3
 80006a8:	4831      	ldr	r0, [pc, #196]	; (8000770 <MX_GPIO_Init+0x1f8>)
 80006aa:	f001 f82f 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b4:	2302      	movs	r3, #2
 80006b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	2300      	movs	r3, #0
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c0:	230b      	movs	r3, #11
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4829      	ldr	r0, [pc, #164]	; (8000770 <MX_GPIO_Init+0x1f8>)
 80006cc:	f001 f81e 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006d0:	2340      	movs	r3, #64	; 0x40
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4823      	ldr	r0, [pc, #140]	; (8000774 <MX_GPIO_Init+0x1fc>)
 80006e8:	f001 f810 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f0:	2300      	movs	r3, #0
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	481d      	ldr	r0, [pc, #116]	; (8000774 <MX_GPIO_Init+0x1fc>)
 8000700:	f001 f804 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000704:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000716:	230a      	movs	r3, #10
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <MX_GPIO_Init+0x204>)
 8000722:	f000 fff3 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	4619      	mov	r1, r3
 800073a:	4810      	ldr	r0, [pc, #64]	; (800077c <MX_GPIO_Init+0x204>)
 800073c:	f000 ffe6 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000740:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000746:	2302      	movs	r3, #2
 8000748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074e:	2303      	movs	r3, #3
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000752:	230b      	movs	r3, #11
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0x1fc>)
 800075e:	f000 ffd5 	bl	800170c <HAL_GPIO_Init>

}
 8000762:	bf00      	nop
 8000764:	3730      	adds	r7, #48	; 0x30
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40020400 	.word	0x40020400
 8000774:	40021800 	.word	0x40021800
 8000778:	40020800 	.word	0x40020800
 800077c:	40020000 	.word	0x40020000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000786:	f000 fa24 	bl	8000bd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078a:	f000 f829 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f7ff fef3 	bl	8000578 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f92b 	bl	80009ec <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000796:	f7ff fed1 	bl	800053c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart3, rx_data, sizeof(rx_data)/sizeof(rx_data[0]));
 800079a:	220b      	movs	r2, #11
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <main+0x50>)
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x54>)
 80007a0:	f002 fbc1 	bl	8002f26 <HAL_UART_Receive_DMA>
  uint8_t msg[13] = "Hello World\r\n";
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <main+0x58>)
 80007a6:	463c      	mov	r4, r7
 80007a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007aa:	c407      	stmia	r4!, {r0, r1, r2}
 80007ac:	7023      	strb	r3, [r4, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <main+0x5c>)
 80007b4:	f001 f96f 	bl	8001a96 <HAL_GPIO_TogglePin>
	  HAL_UART_Transmit(&huart3, msg, sizeof(msg)/sizeof(msg[0]), 10);
 80007b8:	4639      	mov	r1, r7
 80007ba:	230a      	movs	r3, #10
 80007bc:	220d      	movs	r2, #13
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <main+0x54>)
 80007c0:	f002 fb2e 	bl	8002e20 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80007c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c8:	f000 fa60 	bl	8000c8c <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007cc:	e7ef      	b.n	80007ae <main+0x2e>
 80007ce:	bf00      	nop
 80007d0:	20000028 	.word	0x20000028
 80007d4:	20000034 	.word	0x20000034
 80007d8:	08004344 	.word	0x08004344
 80007dc:	40020400 	.word	0x40020400

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	; 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2234      	movs	r2, #52	; 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fd94 	bl	800431c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000804:	f001 f962 	bl	8001acc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b2c      	ldr	r3, [pc, #176]	; (80008bc <SystemClock_Config+0xdc>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <SystemClock_Config+0xdc>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xdc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	4b27      	ldr	r3, [pc, #156]	; (80008c0 <SystemClock_Config+0xe0>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <SystemClock_Config+0xe0>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xe0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000840:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000844:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000854:	2360      	movs	r3, #96	; 0x60
 8000856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000860:	2302      	movs	r3, #2
 8000862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f98f 	bl	8001b8c <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000874:	f000 f840 	bl	80008f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000878:	f001 f938 	bl	8001aec <HAL_PWREx_EnableOverDrive>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000882:	f000 f839 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	230f      	movs	r3, #15
 8000888:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2103      	movs	r1, #3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fc20 	bl	80020e8 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ae:	f000 f823 	bl	80008f8 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <HAL_UART_RxCpltCallback+0x28>)
 80008d2:	f001 f8e0 	bl	8001a96 <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, rx_data, sizeof(rx_data)/sizeof(rx_data[0]), 10);
 80008d6:	230a      	movs	r3, #10
 80008d8:	220b      	movs	r2, #11
 80008da:	4905      	ldr	r1, [pc, #20]	; (80008f0 <HAL_UART_RxCpltCallback+0x2c>)
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <HAL_UART_RxCpltCallback+0x30>)
 80008de:	f002 fa9f 	bl	8002e20 <HAL_UART_Transmit>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40020400 	.word	0x40020400
 80008f0:	20000028 	.word	0x20000028
 80008f4:	20000034 	.word	0x20000034

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	e7fe      	b.n	8000900 <Error_Handler+0x8>
	...

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <HAL_MspInit+0x44>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a0e      	ldr	r2, [pc, #56]	; (8000948 <HAL_MspInit+0x44>)
 8000910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <HAL_MspInit+0x44>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x44>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x44>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6453      	str	r3, [r2, #68]	; 0x44
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x44>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <NMI_Handler+0x4>

08000952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <MemManage_Handler+0x4>

0800095e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000962:	e7fe      	b.n	8000962 <BusFault_Handler+0x4>

08000964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <UsageFault_Handler+0x4>

0800096a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000998:	f000 f958 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}

080009a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <DMA1_Stream1_IRQHandler+0x10>)
 80009a6:	f000 fc47 	bl	8001238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000bc 	.word	0x200000bc

080009b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <USART3_IRQHandler+0x10>)
 80009ba:	f002 faf9 	bl	8002fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000034 	.word	0x20000034

080009c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART3_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART3_UART_Init+0x58>)
 8000a30:	f002 f9a8 	bl	8002d84 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f7ff ff5d 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000034 	.word	0x20000034
 8000a48:	40004800 	.word	0x40004800

08000a4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0ae      	sub	sp, #184	; 0xb8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2290      	movs	r2, #144	; 0x90
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 fc55 	bl	800431c <memset>
  if(uartHandle->Instance==USART3)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a3d      	ldr	r2, [pc, #244]	; (8000b6c <HAL_UART_MspInit+0x120>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d173      	bne.n	8000b64 <HAL_UART_MspInit+0x118>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fd52 	bl	8002534 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a96:	f7ff ff2f 	bl	80008f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9a:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a34      	ldr	r2, [pc, #208]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000aa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b32      	ldr	r3, [pc, #200]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000ab8:	f043 0308 	orr.w	r3, r3, #8
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b2c      	ldr	r3, [pc, #176]	; (8000b70 <HAL_UART_MspInit+0x124>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0308 	and.w	r3, r3, #8
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ace:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4820      	ldr	r0, [pc, #128]	; (8000b74 <HAL_UART_MspInit+0x128>)
 8000af2:	f000 fe0b 	bl	800170c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000af8:	4a20      	ldr	r2, [pc, #128]	; (8000b7c <HAL_UART_MspInit+0x130>)
 8000afa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000afe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b02:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0a:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000b24:	4b14      	ldr	r3, [pc, #80]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b3a:	f000 f9dd 	bl	8000ef8 <HAL_DMA_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000b44:	f7ff fed8 	bl	80008f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b4c:	675a      	str	r2, [r3, #116]	; 0x74
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_UART_MspInit+0x12c>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2027      	movs	r0, #39	; 0x27
 8000b5a:	f000 f996 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b5e:	2027      	movs	r0, #39	; 0x27
 8000b60:	f000 f9af 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b64:	bf00      	nop
 8000b66:	37b8      	adds	r7, #184	; 0xb8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004800 	.word	0x40004800
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020c00 	.word	0x40020c00
 8000b78:	200000bc 	.word	0x200000bc
 8000b7c:	40026028 	.word	0x40026028

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b86:	490e      	ldr	r1, [pc, #56]	; (8000bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b88:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b9c:	4c0b      	ldr	r4, [pc, #44]	; (8000bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000baa:	f7ff ff0d 	bl	80009c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f003 fb91 	bl	80042d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fde5 	bl	8000780 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc4:	08004384 	.word	0x08004384
  ldr r2, =_sbss
 8000bc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bcc:	20000120 	.word	0x20000120

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>

08000bd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f000 f94c 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f805 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be2:	f7ff fe8f 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	bd80      	pop	{r7, pc}

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f967 	bl	8000ede <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f000 f92f 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000011c 	.word	0x2000011c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	2000011c 	.word	0x2000011c

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x40>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00
 8000d18:	05fa0000 	.word	0x05fa0000

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	; (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff feb6 	bl	8000c74 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e099      	b.n	8001048 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2202      	movs	r2, #2
 8000f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0201 	bic.w	r2, r2, #1
 8000f32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f34:	e00f      	b.n	8000f56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f36:	f7ff fe9d 	bl	8000c74 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d908      	bls.n	8000f56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2220      	movs	r2, #32
 8000f48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f52:	2303      	movs	r3, #3
 8000f54:	e078      	b.n	8001048 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e8      	bne.n	8000f36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_DMA_Init+0x158>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d107      	bne.n	8000fc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f023 0307 	bic.w	r3, r3, #7
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	d117      	bne.n	800101a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00e      	beq.n	800101a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fb09 	bl	8001614 <DMA_CheckFifoParam>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d008      	beq.n	800101a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2240      	movs	r2, #64	; 0x40
 800100c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001016:	2301      	movs	r3, #1
 8001018:	e016      	b.n	8001048 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f000 fac0 	bl	80015a8 <DMA_CalcBaseAndBitshift>
 8001028:	4603      	mov	r3, r0
 800102a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001030:	223f      	movs	r2, #63	; 0x3f
 8001032:	409a      	lsls	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	e010803f 	.word	0xe010803f

08001054 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_DMA_Start_IT+0x26>
 8001076:	2302      	movs	r3, #2
 8001078:	e048      	b.n	800110c <HAL_DMA_Start_IT+0xb8>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d137      	bne.n	80010fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2200      	movs	r2, #0
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	68f8      	ldr	r0, [r7, #12]
 80010a4:	f000 fa52 	bl	800154c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ac:	223f      	movs	r2, #63	; 0x3f
 80010ae:	409a      	lsls	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0216 	orr.w	r2, r2, #22
 80010c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d007      	beq.n	80010ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0208 	orr.w	r2, r2, #8
 80010ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e005      	b.n	800110a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001106:	2302      	movs	r3, #2
 8001108:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800110a:	7dfb      	ldrb	r3, [r7, #23]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001120:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001122:	f7ff fda7 	bl	8000c74 <HAL_GetTick>
 8001126:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800112e:	b2db      	uxtb	r3, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d008      	beq.n	8001146 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e052      	b.n	80011ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0216 	bic.w	r2, r2, #22
 8001154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	2b00      	cmp	r3, #0
 800116c:	d103      	bne.n	8001176 <HAL_DMA_Abort+0x62>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 0208 	bic.w	r2, r2, #8
 8001184:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f022 0201 	bic.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001196:	e013      	b.n	80011c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001198:	f7ff fd6c 	bl	8000c74 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b05      	cmp	r3, #5
 80011a4:	d90c      	bls.n	80011c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2203      	movs	r2, #3
 80011b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e015      	b.n	80011ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1e4      	bne.n	8001198 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d2:	223f      	movs	r2, #63	; 0x3f
 80011d4:	409a      	lsls	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d004      	beq.n	8001212 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00c      	b.n	800122c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0201 	bic.w	r2, r2, #1
 8001228:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001244:	4b8e      	ldr	r3, [pc, #568]	; (8001480 <HAL_DMA_IRQHandler+0x248>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a8e      	ldr	r2, [pc, #568]	; (8001484 <HAL_DMA_IRQHandler+0x24c>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	0a9b      	lsrs	r3, r3, #10
 8001250:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001262:	2208      	movs	r2, #8
 8001264:	409a      	lsls	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d01a      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0304 	and.w	r3, r3, #4
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0204 	bic.w	r2, r2, #4
 800128a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001290:	2208      	movs	r2, #8
 8001292:	409a      	lsls	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	f043 0201 	orr.w	r2, r3, #1
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a8:	2201      	movs	r2, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d012      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00b      	beq.n	80012da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c6:	2201      	movs	r2, #1
 80012c8:	409a      	lsls	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d2:	f043 0202 	orr.w	r2, r3, #2
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012de:	2204      	movs	r2, #4
 80012e0:	409a      	lsls	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d012      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2204      	movs	r2, #4
 80012fe:	409a      	lsls	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001314:	2210      	movs	r2, #16
 8001316:	409a      	lsls	r2, r3
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d043      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	2b00      	cmp	r3, #0
 800132c:	d03c      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2210      	movs	r2, #16
 8001334:	409a      	lsls	r2, r3
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d018      	beq.n	800137a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d108      	bne.n	8001368 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	2b00      	cmp	r3, #0
 800135c:	d024      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
 8001366:	e01f      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
 8001378:	e016      	b.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d107      	bne.n	8001398 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0208 	bic.w	r2, r2, #8
 8001396:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ac:	2220      	movs	r2, #32
 80013ae:	409a      	lsls	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 808f 	beq.w	80014d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 8087 	beq.w	80014d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ce:	2220      	movs	r2, #32
 80013d0:	409a      	lsls	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d136      	bne.n	8001450 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 0216 	bic.w	r2, r2, #22
 80013f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	695a      	ldr	r2, [r3, #20]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001400:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <HAL_DMA_IRQHandler+0x1da>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0208 	bic.w	r2, r2, #8
 8001420:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001426:	223f      	movs	r2, #63	; 0x3f
 8001428:	409a      	lsls	r2, r3
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001442:	2b00      	cmp	r3, #0
 8001444:	d07e      	beq.n	8001544 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4798      	blx	r3
        }
        return;
 800144e:	e079      	b.n	8001544 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01d      	beq.n	800149a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10d      	bne.n	8001488 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001470:	2b00      	cmp	r3, #0
 8001472:	d031      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	4798      	blx	r3
 800147c:	e02c      	b.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
 800147e:	bf00      	nop
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	2b00      	cmp	r3, #0
 800148e:	d023      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4798      	blx	r3
 8001498:	e01e      	b.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10f      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f022 0210 	bic.w	r2, r2, #16
 80014b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d032      	beq.n	8001546 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d022      	beq.n	8001532 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2205      	movs	r2, #5
 80014f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	429a      	cmp	r2, r3
 800150e:	d307      	bcc.n	8001520 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f2      	bne.n	8001504 <HAL_DMA_IRQHandler+0x2cc>
 800151e:	e000      	b.n	8001522 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001520:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
 8001542:	e000      	b.n	8001546 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001544:	bf00      	nop
    }
  }
}
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d108      	bne.n	800158c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800158a:	e007      	b.n	800159c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	60da      	str	r2, [r3, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	3b10      	subs	r3, #16
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <DMA_CalcBaseAndBitshift+0x60>)
 80015ba:	fba2 2303 	umull	r2, r3, r2, r3
 80015be:	091b      	lsrs	r3, r3, #4
 80015c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <DMA_CalcBaseAndBitshift+0x64>)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	4413      	add	r3, r2
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d908      	bls.n	80015e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <DMA_CalcBaseAndBitshift+0x68>)
 80015de:	4013      	ands	r3, r2
 80015e0:	1d1a      	adds	r2, r3, #4
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	659a      	str	r2, [r3, #88]	; 0x58
 80015e6:	e006      	b.n	80015f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <DMA_CalcBaseAndBitshift+0x68>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	aaaaaaab 	.word	0xaaaaaaab
 800160c:	0800436c 	.word	0x0800436c
 8001610:	fffffc00 	.word	0xfffffc00

08001614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d11f      	bne.n	800166e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d856      	bhi.n	80016e2 <DMA_CheckFifoParam+0xce>
 8001634:	a201      	add	r2, pc, #4	; (adr r2, 800163c <DMA_CheckFifoParam+0x28>)
 8001636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800163a:	bf00      	nop
 800163c:	0800164d 	.word	0x0800164d
 8001640:	0800165f 	.word	0x0800165f
 8001644:	0800164d 	.word	0x0800164d
 8001648:	080016e3 	.word	0x080016e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d046      	beq.n	80016e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800165c:	e043      	b.n	80016e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001666:	d140      	bne.n	80016ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166c:	e03d      	b.n	80016ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001676:	d121      	bne.n	80016bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d837      	bhi.n	80016ee <DMA_CheckFifoParam+0xda>
 800167e:	a201      	add	r2, pc, #4	; (adr r2, 8001684 <DMA_CheckFifoParam+0x70>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	08001695 	.word	0x08001695
 8001688:	0800169b 	.word	0x0800169b
 800168c:	08001695 	.word	0x08001695
 8001690:	080016ad 	.word	0x080016ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
      break;
 8001698:	e030      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d025      	beq.n	80016f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016aa:	e022      	b.n	80016f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016b4:	d11f      	bne.n	80016f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016ba:	e01c      	b.n	80016f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d903      	bls.n	80016ca <DMA_CheckFifoParam+0xb6>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d003      	beq.n	80016d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016c8:	e018      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
      break;
 80016ce:	e015      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00e      	beq.n	80016fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
      break;
 80016e0:	e00b      	b.n	80016fa <DMA_CheckFifoParam+0xe6>
      break;
 80016e2:	bf00      	nop
 80016e4:	e00a      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016e6:	bf00      	nop
 80016e8:	e008      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ea:	bf00      	nop
 80016ec:	e006      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016ee:	bf00      	nop
 80016f0:	e004      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016f2:	bf00      	nop
 80016f4:	e002      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;   
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <DMA_CheckFifoParam+0xe8>
      break;
 80016fa:	bf00      	nop
    }
  } 
  
  return status; 
 80016fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001722:	2300      	movs	r3, #0
 8001724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	e175      	b.n	8001a18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800172c:	2201      	movs	r2, #1
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	f040 8164 	bne.w	8001a12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d005      	beq.n	8001762 <HAL_GPIO_Init+0x56>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d130      	bne.n	80017c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001798:	2201      	movs	r2, #1
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	f003 0201 	and.w	r2, r3, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d017      	beq.n	8001800 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d123      	bne.n	8001854 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	08da      	lsrs	r2, r3, #3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3208      	adds	r2, #8
 8001814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	08da      	lsrs	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3208      	adds	r2, #8
 800184e:	69b9      	ldr	r1, [r7, #24]
 8001850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 80be 	beq.w	8001a12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018ae:	4a61      	ldr	r2, [pc, #388]	; (8001a34 <HAL_GPIO_Init+0x328>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_GPIO_Init+0x32c>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d037      	beq.n	800194a <HAL_GPIO_Init+0x23e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a57      	ldr	r2, [pc, #348]	; (8001a3c <HAL_GPIO_Init+0x330>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_GPIO_Init+0x23a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a56      	ldr	r2, [pc, #344]	; (8001a40 <HAL_GPIO_Init+0x334>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d02b      	beq.n	8001942 <HAL_GPIO_Init+0x236>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a55      	ldr	r2, [pc, #340]	; (8001a44 <HAL_GPIO_Init+0x338>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d025      	beq.n	800193e <HAL_GPIO_Init+0x232>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x33c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x22e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <HAL_GPIO_Init+0x340>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x22a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_GPIO_Init+0x344>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x226>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a51      	ldr	r2, [pc, #324]	; (8001a54 <HAL_GPIO_Init+0x348>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x222>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a50      	ldr	r2, [pc, #320]	; (8001a58 <HAL_GPIO_Init+0x34c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x21e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4f      	ldr	r2, [pc, #316]	; (8001a5c <HAL_GPIO_Init+0x350>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x21a>
 8001922:	2309      	movs	r3, #9
 8001924:	e012      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001926:	230a      	movs	r3, #10
 8001928:	e010      	b.n	800194c <HAL_GPIO_Init+0x240>
 800192a:	2308      	movs	r3, #8
 800192c:	e00e      	b.n	800194c <HAL_GPIO_Init+0x240>
 800192e:	2307      	movs	r3, #7
 8001930:	e00c      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001932:	2306      	movs	r3, #6
 8001934:	e00a      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001936:	2305      	movs	r3, #5
 8001938:	e008      	b.n	800194c <HAL_GPIO_Init+0x240>
 800193a:	2304      	movs	r3, #4
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x240>
 800193e:	2303      	movs	r3, #3
 8001940:	e004      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001942:	2302      	movs	r3, #2
 8001944:	e002      	b.n	800194c <HAL_GPIO_Init+0x240>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_GPIO_Init+0x240>
 800194a:	2300      	movs	r3, #0
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f002 0203 	and.w	r2, r2, #3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4093      	lsls	r3, r2
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	4313      	orrs	r3, r2
 800195a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800195c:	4935      	ldr	r1, [pc, #212]	; (8001a34 <HAL_GPIO_Init+0x328>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_GPIO_Init+0x354>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198e:	4a34      	ldr	r2, [pc, #208]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001994:	4b32      	ldr	r3, [pc, #200]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b8:	4a29      	ldr	r2, [pc, #164]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019be:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019e2:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_GPIO_Init+0x354>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a0c:	4a14      	ldr	r2, [pc, #80]	; (8001a60 <HAL_GPIO_Init+0x354>)
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	2b0f      	cmp	r3, #15
 8001a1c:	f67f ae86 	bls.w	800172c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40020000 	.word	0x40020000
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020800 	.word	0x40020800
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40021400 	.word	0x40021400
 8001a50:	40021800 	.word	0x40021800
 8001a54:	40021c00 	.word	0x40021c00
 8001a58:	40022000 	.word	0x40022000
 8001a5c:	40022400 	.word	0x40022400
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	041a      	lsls	r2, r3, #16
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	400b      	ands	r3, r1
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	619a      	str	r2, [r3, #24]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a04      	ldr	r2, [pc, #16]	; (8001ae8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000

08001aec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a22      	ldr	r2, [pc, #136]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_EnableOverDrive+0x98>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001b0e:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1a:	f7ff f8ab 	bl	8000c74 <HAL_GetTick>
 8001b1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b20:	e009      	b.n	8001b36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b22:	f7ff f8a7 	bl	8000c74 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b30:	d901      	bls.n	8001b36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e022      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b42:	d1ee      	bne.n	8001b22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b50:	f7ff f890 	bl	8000c74 <HAL_GetTick>
 8001b54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b56:	e009      	b.n	8001b6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001b58:	f7ff f88c 	bl	8000c74 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b66:	d901      	bls.n	8001b6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e007      	b.n	8001b7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b78:	d1ee      	bne.n	8001b58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e29b      	b.n	80020da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f000 8087 	beq.w	8001cbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bb0:	4b96      	ldr	r3, [pc, #600]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d00c      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bbc:	4b93      	ldr	r3, [pc, #588]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d112      	bne.n	8001bee <HAL_RCC_OscConfig+0x62>
 8001bc8:	4b90      	ldr	r3, [pc, #576]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bd4:	d10b      	bne.n	8001bee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x130>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d168      	bne.n	8001cbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e275      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_OscConfig+0x7a>
 8001bf8:	4b84      	ldr	r3, [pc, #528]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a83      	ldr	r2, [pc, #524]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e02e      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x9c>
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b7c      	ldr	r3, [pc, #496]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7b      	ldr	r2, [pc, #492]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e01d      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0xc0>
 8001c32:	4b76      	ldr	r3, [pc, #472]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b73      	ldr	r3, [pc, #460]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a72      	ldr	r2, [pc, #456]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e00b      	b.n	8001c64 <HAL_RCC_OscConfig+0xd8>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6b      	ldr	r2, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f802 	bl	8000c74 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7fe fffe 	bl	8000c74 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e229      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0xe8>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7fe ffee 	bl	8000c74 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7fe ffea 	bl	8000c74 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e215      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	4b57      	ldr	r3, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x110>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d069      	beq.n	8001d9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cca:	4b50      	ldr	r3, [pc, #320]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cd6:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d11c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x190>
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	4b47      	ldr	r3, [pc, #284]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x17a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d001      	beq.n	8001d06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e1e9      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	493d      	ldr	r1, [pc, #244]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	e040      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d023      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d24:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a38      	ldr	r2, [pc, #224]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7fe ffa0 	bl	8000c74 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d38:	f7fe ff9c 	bl	8000c74 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e1c7      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d4a:	4b30      	ldr	r3, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b2d      	ldr	r3, [pc, #180]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4929      	ldr	r1, [pc, #164]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	600b      	str	r3, [r1, #0]
 8001d6a:	e018      	b.n	8001d9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7fe ff7c 	bl	8000c74 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7fe ff78 	bl	8000c74 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1a3      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d038      	beq.n	8001e1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7fe ff59 	bl	8000c74 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7fe ff55 	bl	8000c74 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e180      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x23a>
 8001de4:	e01a      	b.n	8001e1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x280>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df2:	f7fe ff3f 	bl	8000c74 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7fe ff3b 	bl	8000c74 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d903      	bls.n	8001e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e166      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
 8001e0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e10:	4b92      	ldr	r3, [pc, #584]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f000 80a4 	beq.w	8001f72 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e2a:	4b8c      	ldr	r3, [pc, #560]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a88      	ldr	r2, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e52:	4b83      	ldr	r3, [pc, #524]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d118      	bne.n	8001e90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7f      	ldr	r2, [pc, #508]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e6a:	f7fe ff03 	bl	8000c74 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e72:	f7fe feff 	bl	8000c74 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e12a      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e84:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x4d4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f0      	beq.n	8001e72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d106      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x31a>
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9c:	4a6f      	ldr	r2, [pc, #444]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea4:	e02d      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x33c>
 8001eae:	4b6b      	ldr	r3, [pc, #428]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	4a6a      	ldr	r2, [pc, #424]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eba:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	4a67      	ldr	r2, [pc, #412]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	f023 0304 	bic.w	r3, r3, #4
 8001ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec6:	e01c      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b05      	cmp	r3, #5
 8001ece:	d10c      	bne.n	8001eea <HAL_RCC_OscConfig+0x35e>
 8001ed0:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	4a61      	ldr	r2, [pc, #388]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6713      	str	r3, [r2, #112]	; 0x70
 8001edc:	4b5f      	ldr	r3, [pc, #380]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee0:	4a5e      	ldr	r2, [pc, #376]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee8:	e00b      	b.n	8001f02 <HAL_RCC_OscConfig+0x376>
 8001eea:	4b5c      	ldr	r3, [pc, #368]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a5b      	ldr	r2, [pc, #364]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	f023 0301 	bic.w	r3, r3, #1
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001efc:	f023 0304 	bic.w	r3, r3, #4
 8001f00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d015      	beq.n	8001f36 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f0a:	f7fe feb3 	bl	8000c74 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f10:	e00a      	b.n	8001f28 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f12:	f7fe feaf 	bl	8000c74 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e0d8      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0ee      	beq.n	8001f12 <HAL_RCC_OscConfig+0x386>
 8001f34:	e014      	b.n	8001f60 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7fe fe9d 	bl	8000c74 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fe99 	bl	8000c74 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0c2      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f54:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1ee      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d105      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a3c      	ldr	r2, [pc, #240]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80ae 	beq.w	80020d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f7c:	4b37      	ldr	r3, [pc, #220]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d06d      	beq.n	8002064 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d14b      	bne.n	8002028 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f90:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a31      	ldr	r2, [pc, #196]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fe6a 	bl	8000c74 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe fe66 	bl	8000c74 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e091      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	071b      	lsls	r3, r3, #28
 8001fee:	491b      	ldr	r1, [pc, #108]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a18      	ldr	r2, [pc, #96]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002000:	f7fe fe38 	bl	8000c74 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7fe fe34 	bl	8000c74 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e05f      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x47c>
 8002026:	e057      	b.n	80020d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002028:	4b0c      	ldr	r3, [pc, #48]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 800202e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7fe fe1e 	bl	8000c74 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7fe fe1a 	bl	8000c74 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e045      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_OscConfig+0x4d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x4b0>
 800205a:	e03d      	b.n	80020d8 <HAL_RCC_OscConfig+0x54c>
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <HAL_RCC_OscConfig+0x558>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d030      	beq.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d129      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d122      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002094:	4013      	ands	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800209a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800209c:	4293      	cmp	r3, r2
 800209e:	d119      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10f      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d107      	bne.n	80020d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d001      	beq.n	80020d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800

080020e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 020f 	bic.w	r2, r3, #15
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800214e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002152:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800216a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021dc:	f7fe fd4a 	bl	8000c74 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fd46 	bl	8000c74 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 020f 	bic.w	r2, r3, #15
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002256:	4313      	orrs	r3, r2
 8002258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4602      	mov	r2, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	490a      	ldr	r1, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1cc>)
 800228c:	5ccb      	ldrb	r3, [r1, r3]
 800228e:	fa22 f303 	lsr.w	r3, r2, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fca6 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023c00 	.word	0x40023c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	08004354 	.word	0x08004354
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022c4:	b094      	sub	sp, #80	; 0x50
 80022c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
 80022cc:	2300      	movs	r3, #0
 80022ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022d0:	2300      	movs	r3, #0
 80022d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022d8:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 030c 	and.w	r3, r3, #12
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d00d      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x40>
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	f200 80e1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x34>
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_GetSysClockFreq+0x3a>
 80022f2:	e0db      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022f8:	e0db      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022fe:	e0d8      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002300:	4b6f      	ldr	r3, [pc, #444]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002308:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800230a:	4b6d      	ldr	r3, [pc, #436]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d063      	beq.n	80023de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
 800232a:	2300      	movs	r3, #0
 800232c:	637b      	str	r3, [r7, #52]	; 0x34
 800232e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002332:	4622      	mov	r2, r4
 8002334:	462b      	mov	r3, r5
 8002336:	f04f 0000 	mov.w	r0, #0
 800233a:	f04f 0100 	mov.w	r1, #0
 800233e:	0159      	lsls	r1, r3, #5
 8002340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002344:	0150      	lsls	r0, r2, #5
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4621      	mov	r1, r4
 800234c:	1a51      	subs	r1, r2, r1
 800234e:	6139      	str	r1, [r7, #16]
 8002350:	4629      	mov	r1, r5
 8002352:	eb63 0301 	sbc.w	r3, r3, r1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002364:	4659      	mov	r1, fp
 8002366:	018b      	lsls	r3, r1, #6
 8002368:	4651      	mov	r1, sl
 800236a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800236e:	4651      	mov	r1, sl
 8002370:	018a      	lsls	r2, r1, #6
 8002372:	4651      	mov	r1, sl
 8002374:	ebb2 0801 	subs.w	r8, r2, r1
 8002378:	4659      	mov	r1, fp
 800237a:	eb63 0901 	sbc.w	r9, r3, r1
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	f04f 0300 	mov.w	r3, #0
 8002386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800238a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800238e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002392:	4690      	mov	r8, r2
 8002394:	4699      	mov	r9, r3
 8002396:	4623      	mov	r3, r4
 8002398:	eb18 0303 	adds.w	r3, r8, r3
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	462b      	mov	r3, r5
 80023a0:	eb49 0303 	adc.w	r3, r9, r3
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023b2:	4629      	mov	r1, r5
 80023b4:	024b      	lsls	r3, r1, #9
 80023b6:	4621      	mov	r1, r4
 80023b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023bc:	4621      	mov	r1, r4
 80023be:	024a      	lsls	r2, r1, #9
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023c6:	2200      	movs	r2, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023d0:	f7fd ff32 	bl	8000238 <__aeabi_uldivmod>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4613      	mov	r3, r2
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	e058      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023de:	4b38      	ldr	r3, [pc, #224]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	2200      	movs	r2, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	4611      	mov	r1, r2
 80023ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
 80023f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023f8:	4642      	mov	r2, r8
 80023fa:	464b      	mov	r3, r9
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	0159      	lsls	r1, r3, #5
 8002406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240a:	0150      	lsls	r0, r2, #5
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4641      	mov	r1, r8
 8002412:	ebb2 0a01 	subs.w	sl, r2, r1
 8002416:	4649      	mov	r1, r9
 8002418:	eb63 0b01 	sbc.w	fp, r3, r1
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800242c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002430:	ebb2 040a 	subs.w	r4, r2, sl
 8002434:	eb63 050b 	sbc.w	r5, r3, fp
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	00eb      	lsls	r3, r5, #3
 8002442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002446:	00e2      	lsls	r2, r4, #3
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	4643      	mov	r3, r8
 800244e:	18e3      	adds	r3, r4, r3
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	464b      	mov	r3, r9
 8002454:	eb45 0303 	adc.w	r3, r5, r3
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002466:	4629      	mov	r1, r5
 8002468:	028b      	lsls	r3, r1, #10
 800246a:	4621      	mov	r1, r4
 800246c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002470:	4621      	mov	r1, r4
 8002472:	028a      	lsls	r2, r1, #10
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800247a:	2200      	movs	r2, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	61fa      	str	r2, [r7, #28]
 8002480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002484:	f7fd fed8 	bl	8000238 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4613      	mov	r3, r2
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80024a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024aa:	e002      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3750      	adds	r7, #80	; 0x50
 80024b8:	46bd      	mov	sp, r7
 80024ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08004364 	.word	0x08004364

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08004364 	.word	0x08004364

08002534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d012      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800255c:	4b69      	ldr	r3, [pc, #420]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a68      	ldr	r2, [pc, #416]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002566:	6093      	str	r3, [r2, #8]
 8002568:	4b66      	ldr	r3, [pc, #408]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002570:	4964      	ldr	r1, [pc, #400]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002572:	4313      	orrs	r3, r2
 8002574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800257e:	2301      	movs	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d017      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800258e:	4b5d      	ldr	r3, [pc, #372]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259c:	4959      	ldr	r1, [pc, #356]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80025ba:	2301      	movs	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d017      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025ca:	4b4e      	ldr	r3, [pc, #312]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	494a      	ldr	r1, [pc, #296]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e8:	d101      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025f6:	2301      	movs	r3, #1
 80025f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0320 	and.w	r3, r3, #32
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808b 	beq.w	800272e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002618:	4b3a      	ldr	r3, [pc, #232]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	4a39      	ldr	r2, [pc, #228]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	; 0x40
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002630:	4b35      	ldr	r3, [pc, #212]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a34      	ldr	r2, [pc, #208]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe fb1a 	bl	8000c74 <HAL_GetTick>
 8002640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe fb16 	bl	8000c74 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	; 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e38f      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002656:	4b2c      	ldr	r3, [pc, #176]	; (8002708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b28      	ldr	r3, [pc, #160]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d035      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d02e      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b20      	ldr	r3, [pc, #128]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a1a      	ldr	r2, [pc, #104]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80026a2:	4a18      	ldr	r2, [pc, #96]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80026a8:	4b16      	ldr	r3, [pc, #88]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d114      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fade 	bl	8000c74 <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe fada 	bl	8000c74 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e351      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d2:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0ee      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026ea:	d111      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026fa:	400b      	ands	r3, r1
 80026fc:	4901      	ldr	r1, [pc, #4]	; (8002704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
 8002702:	e00b      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002704:	40023800 	.word	0x40023800
 8002708:	40007000 	.word	0x40007000
 800270c:	0ffffcff 	.word	0x0ffffcff
 8002710:	4bac      	ldr	r3, [pc, #688]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4aab      	ldr	r2, [pc, #684]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	4ba9      	ldr	r3, [pc, #676]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	49a6      	ldr	r1, [pc, #664]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800272a:	4313      	orrs	r3, r2
 800272c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0310 	and.w	r3, r3, #16
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800273a:	4ba2      	ldr	r3, [pc, #648]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800273c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002740:	4aa0      	ldr	r2, [pc, #640]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800274a:	4b9e      	ldr	r3, [pc, #632]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002754:	499b      	ldr	r1, [pc, #620]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002768:	4b96      	ldr	r3, [pc, #600]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800276a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002776:	4993      	ldr	r1, [pc, #588]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800278a:	4b8e      	ldr	r3, [pc, #568]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800278c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002798:	498a      	ldr	r1, [pc, #552]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ac:	4b85      	ldr	r3, [pc, #532]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ba:	4982      	ldr	r1, [pc, #520]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027ce:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4979      	ldr	r1, [pc, #484]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f0:	4b74      	ldr	r3, [pc, #464]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4971      	ldr	r1, [pc, #452]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002812:	4b6c      	ldr	r3, [pc, #432]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f023 020c 	bic.w	r2, r3, #12
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002820:	4968      	ldr	r1, [pc, #416]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002834:	4b63      	ldr	r3, [pc, #396]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	4960      	ldr	r1, [pc, #384]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002856:	4b5b      	ldr	r3, [pc, #364]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002864:	4957      	ldr	r1, [pc, #348]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002878:	4b52      	ldr	r3, [pc, #328]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	494f      	ldr	r1, [pc, #316]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800289a:	4b4a      	ldr	r3, [pc, #296]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	4946      	ldr	r1, [pc, #280]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80028bc:	4b41      	ldr	r3, [pc, #260]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ca:	493e      	ldr	r1, [pc, #248]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028de:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ec:	4935      	ldr	r1, [pc, #212]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002900:	4b30      	ldr	r3, [pc, #192]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800290e:	492d      	ldr	r1, [pc, #180]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d011      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002922:	4b28      	ldr	r3, [pc, #160]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002930:	4924      	ldr	r1, [pc, #144]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800293c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002940:	d101      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002952:	2301      	movs	r3, #1
 8002954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002962:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002970:	4914      	ldr	r1, [pc, #80]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002994:	490b      	ldr	r1, [pc, #44]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00f      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029b8:	4902      	ldr	r1, [pc, #8]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029c0:	e002      	b.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80029c2:	bf00      	nop
 80029c4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	4986      	ldr	r1, [pc, #536]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00b      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029f8:	4b81      	ldr	r3, [pc, #516]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a08:	497d      	ldr	r1, [pc, #500]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d006      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 80d6 	beq.w	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a24:	4b76      	ldr	r3, [pc, #472]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a75      	ldr	r2, [pc, #468]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe f920 	bl	8000c74 <HAL_GetTick>
 8002a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a38:	f7fe f91c 	bl	8000c74 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b64      	cmp	r3, #100	; 0x64
 8002a44:	d901      	bls.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e195      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a4a:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d021      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a6a:	4b65      	ldr	r3, [pc, #404]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a78:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a7e:	0e1b      	lsrs	r3, r3, #24
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	019a      	lsls	r2, r3, #6
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	431a      	orrs	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	4958      	ldr	r1, [pc, #352]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d02e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad0:	d129      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae0:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	0f1b      	lsrs	r3, r3, #28
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	041b      	lsls	r3, r3, #16
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	061b      	lsls	r3, r3, #24
 8002b00:	431a      	orrs	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	071b      	lsls	r3, r3, #28
 8002b06:	493e      	ldr	r1, [pc, #248]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b14:	f023 021f 	bic.w	r2, r3, #31
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	4938      	ldr	r1, [pc, #224]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01d      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b32:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	0e1b      	lsrs	r3, r3, #24
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b40:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b46:	0f1b      	lsrs	r3, r3, #28
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	019a      	lsls	r2, r3, #6
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	041b      	lsls	r3, r3, #16
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	061b      	lsls	r3, r3, #24
 8002b60:	431a      	orrs	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	071b      	lsls	r3, r3, #28
 8002b66:	4926      	ldr	r1, [pc, #152]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d011      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	019a      	lsls	r2, r3, #6
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	041b      	lsls	r3, r3, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	491a      	ldr	r1, [pc, #104]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002baa:	f7fe f863 	bl	8000c74 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bb2:	f7fe f85f 	bl	8000c74 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b64      	cmp	r3, #100	; 0x64
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e0d8      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	f040 80ce 	bne.w	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be4:	f7fe f846 	bl	8000c74 <HAL_GetTick>
 8002be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bea:	e00b      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bec:	f7fe f842 	bl	8000c74 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d904      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0bb      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002bfe:	bf00      	nop
 8002c00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c04:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c10:	d0ec      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02e      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d12a      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c3a:	4b51      	ldr	r3, [pc, #324]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	0c1b      	lsrs	r3, r3, #16
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c48:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	0f1b      	lsrs	r3, r3, #28
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	019a      	lsls	r2, r3, #6
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	061b      	lsls	r3, r3, #24
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	071b      	lsls	r3, r3, #28
 8002c6e:	4944      	ldr	r1, [pc, #272]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c76:	4b42      	ldr	r3, [pc, #264]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	3b01      	subs	r3, #1
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	493d      	ldr	r1, [pc, #244]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d022      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca4:	d11d      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ca6:	4b36      	ldr	r3, [pc, #216]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	0e1b      	lsrs	r3, r3, #24
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	0f1b      	lsrs	r3, r3, #28
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	019a      	lsls	r2, r3, #6
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	061b      	lsls	r3, r3, #24
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	071b      	lsls	r3, r3, #28
 8002cda:	4929      	ldr	r1, [pc, #164]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d028      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cfc:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	019a      	lsls	r2, r3, #6
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	041b      	lsls	r3, r3, #16
 8002d14:	431a      	orrs	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	061b      	lsls	r3, r3, #24
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	071b      	lsls	r3, r3, #28
 8002d22:	4917      	ldr	r1, [pc, #92]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	4911      	ldr	r1, [pc, #68]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a0e      	ldr	r2, [pc, #56]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4c:	f7fd ff92 	bl	8000c74 <HAL_GetTick>
 8002d50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d54:	f7fd ff8e 	bl	8000c74 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e007      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d72:	d1ef      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3720      	adds	r7, #32
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e040      	b.n	8002e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7fd fe50 	bl	8000a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2224      	movs	r2, #36	; 0x24
 8002db0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fc10 	bl	80035e8 <UART_SetConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e022      	b.n	8002e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 fe68 	bl	8003ab0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 feef 	bl	8003bf4 <UART_CheckIdleState>
 8002e16:	4603      	mov	r3, r0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d171      	bne.n	8002f1c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Transmit+0x24>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e06a      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2221      	movs	r2, #33	; 0x21
 8002e54:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e56:	f7fd ff0d 	bl	8000c74 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d108      	bne.n	8002e88 <HAL_UART_Transmit+0x68>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d104      	bne.n	8002e88 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e003      	b.n	8002e90 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e90:	e02c      	b.n	8002eec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2180      	movs	r1, #128	; 0x80
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fef6 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e038      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10b      	bne.n	8002eca <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ec0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e007      	b.n	8002eda <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1cc      	bne.n	8002e92 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2140      	movs	r1, #64	; 0x40
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fec3 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e005      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2220      	movs	r2, #32
 8002f16:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	e000      	b.n	8002f1e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f1c:	2302      	movs	r3, #2
  }
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b08a      	sub	sp, #40	; 0x28
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	4613      	mov	r3, r2
 8002f32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d132      	bne.n	8002fa4 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_UART_Receive_DMA+0x24>
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e02b      	b.n	8002fa6 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d018      	beq.n	8002f94 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	e853 3f00 	ldrex	r3, [r3]
 8002f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	623b      	str	r3, [r7, #32]
 8002f82:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f84:	69f9      	ldr	r1, [r7, #28]
 8002f86:	6a3a      	ldr	r2, [r7, #32]
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e6      	bne.n	8002f62 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	461a      	mov	r2, r3
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 ff3e 	bl	8003e1c <UART_Start_Receive_DMA>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	e000      	b.n	8002fa6 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002fa4:	2302      	movs	r3, #2
  }
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3728      	adds	r7, #40	; 0x28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0ba      	sub	sp, #232	; 0xe8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fda:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fde:	4013      	ands	r3, r2
 8002fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d115      	bne.n	8003018 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00f      	beq.n	8003018 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffc:	f003 0320 	and.w	r3, r3, #32
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 82ac 	beq.w	8003566 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
      }
      return;
 8003016:	e2a6      	b.n	8003566 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003018:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 8117 	beq.w	8003250 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800302e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_UART_IRQHandler+0x298>)
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 810a 	beq.w	8003250 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800303c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <HAL_UART_IRQHandler+0xbc>
 8003048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003062:	f043 0201 	orr.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800306c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d011      	beq.n	800309c <HAL_UART_IRQHandler+0xec>
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2202      	movs	r2, #2
 800308a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800309c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d011      	beq.n	80030cc <HAL_UART_IRQHandler+0x11c>
 80030a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00b      	beq.n	80030cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2204      	movs	r2, #4
 80030ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d017      	beq.n	8003108 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2208      	movs	r2, #8
 80030f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	f043 0208 	orr.w	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003110:	2b00      	cmp	r3, #0
 8003112:	d012      	beq.n	800313a <HAL_UART_IRQHandler+0x18a>
 8003114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00c      	beq.n	800313a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003128:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8212 	beq.w	800356a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d005      	beq.n	8003192 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800318a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800318e:	2b00      	cmp	r3, #0
 8003190:	d04f      	beq.n	8003232 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 ff08 	bl	8003fa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d141      	bne.n	800322a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	3308      	adds	r3, #8
 80031ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3308      	adds	r3, #8
 80031ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1d9      	bne.n	80031a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d013      	beq.n	8003222 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fe:	4a13      	ldr	r2, [pc, #76]	; (800324c <HAL_UART_IRQHandler+0x29c>)
 8003200:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd fff4 	bl	80011f4 <HAL_DMA_Abort_IT>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d017      	beq.n	8003242 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800321c:	4610      	mov	r0, r2
 800321e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e00f      	b.n	8003242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9c0 	bl	80035a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	e00b      	b.n	8003242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f9bc 	bl	80035a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e007      	b.n	8003242 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f9b8 	bl	80035a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003240:	e193      	b.n	800356a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003242:	bf00      	nop
    return;
 8003244:	e191      	b.n	800356a <HAL_UART_IRQHandler+0x5ba>
 8003246:	bf00      	nop
 8003248:	04000120 	.word	0x04000120
 800324c:	08004255 	.word	0x08004255

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003254:	2b01      	cmp	r3, #1
 8003256:	f040 814c 	bne.w	80034f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 8145 	beq.w	80034f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 813e 	beq.w	80034f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2210      	movs	r2, #16
 800327c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	f040 80b6 	bne.w	80033fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800329a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8165 	beq.w	800356e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80032aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f080 815d 	bcs.w	800356e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032c8:	f000 8086 	beq.w	80033d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d8:	e853 3f00 	ldrex	r3, [r3]
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003302:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003306:	e841 2300 	strex	r3, r2, [r1]
 800330a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800330e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1da      	bne.n	80032cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3308      	adds	r3, #8
 800331c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	3308      	adds	r3, #8
 8003336:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800333a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800333e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003342:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003346:	e841 2300 	strex	r3, r2, [r1]
 800334a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800334c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1e1      	bne.n	8003316 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3308      	adds	r3, #8
 8003358:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003368:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003376:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003378:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800337c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e3      	bne.n	8003352 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2220      	movs	r2, #32
 800338e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	f023 0310 	bic.w	r3, r3, #16
 80033ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80033bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e4      	bne.n	8003398 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fe9e 	bl	8001114 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8e2 	bl	80035bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033f8:	e0b9      	b.n	800356e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003406:	b29b      	uxth	r3, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 80ab 	beq.w	8003572 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 800341c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a6 	beq.w	8003572 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003436:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800343a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003448:	647b      	str	r3, [r7, #68]	; 0x44
 800344a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800344e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e4      	bne.n	8003426 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	623b      	str	r3, [r7, #32]
   return(result);
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3308      	adds	r3, #8
 800347c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003480:	633a      	str	r2, [r7, #48]	; 0x30
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e3      	bne.n	800345c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	e853 3f00 	ldrex	r3, [r3]
 80034b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f023 0310 	bic.w	r3, r3, #16
 80034bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	69b9      	ldr	r1, [r7, #24]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	617b      	str	r3, [r7, #20]
   return(result);
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e4      	bne.n	80034a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2202      	movs	r2, #2
 80034e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e8:	4619      	mov	r1, r3
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f866 	bl	80035bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034f0:	e03f      	b.n	8003572 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00e      	beq.n	800351c <HAL_UART_IRQHandler+0x56c>
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 f85d 	bl	80035d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351a:	e02d      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800351c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00e      	beq.n	8003546 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01c      	beq.n	8003576 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
    }
    return;
 8003544:	e017      	b.n	8003576 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_UART_IRQHandler+0x5c8>
 8003552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fe8e 	bl	8004280 <UART_EndTransmit_IT>
    return;
 8003564:	e008      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003566:	bf00      	nop
 8003568:	e006      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
    return;
 800356a:	bf00      	nop
 800356c:	e004      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
      return;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
      return;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <HAL_UART_IRQHandler+0x5c8>
    return;
 8003576:	bf00      	nop
  }

}
 8003578:	37e8      	adds	r7, #232	; 0xe8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop

08003580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b088      	sub	sp, #32
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4ba6      	ldr	r3, [pc, #664]	; (80038ac <UART_SetConfig+0x2c4>)
 8003614:	4013      	ands	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	6979      	ldr	r1, [r7, #20]
 800361c:	430b      	orrs	r3, r1
 800361e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a94      	ldr	r2, [pc, #592]	; (80038b0 <UART_SetConfig+0x2c8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d120      	bne.n	80036a6 <UART_SetConfig+0xbe>
 8003664:	4b93      	ldr	r3, [pc, #588]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b03      	cmp	r3, #3
 8003670:	d816      	bhi.n	80036a0 <UART_SetConfig+0xb8>
 8003672:	a201      	add	r2, pc, #4	; (adr r2, 8003678 <UART_SetConfig+0x90>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	08003689 	.word	0x08003689
 800367c:	08003695 	.word	0x08003695
 8003680:	0800368f 	.word	0x0800368f
 8003684:	0800369b 	.word	0x0800369b
 8003688:	2301      	movs	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e150      	b.n	8003930 <UART_SetConfig+0x348>
 800368e:	2302      	movs	r3, #2
 8003690:	77fb      	strb	r3, [r7, #31]
 8003692:	e14d      	b.n	8003930 <UART_SetConfig+0x348>
 8003694:	2304      	movs	r3, #4
 8003696:	77fb      	strb	r3, [r7, #31]
 8003698:	e14a      	b.n	8003930 <UART_SetConfig+0x348>
 800369a:	2308      	movs	r3, #8
 800369c:	77fb      	strb	r3, [r7, #31]
 800369e:	e147      	b.n	8003930 <UART_SetConfig+0x348>
 80036a0:	2310      	movs	r3, #16
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e144      	b.n	8003930 <UART_SetConfig+0x348>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a83      	ldr	r2, [pc, #524]	; (80038b8 <UART_SetConfig+0x2d0>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d132      	bne.n	8003716 <UART_SetConfig+0x12e>
 80036b0:	4b80      	ldr	r3, [pc, #512]	; (80038b4 <UART_SetConfig+0x2cc>)
 80036b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b0c      	cmp	r3, #12
 80036bc:	d828      	bhi.n	8003710 <UART_SetConfig+0x128>
 80036be:	a201      	add	r2, pc, #4	; (adr r2, 80036c4 <UART_SetConfig+0xdc>)
 80036c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c4:	080036f9 	.word	0x080036f9
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003711 	.word	0x08003711
 80036d0:	08003711 	.word	0x08003711
 80036d4:	08003705 	.word	0x08003705
 80036d8:	08003711 	.word	0x08003711
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003711 	.word	0x08003711
 80036e4:	080036ff 	.word	0x080036ff
 80036e8:	08003711 	.word	0x08003711
 80036ec:	08003711 	.word	0x08003711
 80036f0:	08003711 	.word	0x08003711
 80036f4:	0800370b 	.word	0x0800370b
 80036f8:	2300      	movs	r3, #0
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e118      	b.n	8003930 <UART_SetConfig+0x348>
 80036fe:	2302      	movs	r3, #2
 8003700:	77fb      	strb	r3, [r7, #31]
 8003702:	e115      	b.n	8003930 <UART_SetConfig+0x348>
 8003704:	2304      	movs	r3, #4
 8003706:	77fb      	strb	r3, [r7, #31]
 8003708:	e112      	b.n	8003930 <UART_SetConfig+0x348>
 800370a:	2308      	movs	r3, #8
 800370c:	77fb      	strb	r3, [r7, #31]
 800370e:	e10f      	b.n	8003930 <UART_SetConfig+0x348>
 8003710:	2310      	movs	r3, #16
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e10c      	b.n	8003930 <UART_SetConfig+0x348>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a68      	ldr	r2, [pc, #416]	; (80038bc <UART_SetConfig+0x2d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d120      	bne.n	8003762 <UART_SetConfig+0x17a>
 8003720:	4b64      	ldr	r3, [pc, #400]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800372a:	2b30      	cmp	r3, #48	; 0x30
 800372c:	d013      	beq.n	8003756 <UART_SetConfig+0x16e>
 800372e:	2b30      	cmp	r3, #48	; 0x30
 8003730:	d814      	bhi.n	800375c <UART_SetConfig+0x174>
 8003732:	2b20      	cmp	r3, #32
 8003734:	d009      	beq.n	800374a <UART_SetConfig+0x162>
 8003736:	2b20      	cmp	r3, #32
 8003738:	d810      	bhi.n	800375c <UART_SetConfig+0x174>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <UART_SetConfig+0x15c>
 800373e:	2b10      	cmp	r3, #16
 8003740:	d006      	beq.n	8003750 <UART_SetConfig+0x168>
 8003742:	e00b      	b.n	800375c <UART_SetConfig+0x174>
 8003744:	2300      	movs	r3, #0
 8003746:	77fb      	strb	r3, [r7, #31]
 8003748:	e0f2      	b.n	8003930 <UART_SetConfig+0x348>
 800374a:	2302      	movs	r3, #2
 800374c:	77fb      	strb	r3, [r7, #31]
 800374e:	e0ef      	b.n	8003930 <UART_SetConfig+0x348>
 8003750:	2304      	movs	r3, #4
 8003752:	77fb      	strb	r3, [r7, #31]
 8003754:	e0ec      	b.n	8003930 <UART_SetConfig+0x348>
 8003756:	2308      	movs	r3, #8
 8003758:	77fb      	strb	r3, [r7, #31]
 800375a:	e0e9      	b.n	8003930 <UART_SetConfig+0x348>
 800375c:	2310      	movs	r3, #16
 800375e:	77fb      	strb	r3, [r7, #31]
 8003760:	e0e6      	b.n	8003930 <UART_SetConfig+0x348>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a56      	ldr	r2, [pc, #344]	; (80038c0 <UART_SetConfig+0x2d8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d120      	bne.n	80037ae <UART_SetConfig+0x1c6>
 800376c:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <UART_SetConfig+0x2cc>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003776:	2bc0      	cmp	r3, #192	; 0xc0
 8003778:	d013      	beq.n	80037a2 <UART_SetConfig+0x1ba>
 800377a:	2bc0      	cmp	r3, #192	; 0xc0
 800377c:	d814      	bhi.n	80037a8 <UART_SetConfig+0x1c0>
 800377e:	2b80      	cmp	r3, #128	; 0x80
 8003780:	d009      	beq.n	8003796 <UART_SetConfig+0x1ae>
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d810      	bhi.n	80037a8 <UART_SetConfig+0x1c0>
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <UART_SetConfig+0x1a8>
 800378a:	2b40      	cmp	r3, #64	; 0x40
 800378c:	d006      	beq.n	800379c <UART_SetConfig+0x1b4>
 800378e:	e00b      	b.n	80037a8 <UART_SetConfig+0x1c0>
 8003790:	2300      	movs	r3, #0
 8003792:	77fb      	strb	r3, [r7, #31]
 8003794:	e0cc      	b.n	8003930 <UART_SetConfig+0x348>
 8003796:	2302      	movs	r3, #2
 8003798:	77fb      	strb	r3, [r7, #31]
 800379a:	e0c9      	b.n	8003930 <UART_SetConfig+0x348>
 800379c:	2304      	movs	r3, #4
 800379e:	77fb      	strb	r3, [r7, #31]
 80037a0:	e0c6      	b.n	8003930 <UART_SetConfig+0x348>
 80037a2:	2308      	movs	r3, #8
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e0c3      	b.n	8003930 <UART_SetConfig+0x348>
 80037a8:	2310      	movs	r3, #16
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e0c0      	b.n	8003930 <UART_SetConfig+0x348>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a44      	ldr	r2, [pc, #272]	; (80038c4 <UART_SetConfig+0x2dc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d125      	bne.n	8003804 <UART_SetConfig+0x21c>
 80037b8:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <UART_SetConfig+0x2cc>)
 80037ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c6:	d017      	beq.n	80037f8 <UART_SetConfig+0x210>
 80037c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037cc:	d817      	bhi.n	80037fe <UART_SetConfig+0x216>
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d2:	d00b      	beq.n	80037ec <UART_SetConfig+0x204>
 80037d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d8:	d811      	bhi.n	80037fe <UART_SetConfig+0x216>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <UART_SetConfig+0x1fe>
 80037de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e2:	d006      	beq.n	80037f2 <UART_SetConfig+0x20a>
 80037e4:	e00b      	b.n	80037fe <UART_SetConfig+0x216>
 80037e6:	2300      	movs	r3, #0
 80037e8:	77fb      	strb	r3, [r7, #31]
 80037ea:	e0a1      	b.n	8003930 <UART_SetConfig+0x348>
 80037ec:	2302      	movs	r3, #2
 80037ee:	77fb      	strb	r3, [r7, #31]
 80037f0:	e09e      	b.n	8003930 <UART_SetConfig+0x348>
 80037f2:	2304      	movs	r3, #4
 80037f4:	77fb      	strb	r3, [r7, #31]
 80037f6:	e09b      	b.n	8003930 <UART_SetConfig+0x348>
 80037f8:	2308      	movs	r3, #8
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	e098      	b.n	8003930 <UART_SetConfig+0x348>
 80037fe:	2310      	movs	r3, #16
 8003800:	77fb      	strb	r3, [r7, #31]
 8003802:	e095      	b.n	8003930 <UART_SetConfig+0x348>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2f      	ldr	r2, [pc, #188]	; (80038c8 <UART_SetConfig+0x2e0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d125      	bne.n	800385a <UART_SetConfig+0x272>
 800380e:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800381c:	d017      	beq.n	800384e <UART_SetConfig+0x266>
 800381e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003822:	d817      	bhi.n	8003854 <UART_SetConfig+0x26c>
 8003824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003828:	d00b      	beq.n	8003842 <UART_SetConfig+0x25a>
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382e:	d811      	bhi.n	8003854 <UART_SetConfig+0x26c>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <UART_SetConfig+0x254>
 8003834:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003838:	d006      	beq.n	8003848 <UART_SetConfig+0x260>
 800383a:	e00b      	b.n	8003854 <UART_SetConfig+0x26c>
 800383c:	2301      	movs	r3, #1
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e076      	b.n	8003930 <UART_SetConfig+0x348>
 8003842:	2302      	movs	r3, #2
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e073      	b.n	8003930 <UART_SetConfig+0x348>
 8003848:	2304      	movs	r3, #4
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e070      	b.n	8003930 <UART_SetConfig+0x348>
 800384e:	2308      	movs	r3, #8
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e06d      	b.n	8003930 <UART_SetConfig+0x348>
 8003854:	2310      	movs	r3, #16
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e06a      	b.n	8003930 <UART_SetConfig+0x348>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1b      	ldr	r2, [pc, #108]	; (80038cc <UART_SetConfig+0x2e4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d138      	bne.n	80038d6 <UART_SetConfig+0x2ee>
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <UART_SetConfig+0x2cc>)
 8003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800386e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003872:	d017      	beq.n	80038a4 <UART_SetConfig+0x2bc>
 8003874:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003878:	d82a      	bhi.n	80038d0 <UART_SetConfig+0x2e8>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	d00b      	beq.n	8003898 <UART_SetConfig+0x2b0>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d824      	bhi.n	80038d0 <UART_SetConfig+0x2e8>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <UART_SetConfig+0x2aa>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d006      	beq.n	800389e <UART_SetConfig+0x2b6>
 8003890:	e01e      	b.n	80038d0 <UART_SetConfig+0x2e8>
 8003892:	2300      	movs	r3, #0
 8003894:	77fb      	strb	r3, [r7, #31]
 8003896:	e04b      	b.n	8003930 <UART_SetConfig+0x348>
 8003898:	2302      	movs	r3, #2
 800389a:	77fb      	strb	r3, [r7, #31]
 800389c:	e048      	b.n	8003930 <UART_SetConfig+0x348>
 800389e:	2304      	movs	r3, #4
 80038a0:	77fb      	strb	r3, [r7, #31]
 80038a2:	e045      	b.n	8003930 <UART_SetConfig+0x348>
 80038a4:	2308      	movs	r3, #8
 80038a6:	77fb      	strb	r3, [r7, #31]
 80038a8:	e042      	b.n	8003930 <UART_SetConfig+0x348>
 80038aa:	bf00      	nop
 80038ac:	efff69f3 	.word	0xefff69f3
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40004400 	.word	0x40004400
 80038bc:	40004800 	.word	0x40004800
 80038c0:	40004c00 	.word	0x40004c00
 80038c4:	40005000 	.word	0x40005000
 80038c8:	40011400 	.word	0x40011400
 80038cc:	40007800 	.word	0x40007800
 80038d0:	2310      	movs	r3, #16
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e02c      	b.n	8003930 <UART_SetConfig+0x348>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a72      	ldr	r2, [pc, #456]	; (8003aa4 <UART_SetConfig+0x4bc>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d125      	bne.n	800392c <UART_SetConfig+0x344>
 80038e0:	4b71      	ldr	r3, [pc, #452]	; (8003aa8 <UART_SetConfig+0x4c0>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038ee:	d017      	beq.n	8003920 <UART_SetConfig+0x338>
 80038f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80038f4:	d817      	bhi.n	8003926 <UART_SetConfig+0x33e>
 80038f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fa:	d00b      	beq.n	8003914 <UART_SetConfig+0x32c>
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003900:	d811      	bhi.n	8003926 <UART_SetConfig+0x33e>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <UART_SetConfig+0x326>
 8003906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390a:	d006      	beq.n	800391a <UART_SetConfig+0x332>
 800390c:	e00b      	b.n	8003926 <UART_SetConfig+0x33e>
 800390e:	2300      	movs	r3, #0
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e00d      	b.n	8003930 <UART_SetConfig+0x348>
 8003914:	2302      	movs	r3, #2
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e00a      	b.n	8003930 <UART_SetConfig+0x348>
 800391a:	2304      	movs	r3, #4
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e007      	b.n	8003930 <UART_SetConfig+0x348>
 8003920:	2308      	movs	r3, #8
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e004      	b.n	8003930 <UART_SetConfig+0x348>
 8003926:	2310      	movs	r3, #16
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e001      	b.n	8003930 <UART_SetConfig+0x348>
 800392c:	2310      	movs	r3, #16
 800392e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003938:	d15b      	bne.n	80039f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800393a:	7ffb      	ldrb	r3, [r7, #31]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d828      	bhi.n	8003992 <UART_SetConfig+0x3aa>
 8003940:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <UART_SetConfig+0x360>)
 8003942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003946:	bf00      	nop
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe fdba 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003970:	61b8      	str	r0, [r7, #24]
        break;
 8003972:	e013      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fdca 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003978:	61b8      	str	r0, [r7, #24]
        break;
 800397a:	e00f      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <UART_SetConfig+0x4c4>)
 800397e:	61bb      	str	r3, [r7, #24]
        break;
 8003980:	e00c      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe fc9d 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8003986:	61b8      	str	r0, [r7, #24]
        break;
 8003988:	e008      	b.n	800399c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e004      	b.n	800399c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	77bb      	strb	r3, [r7, #30]
        break;
 800399a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d074      	beq.n	8003a8c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	005a      	lsls	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	441a      	add	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d916      	bls.n	80039ec <UART_SetConfig+0x404>
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d212      	bcs.n	80039ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	f023 030f 	bic.w	r3, r3, #15
 80039ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	b29a      	uxth	r2, r3
 80039dc:	89fb      	ldrh	r3, [r7, #14]
 80039de:	4313      	orrs	r3, r2
 80039e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	89fa      	ldrh	r2, [r7, #14]
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e04f      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	77bb      	strb	r3, [r7, #30]
 80039f0:	e04c      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f2:	7ffb      	ldrb	r3, [r7, #31]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d828      	bhi.n	8003a4a <UART_SetConfig+0x462>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x418>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fd5e 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e013      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fd6e 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003a30:	61b8      	str	r0, [r7, #24]
        break;
 8003a32:	e00f      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <UART_SetConfig+0x4c4>)
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e00c      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fc41 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61b8      	str	r0, [r7, #24]
        break;
 8003a40:	e008      	b.n	8003a54 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e004      	b.n	8003a54 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77bb      	strb	r3, [r7, #30]
        break;
 8003a52:	bf00      	nop
    }

    if (pclk != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d018      	beq.n	8003a8c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	085a      	lsrs	r2, r3, #1
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	441a      	add	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d909      	bls.n	8003a88 <UART_SetConfig+0x4a0>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7a:	d205      	bcs.n	8003a88 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	e001      	b.n	8003a8c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a98:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40007c00 	.word	0x40007c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	00f42400 	.word	0x00f42400

08003ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bae:	d10a      	bne.n	8003bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd f836 	bl	8000c74 <HAL_GetTick>
 8003c08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d10e      	bne.n	8003c36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f831 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e027      	b.n	8003c86 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d10e      	bne.n	8003c62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f81b 	bl	8003c8e <UART_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e011      	b.n	8003c86 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b09c      	sub	sp, #112	; 0x70
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	603b      	str	r3, [r7, #0]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9e:	e0a7      	b.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca6:	f000 80a3 	beq.w	8003df0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003caa:	f7fc ffe3 	bl	8000c74 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d302      	bcc.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d13f      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ce4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e6      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	f023 0301 	bic.w	r3, r3, #1
 8003d08:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d12:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e068      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d050      	beq.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d148      	bne.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d66:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
 8003d88:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e6      	bne.n	8003d68 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	613b      	str	r3, [r7, #16]
   return(result);
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3308      	adds	r3, #8
 8003db8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dba:	623a      	str	r2, [r7, #32]
 8003dbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	69f9      	ldr	r1, [r7, #28]
 8003dc0:	6a3a      	ldr	r2, [r7, #32]
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e5      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e010      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	79fb      	ldrb	r3, [r7, #7]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	f43f af48 	beq.w	8003ca0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3770      	adds	r7, #112	; 0x70
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b096      	sub	sp, #88	; 0x58
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	4613      	mov	r3, r2
 8003e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2222      	movs	r2, #34	; 0x22
 8003e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d028      	beq.n	8003ea2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	4a3e      	ldr	r2, [pc, #248]	; (8003f50 <UART_Start_Receive_DMA+0x134>)
 8003e56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	4a3d      	ldr	r2, [pc, #244]	; (8003f54 <UART_Start_Receive_DMA+0x138>)
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e64:	4a3c      	ldr	r2, [pc, #240]	; (8003f58 <UART_Start_Receive_DMA+0x13c>)
 8003e66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3324      	adds	r3, #36	; 0x24
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	461a      	mov	r2, r3
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	f7fd f8e6 	bl	8001054 <HAL_DMA_Start_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2210      	movs	r2, #16
 8003e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e051      	b.n	8003f46 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d018      	beq.n	8003edc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb2:	e853 3f00 	ldrex	r3, [r3]
 8003eb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003eca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e6      	bne.n	8003eaa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003efc:	637a      	str	r2, [r7, #52]	; 0x34
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e5      	bne.n	8003edc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3308      	adds	r3, #8
 8003f16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	e853 3f00 	ldrex	r3, [r3]
 8003f1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f30:	623a      	str	r2, [r7, #32]
 8003f32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	69f9      	ldr	r1, [r7, #28]
 8003f36:	6a3a      	ldr	r2, [r7, #32]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e5      	bne.n	8003f10 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3758      	adds	r7, #88	; 0x58
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	08004071 	.word	0x08004071
 8003f54:	08004199 	.word	0x08004199
 8003f58:	080041d7 	.word	0x080041d7

08003f5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b089      	sub	sp, #36	; 0x24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6979      	ldr	r1, [r7, #20]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e6      	bne.n	8003f64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8003f9c:	bf00      	nop
 8003f9e:	3724      	adds	r7, #36	; 0x24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b095      	sub	sp, #84	; 0x54
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fce:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e6      	bne.n	8003fb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f023 0301 	bic.w	r3, r3, #1
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3308      	adds	r3, #8
 8004000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004002:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004004:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	2b01      	cmp	r3, #1
 800401c:	d118      	bne.n	8004050 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	e853 3f00 	ldrex	r3, [r3]
 800402a:	60bb      	str	r3, [r7, #8]
   return(result);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f023 0310 	bic.w	r3, r3, #16
 8004032:	647b      	str	r3, [r7, #68]	; 0x44
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004040:	6979      	ldr	r1, [r7, #20]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	e841 2300 	strex	r3, r2, [r1]
 8004048:	613b      	str	r3, [r7, #16]
   return(result);
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1e6      	bne.n	800401e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004064:	bf00      	nop
 8004066:	3754      	adds	r7, #84	; 0x54
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b09c      	sub	sp, #112	; 0x70
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d071      	beq.n	800416c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	2200      	movs	r2, #0
 800408c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800409e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80040b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040b6:	e841 2300 	strex	r3, r2, [r1]
 80040ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e6      	bne.n	8004090 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	f023 0301 	bic.w	r3, r3, #1
 80040d8:	667b      	str	r3, [r7, #100]	; 0x64
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80040e2:	647a      	str	r2, [r7, #68]	; 0x44
 80040e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e5      	bne.n	80040c2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3308      	adds	r3, #8
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800410c:	663b      	str	r3, [r7, #96]	; 0x60
 800410e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3308      	adds	r3, #8
 8004114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004116:	633a      	str	r2, [r7, #48]	; 0x30
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800411c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800411e:	e841 2300 	strex	r3, r2, [r1]
 8004122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e5      	bne.n	80040f6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800412a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004136:	2b01      	cmp	r3, #1
 8004138:	d118      	bne.n	800416c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60fb      	str	r3, [r7, #12]
   return(result);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	69b9      	ldr	r1, [r7, #24]
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	617b      	str	r3, [r7, #20]
   return(result);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	2200      	movs	r2, #0
 8004170:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004176:	2b01      	cmp	r3, #1
 8004178:	d107      	bne.n	800418a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004180:	4619      	mov	r1, r3
 8004182:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004184:	f7ff fa1a 	bl	80035bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004188:	e002      	b.n	8004190 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800418a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800418c:	f7fc fb9a 	bl	80008c4 <HAL_UART_RxCpltCallback>
}
 8004190:	bf00      	nop
 8004192:	3770      	adds	r7, #112	; 0x70
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d109      	bne.n	80041c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff f9fb 	bl	80035bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041c6:	e002      	b.n	80041ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff f9e3 	bl	8003594 <HAL_UART_RxHalfCpltCallback>
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041e8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d109      	bne.n	8004214 <UART_DMAError+0x3e>
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b21      	cmp	r3, #33	; 0x21
 8004204:	d106      	bne.n	8004214 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800420e:	6978      	ldr	r0, [r7, #20]
 8004210:	f7ff fea4 	bl	8003f5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d109      	bne.n	8004236 <UART_DMAError+0x60>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b22      	cmp	r3, #34	; 0x22
 8004226:	d106      	bne.n	8004236 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2200      	movs	r2, #0
 800422c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f7ff feb9 	bl	8003fa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423c:	f043 0210 	orr.w	r2, r3, #16
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004246:	6978      	ldr	r0, [r7, #20]
 8004248:	f7ff f9ae 	bl	80035a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800424c:	bf00      	nop
 800424e:	3718      	adds	r7, #24
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff f998 	bl	80035a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	60bb      	str	r3, [r7, #8]
   return(result);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	61fb      	str	r3, [r7, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	461a      	mov	r2, r3
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
 80042a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	613b      	str	r3, [r7, #16]
   return(result);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e6      	bne.n	8004288 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f7ff f95a 	bl	8003580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042cc:	bf00      	nop
 80042ce:	3720      	adds	r7, #32
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <__libc_init_array>:
 80042d4:	b570      	push	{r4, r5, r6, lr}
 80042d6:	4d0d      	ldr	r5, [pc, #52]	; (800430c <__libc_init_array+0x38>)
 80042d8:	4c0d      	ldr	r4, [pc, #52]	; (8004310 <__libc_init_array+0x3c>)
 80042da:	1b64      	subs	r4, r4, r5
 80042dc:	10a4      	asrs	r4, r4, #2
 80042de:	2600      	movs	r6, #0
 80042e0:	42a6      	cmp	r6, r4
 80042e2:	d109      	bne.n	80042f8 <__libc_init_array+0x24>
 80042e4:	4d0b      	ldr	r5, [pc, #44]	; (8004314 <__libc_init_array+0x40>)
 80042e6:	4c0c      	ldr	r4, [pc, #48]	; (8004318 <__libc_init_array+0x44>)
 80042e8:	f000 f820 	bl	800432c <_init>
 80042ec:	1b64      	subs	r4, r4, r5
 80042ee:	10a4      	asrs	r4, r4, #2
 80042f0:	2600      	movs	r6, #0
 80042f2:	42a6      	cmp	r6, r4
 80042f4:	d105      	bne.n	8004302 <__libc_init_array+0x2e>
 80042f6:	bd70      	pop	{r4, r5, r6, pc}
 80042f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042fc:	4798      	blx	r3
 80042fe:	3601      	adds	r6, #1
 8004300:	e7ee      	b.n	80042e0 <__libc_init_array+0xc>
 8004302:	f855 3b04 	ldr.w	r3, [r5], #4
 8004306:	4798      	blx	r3
 8004308:	3601      	adds	r6, #1
 800430a:	e7f2      	b.n	80042f2 <__libc_init_array+0x1e>
 800430c:	0800437c 	.word	0x0800437c
 8004310:	0800437c 	.word	0x0800437c
 8004314:	0800437c 	.word	0x0800437c
 8004318:	08004380 	.word	0x08004380

0800431c <memset>:
 800431c:	4402      	add	r2, r0
 800431e:	4603      	mov	r3, r0
 8004320:	4293      	cmp	r3, r2
 8004322:	d100      	bne.n	8004326 <memset+0xa>
 8004324:	4770      	bx	lr
 8004326:	f803 1b01 	strb.w	r1, [r3], #1
 800432a:	e7f9      	b.n	8004320 <memset+0x4>

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	bf00      	nop
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
